<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++基础知识学习</title>
    <url>/2024/03/09/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="一指针">一、指针</h2>
<h3 id="c的双指针">1.1 C++的双指针</h3>
<p>C++的双指针是指一个指针<strong>指向另一个指针的指针</strong>，如<code>int **p</code>，其指向的是一个指针的地址，也就是说，<code>p=某个指针的地址</code>，<code>*p=这个指针指向的地址</code>，而<code>p</code>本身也是一个int类型的数据</p>
<p>简单的例子如下：</p>
<p><code>int a = 10;</code></p>
<p><code>int *p = &amp;a;</code>
//<code>p</code>指向a的地址<code>&amp;a</code>,
<code>*p</code>指向<code>a的值</code>，这是一级指针，它的值是内存中存放变量a的地址</p>
<p><code>int **pp = &amp;p;</code>
//<code>pp</code>指向<code>p</code>的地址<code>&amp;p</code>，<code>*pp</code>指向<code>p</code>的值，即<code>&amp;a</code>，这是二级指针，它的值是内存中<strong>存放变量p的地址</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> aa = <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">singlePointer</span><span class="params">(<span class="keyword">int</span> *p1)</span></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-----singlePointer-----&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;&amp;p1=&quot;</span> &lt;&lt; &amp;p1 &lt;&lt; <span class="string">&quot;  函数中的p是重新创建的指针&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1=&quot;</span> &lt;&lt; p1  &lt;&lt; <span class="string">&quot;     传进来的是原先a的地址&quot;</span> &lt;&lt; endl;</span><br><span class="line">	*p1 = <span class="number">5</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-----singlePointer END-----&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doublePointer</span><span class="params">(<span class="keyword">int</span> **p2)</span></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-----doublePointer-----&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;&amp;p2=&quot;</span> &lt;&lt; &amp;p2 &lt;&lt; <span class="string">&quot;  函数中的p是重新创建的指针&quot;</span>  &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2=&quot;</span> &lt;&lt; p2 &lt;&lt; <span class="string">&quot;     传进来的是原先p的地址&quot;</span> &lt;&lt; endl;</span><br><span class="line">	*p2 = &amp;aa;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-----doublePointer-----END&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">   	<span class="keyword">int</span> *p = &amp;a;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;&amp;a=&quot;</span> &lt;&lt; &amp;a &lt;&lt;  <span class="string">&quot; | &quot;</span>&lt;&lt; <span class="string">&quot;&amp;p=&quot;</span>&lt;&lt; &amp;p &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt;  <span class="string">&quot;p=&quot;</span> &lt;&lt; p &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; <span class="string">&quot;*p=&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">singlePointer</span>(p);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;&amp;a=&quot;</span> &lt;&lt; &amp;a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">doublePointer</span>(&amp;p);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p=&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*p=&quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">   	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果：</li>
</ul>
<p><img src="/2024/03/09/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/doublePointer.png" width="60%"></p>
<ul>
<li>原因：
<ul>
<li>p本身也是一个int型变量，只是存的值是地址；对所存地址进行*p解引用就可以实现取值；</li>
<li>单指针函数的话传的是p，所以其实传进去的是a的地址，然后该地址赋值给新的指针p1，所以已经没有原先p指针的信息了，无法实现修改原先p指针的指向对象，只能改变a的值；</li>
<li>双指针传的是&amp;p，也就是p的地址，所以该地址赋值给新的指针p2，可以实现修改原先p的指向对象</li>
</ul></li>
</ul>
<h3 id="指针和引用的区别">1.2 指针和引用的区别</h3>
<ul>
<li><strong>指针</strong>是一个<strong>变量</strong>，它存储的是一个<strong>地址</strong>；而<strong>引用</strong>是一个<strong>别名</strong>，它是一个<strong>常量</strong>，它本质上跟被引用的变量是同一个东西。</li>
<li>指针有多级而引用只有一级；指针可以指向空，而引用不行；通过指针传参时会重新拷贝到另一个指针中，而引用会直接传实参</li>
<li>sizeof时，指针占用的空间是固定的(8bytes)，而引用占用的空间是被引用变量的大小；</li>
</ul>
<p>指针和引用的使用方式不同：</p>
<ul>
<li><strong>指针</strong>：<code>int *p = &amp;a;</code>
<ul>
<li>通过赋值变量<code>a</code>的地址给指针<code>p</code></li>
<li>通过<code>*p</code>来<strong>解引用</strong>访问<code>a</code>的值</li>
<li>非<strong>指针常量</strong>的话，指针变量可以<strong>重新赋值</strong>改变指向的地址，即<code>p = &amp;b;</code></li>
</ul></li>
<li><strong>引用</strong>：<code>int &amp;r = a;</code>
<ul>
<li>通过<code>&amp;</code>符号来<strong>取地址</strong>，然后赋值给引用<code>r</code></li>
<li>直接通过<code>r</code>来访问<code>a</code>的值</li>
<li>引用<strong>不可以重新赋值</strong>，即<code>r = b;</code>是不允许的，所以<strong>引用必须在定义时初始化</strong></li>
</ul></li>
</ul>
<p>什么时候用指针，什么时候用引用？</p>
<ul>
<li>使用引用：当需要减少拷贝时；当传递<strong>类对象</strong>时标准方式是使用引用</li>
<li>使用指针：当传入<strong>基础类型的数组时使用指针</strong>；当需要在函数中改变指向的对象时；当需要返回函数内局部变量的内存地址时</li>
</ul>
<p>代码举例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printTest</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;This is : &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	Test m_test;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针</span></span><br><span class="line">	Test* m_ptr   = &amp;m_test;</span><br><span class="line">	m_ptr-&gt;<span class="built_in">printTest</span>(<span class="string">&quot;指针&quot;</span>);</span><br><span class="line">	<span class="comment">//引用</span></span><br><span class="line">	Test&amp; m_quote = m_test;</span><br><span class="line">	m_quote.<span class="built_in">printTest</span>(<span class="string">&quot;引用&quot;</span>);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;调试用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="野指针和悬空指针">1.3 野指针和悬空指针</h3>
<p><strong>野指针</strong></p>
<p>指尚未初始化的指针，既不指向合法的内存空间，也没有使用 NULL/nullptr
初始化指针。</p>
<p>出现野指针举例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p;<span class="comment">//未初始化,野指针</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;<span class="comment">//初始化为NULL,不是野指针</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">nullptr</span>;<span class="comment">//初始化为nullptr,p不再是不是野指针</span></span><br></pre></td></tr></table></figure>
<p><strong>悬空指针</strong></p>
<p>指向<strong>已经释放</strong>的内存地址的指针（释放前是合法的指针）</p>
<p>出现悬空指针的原因主要有三种：</p>
<ul>
<li>指针释放资源后<strong>没有被重新赋值</strong> OR
指针释放后<strong>没有置为</strong><code>nullptr</code>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="comment">//p没有被重新赋值或者置为nullptr</span></span><br></pre></td></tr></table></figure></li>
<li>超出变量作用域 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    p = &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a是局部变量，超出作用域，p成为悬空指针</span></span><br></pre></td></tr></table></figure></li>
<li>指向函数返回的<strong>局部变量的指针</strong>或者<strong>引用</strong>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="built_in">fun</span>();</span><br></pre></td></tr></table></figure> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> &amp;p = <span class="built_in">fun</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<p>上述提到的<strong>野指针</strong>和<strong>悬空指针</strong>都是<strong>危险</strong>的，因为它们可能会<strong>访问到非法内存</strong>，导致程序崩溃。</p>
<h3 id="智能指针">1.4 智能指针</h3>
<h4 id="内存溢出-out-of-memory">1.4.1 内存溢出 Out of Memory</h4>
<p>内存溢出是指<strong>程序申请的内存超过了系统能提供的内存</strong>，导致<strong>程序崩溃</strong>。</p>
<p>内存溢出的原因主要是因为<strong>申请内存过大</strong>：程序申请的内存超过了系统能提供的内存</p>
<ul>
<li>比如，程序申请了一个很大的数组，但是系统内存不足，导致内存溢出</li>
<li>再比如，申请了一个<code>int</code>变量，但是实际给它赋值了一个很大的数（如long才能存下的数），导致内存溢出</li>
<li><strong>内存泄漏最终会导致内存溢出</strong></li>
</ul>
<h4 id="内存泄漏-memory-leak">1.4.2 内存泄漏 Memory Leak</h4>
<p>内存泄漏是指<strong>程序分配了一块内存空间</strong>，但<strong>由于某种原因</strong>，<strong>程序没有释放</strong>或者<strong>无法释放</strong>这块内存空间，导致<strong>这块内存空间永远无法被使用</strong>，这就是内存泄漏。</p>
<p>内存泄漏的原因主要有两种：</p>
<ul>
<li><strong>堆内存泄漏</strong>：程序在堆上分配了内存，但是<strong>没有释放</strong>，导致内存泄漏。通常是因为<strong>程序员使用<code>new</code>或者<code>malloc</code>分配内存，但是忘记使用<code>delete</code>或者<code>free</code>释放内存</strong>。</li>
<li><strong>资源泄漏</strong>：程序在使用资源时，<strong>没有释放</strong>，导致资源泄漏。比如<strong>打开文件</strong>、<strong>打开数据库连接</strong>等，但是<strong>没有关闭</strong>，久而久之会导致其它程序无法使用它。</li>
</ul>
<p><strong>如何避免内存泄漏</strong>：</p>
<ul>
<li>首先是记得及时释放，一般会在<strong>析构函数</strong>中释放内存类的资源（但是如果类的对象也是用<code>new</code>分配的内存，那么还是要手动释放对象才能调用析构函数）</li>
<li>其次是使用<strong>智能指针</strong>，实现自动管理内存。（智能指针过期后会自动调用析构函数，释放内存）</li>
<li>可以使用<strong>RAII</strong>（资源获取即初始化，智能指针就是采用的RAII实现的资源管理）技术，即在<strong>构造函数</strong>中申请资源，在<strong>析构函数</strong>中释放资源，这样可以保证资源的及时释放。</li>
<li>用工具检查内存泄漏，如<code>BoundsChecker</code>、<code>Valgrind</code>等</li>
<li>调用DEBUG版程序的<code>CRT</code>堆栈提示分析泄漏原因</li>
</ul>
<p>题外话说一下<strong>缓冲区</strong>溢出：缓冲区溢出是指如<code>vector</code>、<code>string</code>等这种带索引的容器，当<strong>索引超出容器的范围</strong>时，会导致<strong>程序崩溃</strong>。</p>
<h4 id="智能指针-1">1.4.3 智能指针</h4>
<p>智能指针是C++11引入的一种<strong>内存管理</strong>方式，它是一个<strong>类模板</strong>，可以自动管理内存，<strong>避免内存泄漏</strong>。智能指针在<code>&lt;memory&gt;</code>头文件中。</p>
<p>智能指针的主要作用是解放程序员，实现<strong>自动释放内存</strong>，当智能指针<strong>超出作用域</strong>时，会自动调用析构函数，释放内存。</p>
<p>常用的智能指针有<code>unique_ptr</code>、<code>shared_ptr</code>和<code>weak_ptr</code>是C++11标准，而<code>auto_ptr</code>是C++98标准，已经被C++17废弃。</p>
<h5 id="unique_ptr">1.4.3.1 unique_ptr</h5>
<p>通常一块内存可以被多个普通指针指向，但是<code>unique_ptr</code>是<strong>独占</strong>的，即<strong>一块内存只能有一个<code>unique_ptr</code>指向它</strong>。</p>
<p>首先来产生用<code>unique_ptr</code>管理普通的指针，实现没有<code>delete</code>也能自动释放普通指针</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSmartPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">TestSmartPtr</span>(string m_name) :<span class="built_in">m_name</span>(m_name) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">TestSmartPtr</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">TestSmartPtr</span>(<span class="keyword">const</span> TestSmartPtr&amp; other):<span class="built_in">m_name</span>(other.m_name)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//使用智能指针管理普通指针：实现程序结束自动调用析构函数</span></span><br><span class="line">	TestSmartPtr* p = <span class="keyword">new</span> <span class="built_in">TestSmartPtr</span>(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">	<span class="function">unique_ptr&lt;TestSmartPtr&gt; <span class="title">uni_ptr</span><span class="params">(p)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用了Test的构造函数</span><br><span class="line">调用了Test的析构函数</span><br></pre></td></tr></table></figure>
<p>但实际上，有了智能指针之后，我们很少再使用普通指针了，所以我们一般是直接在构造函数中<code>new</code>一个对象，或者使用<code>make_unique</code>函数来创建对象。因此初始化时主要有三种方法：</p>
<ul>
<li><code>unique_ptr&lt;TestSmartPtr&gt; uni_ptr(new TestSmartPtr("Test"));</code></li>
<li><code>unique_ptr&lt;TestSmartPtr&gt; uni_ptr = make_unique&lt;TestSmartPtr&gt;("Test");</code>
<ul>
<li><code>auto uni_ptr = make_unique&lt;TestSmartPtr&gt;("Test");</code></li>
</ul></li>
<li><code>unique_ptr&lt;TestSmartPtr&gt; uni_ptr(p);</code>不建议使用这种方式，会暴露原始指针</li>
</ul>
<p><strong><code>unique_ptr</code>怎么保证独占？</strong></p>
<p><code>unique_ptr</code>是通过在其模板类的定义中<strong>禁止拷贝构造函数</strong>和<strong>赋值运算符</strong>来保证独占的。</p>
<ul>
<li><p>禁止拷贝构造函数：<code>unique_ptr(const unique_ptr&amp;) = delete;</code></p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;TestSmartPtr&gt; <span class="title">uni_ptr1</span><span class="params">(<span class="keyword">new</span> TestSmartPtr(<span class="string">&quot;Test1&quot;</span>))</span></span>;</span><br><span class="line">unique_ptr&lt;TestSmartPtr&gt; uni_ptr2 = uni_ptr1; <span class="comment">//赋值，编译报错</span></span><br><span class="line"><span class="function">unique_ptr&lt;TestSmartPtr&gt; <span class="title">uni_ptr3</span><span class="params">(uni_ptr1)</span></span>; <span class="comment">//拷贝，编译报错</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>禁止赋值运算符：<code>unique_ptr&amp; operator=(const unique_ptr&amp;) = delete;</code></p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;TestSmartPtr&gt; <span class="title">uni_ptr1</span><span class="params">(<span class="keyword">new</span> TestSmartPtr(<span class="string">&quot;Test1&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;TestSmartPtr&gt; <span class="title">uni_ptr2</span><span class="params">(<span class="keyword">new</span> TestSmartPtr(<span class="string">&quot;Test2&quot;</span>))</span></span>;</span><br><span class="line">uni_ptr2 = uni_ptr1; <span class="comment">//编译报错</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<p><strong>为什么需要保证<code>unique_ptr</code>的独占？</strong></p>
<p>如果不独占的话，当我们用多个智能指针指向同一个对象时，当多个智能指针过期时会<strong>调用多次析构函数</strong>，这样除了第一次调用析构函数是正常的，其它的调用都是对<strong>野指针</strong>的操作，会导致程序崩溃。</p>
<h5 id="shared_ptr">1.4.3.2 shared_ptr</h5>
<p><code>shared_ptr</code>是<strong>共享</strong>的智能指针，它可以<strong>多个<code>shared_ptr</code>指向（关联）同一个对象</strong>，在内部采用<strong>引用计数</strong>来实现共享管理：</p>
<ul>
<li>当有一个<code>shared_ptr</code>与对象关联时，引用计数加1（内部的引用计数是线程安全的）</li>
<li>当最后一个<code>shared_ptr</code>超出作用域时，表示没有任何与其关联的对象了，才会调用析构函数（其它情况的超出作用域只会将引用计数值减1）。此时<code>shared_ptr</code>自动变为<code>nullptr</code>，防止出现悬空指针。</li>
</ul>
<p>相比于<code>unique_ptr</code>，<code>shared_ptr</code>的<strong>拷贝构造函数</strong>和<strong>赋值运算符</strong>是<strong>允许</strong>的，同时还多了一个<code>use_count</code>函数，用来获取当前引用计数的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSmartPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">TestSmartPtr</span>(string m_name) :<span class="built_in">m_name</span>(m_name) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">TestSmartPtr</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">TestSmartPtr</span>(<span class="keyword">const</span> TestSmartPtr&amp; other):<span class="built_in">m_name</span>(other.m_name)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;的拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">string <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_name;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	shared_ptr&lt;TestSmartPtr&gt; p0 = make_shared&lt;TestSmartPtr&gt;(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p0初始引用计数值：&quot;</span> &lt;&lt; p0.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//采用拷贝构造函数增加p1对对象的引用</span></span><br><span class="line">	<span class="function">shared_ptr&lt;TestSmartPtr&gt; <span class="title">p1</span><span class="params">(p0)</span></span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p0当前的引用计数值：&quot;</span> &lt;&lt; p0.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p0的user_name：&quot;</span> &lt;&lt; p0-&gt;<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1初始引用计数值：&quot;</span> &lt;&lt; p0.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1的user_name：&quot;</span> &lt;&lt; p1-&gt;<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用了Test的构造函数</span><br><span class="line">p0初始引用计数值：1</span><br><span class="line">p0当前的引用计数值：2</span><br><span class="line">p0的user_name：Test</span><br><span class="line">p1初始引用计数值：2</span><br><span class="line">p1的user_name：Test</span><br><span class="line">调用了Test的析构函数</span><br></pre></td></tr></table></figure>
<p>在使用左右值引用时，<strong>左值</strong>的引用计数会<strong>减1</strong>，<strong>右值</strong>的引用计数会加1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	shared_ptr&lt;TestSmartPtr&gt; p0 = make_shared&lt;TestSmartPtr&gt;(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">	shared_ptr&lt;TestSmartPtr&gt; p1 = make_shared&lt;TestSmartPtr&gt;(<span class="string">&quot;Test2&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//采用赋值方法</span></span><br><span class="line">	shared_ptr&lt;TestSmartPtr&gt; p2 = p0;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p0当前的引用计数值：&quot;</span> &lt;&lt; p0.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1当前的引用计数值：&quot;</span> &lt;&lt; p1.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;---修改p3的引用赋值对象---&quot;</span> &lt;&lt; endl;</span><br><span class="line">	p2 = p1;<span class="comment">//左值：原始p2指向的p0计数值减一；右值：当前指向的p1引用计数值加一</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p0当前的引用计数值：&quot;</span> &lt;&lt; p0.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1初始引用计数值：&quot;</span> &lt;&lt; p1.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用了Test的构造函数</span><br><span class="line">调用了Test2的构造函数</span><br><span class="line">p0当前的引用计数值：2</span><br><span class="line">p1当前的引用计数值：1</span><br><span class="line">---修改p3的引用赋值对象---</span><br><span class="line">p0当前的引用计数值：1</span><br><span class="line">p1初始引用计数值：2</span><br><span class="line">调用了Test2的析构函数</span><br><span class="line">调用了Test的析构函数</span><br></pre></td></tr></table></figure>
<p><strong>用unique_ptr好，还是shared_ptr好？</strong></p>
<p>一般情况下，能用<code>unique_ptr</code>就用<code>unique_ptr</code>，因为<code>unique_ptr</code>的<strong>效率更高</strong>，而且<strong>更安全</strong>。</p>
<p>而如果有需要<strong>共享</strong>的情况，那么就用<code>shared_ptr</code>。</p>
<p><strong>给unique_ptr和shared_ptr自定义删除器</strong></p>
<p>三种自定义删除器的方式：普通函数、仿函数、lambda表达式</p>
<ul>
<li><p><strong>普通函数</strong></p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteFunc</span><span class="params">(TestSmartPtr* t)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;使用普通函数方式自定义删除器（全局函数）\n&quot;</span>;</span><br><span class="line">    <span class="keyword">delete</span> t;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>仿函数</strong></p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">deleteClass</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(TestSmartPtr* t)</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;使用仿函数的方式自定义删除器\n&quot;</span>;</span><br><span class="line">        <span class="keyword">delete</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></li>
<li><p><strong>lambda表达式</strong></p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> deleteLamb = [](TestSmartPtr* t) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;使用Lambda表达式的方式自定义删除器\n&quot;</span>;</span><br><span class="line">    <span class="keyword">delete</span> t;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>给<code>unique_ptr</code>和<code>shared_ptr</code>添加自定义删除器并进行测试：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//给shared_ptr自定义删除器</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;------------给shared_ptr自定义删除器---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="function">shared_ptr&lt;TestSmartPtr&gt; <span class="title">p0</span><span class="params">(<span class="keyword">new</span> TestSmartPtr(<span class="string">&quot;Test&quot;</span>), deleteFunc)</span></span>;</span><br><span class="line">	<span class="function">shared_ptr&lt;TestSmartPtr&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> TestSmartPtr(<span class="string">&quot;Test2&quot;</span>), deleteClass())</span></span>;</span><br><span class="line">	<span class="function">shared_ptr&lt;TestSmartPtr&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> TestSmartPtr(<span class="string">&quot;Test3&quot;</span>), deleteLamb)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">////给unique_ptr自定义删除器</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;------------给unique_ptr自定义删除器---------------&quot; &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//unique_ptr&lt;TestSmartPtr, decltype(deleteFunc)*&gt; p4(new TestSmartPtr(&quot;Test decltype&quot;), deleteFunc);</span></span><br><span class="line">	<span class="comment">//unique_ptr&lt;TestSmartPtr, void(*)(TestSmartPtr *)&gt; p5(new TestSmartPtr(&quot;Test 函数指针&quot;), deleteFunc);</span></span><br><span class="line">	<span class="comment">//unique_ptr&lt;TestSmartPtr, deleteClass&gt; p6(new TestSmartPtr(&quot;Test 仿函数&quot;), deleteClass());</span></span><br><span class="line">	<span class="comment">//unique_ptr&lt;TestSmartPtr, decltype(deleteLamb)&gt; p7(new TestSmartPtr(&quot;Test Lambda&quot;), deleteLamb);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="weak_ptr">1.4.3.3 weak_ptr</h5>
<p><code>weak_ptr</code>是<code>shared_ptr</code>的<strong>弱引用</strong>，是为了解决<code>shared_ptr</code>的<strong>循环引用</strong>问题。它不控制对象的生命周期，但是可以判断对象是否存在。</p>
<p>由于<code>weak_ptr</code>只做引用不做计数，所以当指向的对象被释放时，<code>weak_ptr</code>是不知道的，因此需要用<code>lock</code>函数将<code>weak_ptr</code>提升为<code>shared_ptr</code>，这样就可以判断对象是否存在。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">shared_ptr&lt;TestSmartPtr&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> TestSmartPtr(<span class="string">&quot;Test&quot;</span>))</span></span>;</span><br><span class="line">    weak_ptr&lt;TestSmartPtr&gt; p2 = p1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p2.<span class="built_in">lock</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;对象还存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;对象已经过期&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当两个<code>shared_ptr</code>相互引用时，会导致<strong>引用计数永远不为0</strong>。如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSmartPtr2</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSmartPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">TestSmartPtr</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; <span class="string">&quot;第一个类&quot;</span> &lt;&lt; <span class="string">&quot;的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">TestSmartPtr</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; <span class="string">&quot;第一个类&quot;</span> &lt;&lt; <span class="string">&quot;的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//weak_ptr&lt;TestSmartPtr2&gt; m_p;//引用TestSmartPtr2</span></span><br><span class="line">	shared_ptr&lt;TestSmartPtr2&gt; m_p;<span class="comment">//引用TestSmartPtr2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSmartPtr2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">TestSmartPtr2</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; <span class="string">&quot;第二个类&quot;</span> &lt;&lt; <span class="string">&quot;的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">TestSmartPtr2</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; <span class="string">&quot;第二个类&quot;</span> &lt;&lt; <span class="string">&quot;的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//weak_ptr&lt;TestSmartPtr&gt; m_p;//引用TestSmartPtr</span></span><br><span class="line">	shared_ptr&lt;TestSmartPtr&gt; m_p;<span class="comment">//引用TestSmartPtr</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function">shared_ptr&lt;TestSmartPtr&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> TestSmartPtr())</span></span>;</span><br><span class="line">	<span class="function">shared_ptr&lt;TestSmartPtr2&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> TestSmartPtr2())</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//进行循环引用</span></span><br><span class="line">	p1-&gt;m_p = p2;</span><br><span class="line">	p2-&gt;m_p = p1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：没有调用两个类的析构函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用了第一个类的构造函数</span><br><span class="line">调用了第二个类的构造函数</span><br></pre></td></tr></table></figure>
<p><strong>解决方法</strong>：</p>
<ul>
<li>将两个类中的<code>shared_ptr</code>改为<code>weak_ptr</code></li>
<li>在需要使用时通过<code>expired</code>函数判断是否过期（线程不安全）</li>
<li><code>weak_ptr</code><strong>不能直接访问资源、不控制对象生命周期</strong>，但是可以通过<code>lock</code>函数提升为<code>shared_ptr</code>，该函数同时也可以判断是否过期。（线程安全的）</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function">shared_ptr&lt;TestSmartPtr&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> TestSmartPtr())</span></span>;</span><br><span class="line">	<span class="function">shared_ptr&lt;TestSmartPtr2&gt; <span class="title">p2</span><span class="params">(<span class="keyword">new</span> TestSmartPtr2())</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//进行循环引用</span></span><br><span class="line">	p1-&gt;m_p = p2;</span><br><span class="line">	p2-&gt;m_p = p1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//.lock()将weak_ptr提升为shared_ptr</span></span><br><span class="line">	<span class="keyword">if</span> (p1-&gt;m_p.<span class="built_in">lock</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;对象1还存在，use_count：&quot;</span> &lt;&lt; p1.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;对象1已经过期&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (p2-&gt;m_p.<span class="built_in">lock</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;对象2还存在，use_count：&quot;</span> &lt;&lt; p2.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;对象2已经过期&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用了第一个类的构造函数</span><br><span class="line">调用了第二个类的构造函数</span><br><span class="line">对象1还存在，use_count：1</span><br><span class="line">对象2还存在，use_count：1</span><br><span class="line">调用了第二个类的析构函数</span><br><span class="line">调用了第一个类的析构函数</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://blog.csdn.net/adam2021/article/details/129849022">循环引用产生的原因和解决方法</a></p>
</blockquote>
<h3 id="this指针">1.5 this指针</h3>
<p><code>this</code>指针是一个<strong>隐式</strong>的指向<strong>当前对象首地址</strong>的<strong>指针</strong>。<strong>this指针只有在对象中的成员函数中才有定义</strong>，因此，你获得一个对象后，也不能通过对象使用此指针。（只能在类内部使用，且<strong>静态成员函数</strong>不能使用）</p>
<p><strong>静态成员函数</strong>与一般成员函数的唯一区别就是<strong>没有this指针</strong>，因此<strong>不能访问非静态数据成员</strong>。this指针不能访问<strong>全局函数和静态函数</strong>。而编译器会给普通成员函数隐式传参传入this指针（所以成员函数的作用周期就是this的作用周期）</p>
<p>由于成员函数是在代码区的，所以this指针隐式传入成员函数的作用就是让成员函数直到是那个实例化对象在调用该函数。所以<code>delete this</code>的话会释放掉该实例化对象的内存空间。而由于<code>delete this</code>本身就是释放内存会调用<strong>析构函数</strong>，所以如果在析构函数中调用<code>delete this</code>会导致<strong>无限递归调用析构</strong>，最终<strong>堆栈溢出</strong>从而导致<strong>程序崩溃</strong>。</p>
<p>要注意，<code>this</code>指针是<strong>常量指针</strong>，不能被赋值，也不能被删除。</p>
<ul>
<li>它会在<strong>构造函数</strong>和<strong>析构函数</strong>中<strong>自动</strong>被<strong>创建</strong>和<strong>销毁</strong>。</li>
<li>如果在<strong>析构函数</strong>中<strong>显式</strong>删除<code>this</code>指针，由于<code>delete this</code>的操作本身就会<strong>调用析构函数</strong>，所以会导致<strong>无限递归调用析构</strong>，最终<strong>堆栈溢出</strong>从而导致<strong>程序崩溃</strong>。</li>
</ul>
<p>this指针存在<strong>栈</strong>或者<strong>全局区</strong>或者<strong>寄存器</strong>中。标准情况下this为<strong>右值</strong>，不能通过取地址符号返回this指针的地址，但是可以返回this指针指向的地址。</p>
<h3 id="new和delete">1.6 new和delete</h3>
<h4 id="实现机制">1.6.1 实现机制</h4>
<p>new和delete是C++中用来<strong>动态分配</strong>和<strong>释放</strong>内存的运算符。</p>
<ul>
<li>new：首先执行标准库函数<code>operator new</code>分配内存 -&gt;
然后调用<strong>构造函数</strong>初始化对象 -&gt;
最后返回对象的指针（如果内存分配失败，会抛出<code>std::bad_alloc</code>异常）</li>
<li>delete：首先调用<strong>析构函数</strong> -&gt;
然后执行标准库函数<code>operator delete</code>释放内存</li>
</ul>
<h4 id="new和malloc的区别">1.6.2 new和malloc的区别</h4>
<p>new底层是通过malloc实现的，所以理论上是可以直接free掉new出来的实例化对象，但是这样的话不会调用实例化对象的析构函数</p>
<ul>
<li>new是C++运算符，malloc是C标准库函数</li>
<li>内存分配：new是自动计算大小的，malloc是需要手动输入分配的内存大小；new使用<code>operator new</code>分配内存</li>
<li>内存分配失败：new分配失败时会抛出异常报错，而malloc会直接返回空指针</li>
<li>初始化和释放：new初始化会调用构造函数、delete时会调用析构函数再释放，而malloc会直接释放内存</li>
<li>数据类型检查：new会有数据类型检查，而malloc直接申请一块内存，需要做类型强制转换，也不进行类型安全性检查</li>
</ul>
<h3 id="辨别几种指针的区别">1.7 辨别几种指针的区别</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p[<span class="number">10</span>];</span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*p)[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">p</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*p)(<span class="keyword">int</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>指针数组</strong>：存放多个指针的数组<code>int *p[10]</code></li>
<li><strong>数组指针</strong>：某个普通数组的指针，如<code>int (*p)[10]</code>表示一个int型数组的地址</li>
<li><strong>函数返回指针</strong>：<code>int * p(int)</code>表示函数返回一个int型的指针，传参为int</li>
<li><strong>函数指针</strong>：<code>int (*p)(int)</code>其中<code>p</code>表示某个函数的指针，返回值是int，传参是int</li>
</ul>
<h2 id="二多态">二、多态</h2>
<p>C++的多态有两种：<strong>静态多态</strong>和<strong>动态多态</strong>。</p>
<p>其中，<strong>静态多态</strong>是通过<strong>函数重载</strong>和<strong>运算符重载</strong>实现的，而<strong>动态多态</strong>是通过<strong>虚函数</strong>实现的。</p>
<p>除此以外，C++还有<strong>模板多态</strong>，即通过<strong>模板</strong>实现的多态。（CRTP）</p>
<h3 id="动态多态">2.1 动态多态：</h3>
<p>C++的动态多态是通过父类定义<strong>虚函数</strong>实现和子类<strong>重写</strong>来实现。</p>
<ul>
<li>基类定义至少一个虚函数，此时该基类就会在<strong>编译</strong>时确定一个静态数组（也就是虚函数表），里面存放了所有虚函数的地址，每个类的所有类对象共享这个虚函数表。
<ul>
<li>其中，对于<strong>普通虚函数</strong>，父类可以选择声明实现or不实现虚函数</li>
<li>但是如果是<strong>纯虚函数</strong>，那么<strong>父类不能实现</strong>具体函数，只能由子类实现，且此时父类为抽象类，<strong>不能实例化</strong>。如果子类没有实现纯虚函数，那么子类也是抽象类，不能实例化。</li>
</ul></li>
</ul>
<p>接下来来具体从<strong>虚函数</strong>、<strong>虚函数表</strong>、<strong>虚函数指针</strong>这几个方面来进行讲解。</p>
<h4 id="虚函数">2.1.1 虚函数</h4>
<p>虚函数是在<strong>基类</strong>中使用<code>virtual</code>关键字声明的函数。在基类中声明虚函数后，派生类可以<strong>覆盖（重写）</strong>该函数，实现<strong>多态</strong>。<strong>虚函数</strong>在内存中存储于<strong>代码区</strong>，而<strong>虚函数表</strong>存储于<strong>常量区</strong></p>
<ul>
<li><strong>虚函数表</strong>：每个带有虚函数的<strong>类</strong>都有一个虚函数表</li>
<li><strong>虚函数指针</strong>：每个<strong>实例化对象</strong>都有一个虚函数8bytes的指针，指向虚函数表</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base fun1&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base fun2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Base</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如上述代码，<code>fun</code>用<code>virtual</code>关键字声明，那么<code>fun</code>就是一个虚函数。结合下文将说到的<strong>虚函数指针</strong>，<strong>没有声明虚函数</strong>的类根本<strong>不会有虚表指针</strong>，也不支持多态（动态）。</p>
<h4 id="虚函数表vtbl">2.1.2 虚函数表vtbl</h4>
<p>虚函数表中存储了该类所有的<strong>虚函数</strong>的地址。一个类的所有对象共享一个虚函数表，这个表是在<strong>编译</strong>时就已经生成的。</p>
<p>如果有一个<code>Base</code>类，其中有一个虚函数<code>fun</code>，那么它的虚函数表中就会存储<code>fun</code>的地址。</p>
<table>
<thead>
<tr>
<th style="text-align: center;">Base中的函数</th>
<th style="text-align: center;">虚函数表地址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">fun1</td>
<td style="text-align: center;">0x00f21569</td>
</tr>
<tr>
<td style="text-align: center;">fun2</td>
<td style="text-align: center;">0x00f21596</td>
</tr>
<tr>
<td style="text-align: center;">虚析构</td>
<td style="text-align: center;">0x00f21573</td>
</tr>
</tbody>
</table>
<p>虚函数表是在<strong>编译</strong>时确定的，且每个类的所有对象共享一个虚函数表。</p>
<h4 id="虚函数指针vptr">2.1.3 虚函数指针vptr</h4>
<p>虚函数指针是实例化对象中<strong>指向虚函数表的地址</strong>的指针。<strong>含有虚函数</strong>的类的对象或者<strong>继承了含有虚函数的类</strong>的对象都会有一个虚函数指针。</p>
<p><img src="/2024/03/09/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/vptr.jpg"></p>
<ul>
<li><p>普通类：无虚函数，无虚函数表</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>如上面的代码，<code>Base</code>类中没有虚函数，所以<code>Base</code>类是一个普通类，在编译时不会有虚函数表。</p>
<p>也因此，当我们创建一个<code>Base</code>类的对象时，该对象自然没有虚函数指针这个变量存在</p>
<p>所以当我们用<code>sizeof</code>函数查看对象的大小，得到的结果是<code>1</code>（因为对象的大小是由<strong>成员变量</strong>决定的，而<code>Base</code>类中没有虚函数也没有成员变量，所以对象的大小是<code>1</code>byte，因为对象的大小至少要为<code>1</code>）。</p>
<p>这也说明了普通函数的地址不存储在类对象中，而是存储在代码段中。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base b;</span><br><span class="line">    cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>虚函数类：有虚函数，有虚函数表</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>如上面的代码，<code>Base</code>类中有虚函数，所以<code>Base</code>类是一个虚函数类，在编译时会有虚函数表。当我们创建一个<code>Base</code>类的对象时，用<code>sizeof</code>函数查看对象的大小，得到的结果是<code>4</code>（因为对象的大小是由<strong>成员变量</strong>决定的，而<code>Base</code>类中有虚函数，所以对象的大小是<code>4</code>byte，因为对象的大小至少要为<code>1</code>）。</p>
<p>这也说明了虚函数的地址存储在类对象中，而不是存储在代码段中。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base b;</span><br><span class="line">    cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(b) &lt;&lt; endl; <span class="comment">// 8(64位系统)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h4 id="虚函数的工作原理和多态体现">2.1.4
虚函数的工作原理和多态体现</h4>
<p>多态原理：</p>
<ul>
<li>常规的多态是指在<strong>基类</strong>中定义一个<strong>虚函数</strong>，然后在<strong>派生类</strong>中<strong>重写</strong>这个虚函数</li>
<li>这样在<strong>基类</strong>指针或者引用绑定<strong>派生类</strong>对象时，调用这个虚函数时，会调用<strong>派生类</strong>的虚函数。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">myvirfunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base myvirfunc&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myvirfunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived myvirfunc&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base *p = <span class="keyword">new</span> <span class="built_in">Base</span>();</span><br><span class="line">    p-&gt;<span class="built_in">myvirfunc</span>(); <span class="comment">// 使用指针调用虚函数，属于多态</span></span><br><span class="line"></span><br><span class="line">    Base b;</span><br><span class="line">    b.<span class="built_in">myvirfunc</span>(); <span class="comment">// 使用普通对象调用虚函数，不属于多态</span></span><br><span class="line"></span><br><span class="line">    Base* ybase = &amp;b;</span><br><span class="line">    ybase-&gt;<span class="built_in">myvirfunc</span>(); <span class="comment">// 使用指针调用虚函数，属于多态</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的情况都属于多态</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//父类的指针指向子类对象</span></span><br><span class="line">    Base * p = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">    p-&gt;<span class="built_in">myvirfunc</span>();</span><br><span class="line">    <span class="comment">//or</span></span><br><span class="line">    Derived d;</span><br><span class="line">    Base * p2 = &amp;d;</span><br><span class="line">    p2-&gt;<span class="built_in">myvirfunc</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//父类引用绑定子类对象</span></span><br><span class="line">    Base &amp; r = d;</span><br><span class="line">    r.<span class="built_in">myvirfunc</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>内存布局</strong></p>
<p>拥有虚函数的基类会在内存中共享一个<strong>虚函数表</strong>，而这个虚函数表中存储了所有虚函数的地址。</p>
<p>当我们创建一个基类的对象时，这个对象会有一个<strong>虚函数指针</strong>，指向这个虚函数表。</p>
<p>而<strong>虚函数表</strong>和<strong>虚函数指针</strong>都是在<strong>编译</strong>时就已经生成的。</p>
<p><strong>存在继承关系时的内存布局</strong></p>
<p>假设基类<code>Base</code>有三个虚函数<code>f</code>、<code>g</code>、<code>h</code>，那么在编译时，<code>Base</code>类的虚函数表中会存储这三个虚函数的地址。</p>
<p>当派生类<code>Derived</code>继承<code>Base</code>类时，由于<code>Derived</code>类重写了其中的<code>f</code>函数，所以<code>Derived</code>类的虚函数表中会存储<code>f</code>函数的地址，而<code>g</code>和<code>h</code>函数在虚函数表中的值跟<code>Base</code>类一样。</p>
<p><img src="/2024/03/09/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/vptr2.jpg"></p>
<p>当用<code>Base</code>类的指针指向<code>Derived</code>类的对象时，构造函数会先调用<code>Base</code>类的构造函数，然后调用<code>Derived</code>类的构造函数。由于虚函数指针是跟对象绑定的，所以此时其实用的还是<code>Derived</code>对象的内存空间，所以虚函数指针指向的是<strong>子类Derived类的虚函数表</strong>。</p>
<h4 id="为什么说继承属于动态的多态">2.1.5
为什么说继承属于动态的多态？</h4>
<ul>
<li>函数<strong>静态绑定</strong>：在<strong>编译</strong>期间绑定的，一般<strong>非虚函数</strong>都是静态绑定</li>
<li>函数<strong>动态绑定</strong>：在<strong>运行</strong>期间绑定的，一般<strong>虚函数</strong>都是动态绑定</li>
</ul>
<p>动态多态之所以被称为<strong>动态</strong>的原因在于，它是在<strong>程序运行</strong>时（而非编译时）确定对象的类型和应该调用的函数的。</p>
<p>虽然<strong>虚函数表</strong>和<strong>虚函数指针</strong>都是在<strong>编译</strong>时确定的（但是并没有分配内存，运行时才会分配内存），但是<strong>编译期间虚函数指针是没有具体指向的</strong>。</p>
<p>只有当构造函数调用时，虚函数指针才会指向具体的虚函数表，而构造函数的调用是在<strong>程序运行</strong>时才会发生的，这也是继承属于<strong>动态绑定</strong>的原因。</p>
<p>继承下构造函数的调用顺序：<strong>自上而下：自基类到派生类</strong></p>
<p>虚析构函数的调用顺序：<strong>自下而上：自派生类到基类</strong></p>
<p>总结：<strong>编译</strong>时查看的是 <code>Shape</code>
类有没有这个接口, 而在<strong>运行</strong>时会查虚函数表,
<strong>才决定具体调用哪个</strong>(动态多态)</p>
<h3 id="静态多态">2.2 静态多态</h3>
<p>静态多态是通过<strong>函数重载</strong>和<strong>运算符重载</strong>实现的。具体不多说了</p>
<h3 id="模板多态crtp">2.3 模板多态（CRTP）</h3>
<p>模板多态是通过<strong>模板</strong>实现的多态，即<strong>CRTP</strong>（Curiously
Recurring Template
Pattern）。(也称为<strong>奇异递归模板模式</strong>)</p>
<p><code>CRTP</code>将<strong>模板</strong>和<strong>继承</strong>相结合，形成一种新的设计模式。</p>
<p>（1）通过<strong>继承</strong>实现的多态是<strong>绑定的和动态的</strong>：</p>
<ul>
<li>绑定的含义是：对于参与多态行为的类型，它们（具有多态行为）的接口是在公共基类的设计中就预先确定的（有时候也把绑定这个概念称为入侵的或者插入的）。</li>
<li>多态的含义是：接口的绑定是在运行期（动态）完成的。</li>
</ul>
<p>（2）通过<strong>模板</strong>实现的多态是<strong>非绑定的和静态的</strong>：</p>
<ul>
<li>非绑定的含义是：对于参与多态行为的类型，它们的接口是没有预先确定的（有时也称这个概念为非入侵的或者非插入的）。</li>
<li>静态的含义是：接口的绑定是在编译期（静态）完成的。</li>
</ul>
<h4 id="模板">2.3.1 模板</h4>
<p>模板是C++中的一种<strong>泛型编程</strong>技术，通过模板可以实现<strong>类型参数化</strong>，即可以将类型作为参数传递给类或者函数。我们常用的<code>vector &lt;int&gt;</code>
或
<code>vector &lt;string&gt;</code>等都是通过模板实现的。C++中<strong>编译器</strong>会从函数模板通过具体类型<strong>产生不同的函数</strong></p>
<ul>
<li><p>模板在<strong>函数</strong>中的使用</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">getMax</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt;= b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;getMax(2, 10):&quot;</span> &lt;&lt; <span class="built_in">getMax</span>(a, b) &lt;&lt; endl;<span class="comment">//getMax(2, 10):10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> a1 = <span class="number">44.2</span>;</span><br><span class="line">    <span class="keyword">double</span> b1 = <span class="number">10.2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;getMax(44.2, 10.2):&quot;</span> &lt;&lt; <span class="built_in">getMax</span>(a1, b1) &lt;&lt; endl;<span class="comment">//Max(44.2, 10.2):44.2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从上面的代码例子可以看出，通过模板类的实现使<code>getMax</code>可以接受任意类型的输入参数。</p></li>
<li><p>模板在<strong>类</strong>中的使用</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testTemp</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">testTemp</span>(T a1, T b1) :<span class="built_in">a</span>(a1), <span class="built_in">b</span>(b1) &#123;&#125;</span><br><span class="line">    T a;</span><br><span class="line">    T b;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;printMax:&quot;</span> &lt;&lt; <span class="built_in">getMax</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">getMax</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T testTemp&lt;T&gt;::<span class="built_in">getMax</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt;= b ? a : b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">testTemp&lt;<span class="keyword">int</span>&gt; <span class="title">m_test</span><span class="params">(<span class="number">12</span>, <span class="number">22</span>)</span></span>;</span><br><span class="line">    m_test.<span class="built_in">printMax</span>();<span class="comment">//printMax:22</span></span><br><span class="line"></span><br><span class="line">    <span class="function">testTemp&lt;<span class="keyword">double</span>&gt; <span class="title">m_test2</span><span class="params">(<span class="number">12.23</span>, <span class="number">22.45</span>)</span></span>;</span><br><span class="line">    m_test2.<span class="built_in">printMax</span>();<span class="comment">//printMax:22.45</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 2.3.2 CRTP的实现</p></li>
</ul>
<p>CRTP是通过<strong>模板</strong>实现的多态，它的实现原理是通过<strong>模板</strong>实现<strong>继承</strong>。也就是创建一个<strong>模板类</strong>，然后其它类通过<strong>继承</strong>这个<strong>模板类</strong>来实现多态。</p>
<ul>
<li>首先创建一个模板基类</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">static_cast</span>&lt;T*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">printWord</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后创建两个继承这个模板基类的类</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过模板多态的方式基础模板类Base，此时模板传入的参数为类Child1</span></span><br><span class="line"><span class="comment">//Child1类需要有打印的函数printWord</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span> :</span> <span class="keyword">public</span> Base&lt;Child1&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printWord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Child1: &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span> :</span> <span class="keyword">public</span> Base&lt;Child2&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printWord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Child2: &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>接着再提供一个函数，用来调用基类中的<code>foo</code>函数(委托函数printTest作为中间代理)</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTest</span><span class="params">(Base&lt;T&gt;&amp; obj)</span> </span>&#123;</span><br><span class="line">	obj.<span class="built_in">foo</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最后在<code>main</code>函数中调用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	Child1 c1;</span><br><span class="line">	Child2 c2;</span><br><span class="line">	<span class="built_in">printTest</span>(c1);</span><br><span class="line">	<span class="built_in">printTest</span>(c2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行结果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Child1: Hello</span><br><span class="line">Child2: Hello</span><br></pre></td></tr></table></figure>
<h3 id="c面向对象三大特性封装继承多态">2.4
C++面向对象三大特性：封装、继承、多态</h3>
<h4 id="封装">2.4.1 封装</h4>
<p>封装是指将<strong>数据</strong>和<strong>操作数据的函数</strong>封装在一起，形成一个<strong>类</strong>。封装可以<strong>隐藏</strong>类的<strong>实现细节</strong>，只提供<strong>公共接口</strong>给外部使用。</p>
<h4 id="继承">2.4.2 继承</h4>
<p>继承是让子类<strong>继承</strong>父类的<strong>属性和方法</strong>，修饰符<code>public</code>、<code>protected</code>、<code>private</code>用来控制继承的访问权限。</p>
<ul>
<li><code>public</code>：公有继承，子类可以访问父类的<code>public</code>成员</li>
<li><code>protected</code>：保护继承，子类可以访问父类的<code>protected+public</code>成员
<ul>
<li>但是再次继承该子类的类不能访问父类的<code>protected</code>成员</li>
<li>其实例化对象也不能访问父类的<code>protected</code>成员</li>
</ul></li>
<li><code>private</code>：私有继承，子类可以访问父类的<code>private+protected+public</code>成员</li>
</ul>
<h4 id="多态">2.4.3 多态</h4>
<p>多态如上面说的分为<strong>静态多态</strong>和<strong>动态多态</strong>，其中<strong>动态多态</strong>是通过<strong>虚函数</strong>实现的。</p>
<ul>
<li><strong>静态多态</strong>是通过<strong>函数重载</strong>和<strong>运算符重载</strong>实现的，是<strong>编译</strong>时的多态</li>
<li><strong>动态多态</strong>是通过<strong>虚函数</strong>实现的，是<strong>运行</strong>时的多态
<ul>
<li>将<strong>基类指针或者引用</strong>绑定<strong>派生类</strong>对象时，调用虚函数时，会调用<strong>派生类</strong>的虚函数</li>
</ul></li>
</ul>
<h2 id="三虚基类">三、虚基类</h2>
<p>虚基类是指在<strong>多重继承</strong>中，子类采用<code>: virtual public Base</code>的方式继承父类，是为了解决<strong>二义性</strong>问题而引入的</p>
<p><strong>二义性</strong>是指在菱形继承中，<strong>子类继承了两个父类</strong>，而这<strong>两个父类又继承了同一个父类</strong>，那么子类就会继承两份相同的父类，这就会导致二义性问题。</p>
<p><img src="/2024/03/09/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/virtualBaseClass.png"></p>
<p>虚基类的使用可以有效防止菱形继承下调用两次（或多次）父类的构造函数。</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/chlele0105/article/details/22654869">C++
虚基类</a></p>
</blockquote>
<h2 id="四深拷贝和浅拷贝">四、深拷贝和浅拷贝</h2>
<h3 id="浅拷贝">4.1 浅拷贝</h3>
<p>浅拷贝是指<strong>拷贝对象时，只是拷贝对象的值</strong>，而对于指针类型变量，不会重新分配内存，而是<strong>拷贝指针的地址</strong>。</p>
<p><strong>移动构造函数</strong>通常就是浅层拷贝，传参是右值引用（将亡值）。我们用对象a去实例化b时，实例化完后a其实就没用了，所以我们可以将a的资源直接转移到b，这样就不用再重新分配内存。因此传入<strong>右值或者将亡值时才会触发移动构造函数</strong></p>
<h3 id="深拷贝">4.2 深拷贝</h3>
<p>深拷贝相比浅拷贝，对于指针类型变量，会<strong>重新分配内存</strong>，并将<strong>指针指向的地址拷贝到新的内存空间</strong>，然后使用<code>memcpy</code>函数将原对象的值拷贝到新的内存空间。</p>
<p>深拷贝可以通过<strong>拷贝构造函数</strong>和<strong>赋值运算符重载</strong>实现。传参是左值参数。下面将展示这两种实现方法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testCopy</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//构造函数创建数组</span></span><br><span class="line">	<span class="built_in">testCopy</span>(<span class="keyword">int</span> size, <span class="keyword">int</span> start) :<span class="built_in">size_</span>(size) &#123;</span><br><span class="line">		data_ = <span class="keyword">new</span> <span class="keyword">int</span>[size_];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size_; i++) &#123;</span><br><span class="line">			data_[i] = start + i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">testCopy</span>() &#123;</span><br><span class="line">		<span class="keyword">delete</span>[] data_;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//拷贝构造函数实现深拷贝</span></span><br><span class="line">	<span class="built_in">testCopy</span>(<span class="keyword">const</span> testCopy&amp; copy) &#123;</span><br><span class="line">		<span class="keyword">delete</span>[] data_;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size_ = copy.size_;</span><br><span class="line">		<span class="keyword">this</span>-&gt;data_ = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;size_];<span class="comment">//创建内存空间</span></span><br><span class="line">		<span class="built_in">memcpy</span>(data_, copy.data_, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * size_);<span class="comment">//复制所有数据</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//运算符重载实现深拷贝</span></span><br><span class="line">	testCopy&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> testCopy &amp; copy)&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> != &amp;copy) &#123;</span><br><span class="line">			<span class="keyword">delete</span>[] data_;</span><br><span class="line">			<span class="keyword">this</span>-&gt;size_ = copy.size_;</span><br><span class="line">			<span class="keyword">this</span>-&gt;data_ = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>-&gt;size_];</span><br><span class="line">			<span class="built_in">memcpy</span>(data_, copy.data_, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * size_);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size_; i++) &#123;</span><br><span class="line">			cout &lt;&lt; data_[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> size_;</span><br><span class="line">	<span class="keyword">int</span>* data_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">testCopy <span class="title">t1</span><span class="params">(<span class="number">4</span>, <span class="number">7</span>)</span></span>;</span><br><span class="line">	<span class="function">testCopy <span class="title">t2</span><span class="params">(<span class="number">6</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;t1 data:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	t1.<span class="built_in">printData</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;t2 data:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	t2.<span class="built_in">printData</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//使用拷贝构造函数</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;t3 data:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="function">testCopy <span class="title">t3</span><span class="params">(t1)</span></span>;</span><br><span class="line">	t3.<span class="built_in">printData</span>();</span><br><span class="line">	<span class="comment">//使用运算符重载实现深拷贝</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;t3 data:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	t3 = t2;</span><br><span class="line">	t3.<span class="built_in">printData</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1 data:</span><br><span class="line">7 8 9 10</span><br><span class="line">t2 data:</span><br><span class="line">2 3 4 5 6 7</span><br><span class="line">t3 data:</span><br><span class="line">7 8 9 10</span><br><span class="line">t3 data:</span><br><span class="line">2 3 4 5 6 7</span><br></pre></td></tr></table></figure>
<h2 id="五常用的stringvectormapset">五、常用的string、vector、map、set</h2>
<h3 id="string-vs-char">5.1 string VS char*</h3>
<ul>
<li><p><code>char*</code>是C语言中的字符串，指向一个字符数组，以<code>\0</code>结尾，其内存是由程序员分配和释放的，所以可能会有空间不足的问题。通过<code>const char *str = "hello";</code>的方式创建的字符串是<strong>只读的</strong>，不能修改。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>; <span class="comment">//编译报错</span></span><br></pre></td></tr></table></figure></p>
<p>但是通过<code>char str[] = "hello";</code>的方式创建的字符串是<strong>可读写</strong>的，可以修改。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>; <span class="comment">//编译通过</span></span><br></pre></td></tr></table></figure></p></li>
<li><p><code>string</code>是C++中的字符串，是<strong>标准库类型STL</strong>中的一个类，内部<strong>封装了很多字符串操作的方法</strong>（比如查找、替换、删除等），而且内存是由系统自动分配和释放的，所以除非内存不足，否则不会出现空间不足的问题。通过<code>string str = "hello";</code>的方式创建的字符串是<strong>可读写</strong>的，可以修改。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>; <span class="comment">//编译通过</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>**1）string和char*的关系**</p>
<p>string底层是通过<code>char*</code>实现的，所以string和<code>char*</code>之间可以相互转换。</p>
<p>**2）string和char*的相互转换**</p>
<ul>
<li><p><code>string</code>转<code>char*</code>：<code>string</code>的<code>c_str()</code>函数可以将<code>string</code>转换为<code>char*</code>。通过转换可以在<code>printf</code>等函数中使用<code>string</code>。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="keyword">char</span>* cstr = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(str.<span class="built_in">c_str</span>());<span class="comment">//str.c_str()返回的是const char*，所以需要转换为char*</span></span><br></pre></td></tr></table></figure></p></li>
<li><p><code>char*</code>转<code>string</code>：<code>string</code>的<strong>构造函数</strong>可以将<code>char*</code>转换为<code>string</code>。以及通过赋值运算符<code>=</code>也可以将<code>char*</code>转换为<code>string</code>。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cstr = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(cstr)</span></span>;<span class="comment">//构造函数</span></span><br><span class="line">string str2 = cstr;<span class="comment">//赋值运算符</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="vector-vs-数组">5.2 vector VS 数组</h3>
<h4 id="vector的初始化">5.2.1 vector的初始化</h4>
<p><code>vector</code>的初始化可以通过<strong>构造函数</strong>、<strong>赋值运算符</strong>、<strong>列表初始化</strong>的方式进行。</p>
<ul>
<li><p>通过构造函数初始化</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v0</span><span class="params">(<span class="number">5</span>)</span></span>;<span class="comment">//初始化5个元素，每个元素的值为0</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v1</span><span class="params">(<span class="number">5</span>, <span class="number">1</span>)</span></span>;<span class="comment">//初始化5个元素，每个元素的值为1</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>通过赋值运算符初始化</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个元素，每个元素的值为1, 2, 3, 4, 5</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v3 = v2;<span class="comment">//将v2的值赋给v3</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>通过列表初始化初始化</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v4&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个元素，每个元素的值为1, 2, 3, 4, 5</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v5 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//初始化5个元素，每个元素的值为1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>二维vector的初始化</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">v6</span>(<span class="number">3</span>, vector&lt;<span class="keyword">int</span>&gt;(<span class="number">4</span>, <span class="number">1</span>));<span class="comment">//初始化3行4列，每个元素的值为1</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h4 id="vector的迭代器遍历">5.2.2 vector的迭代器遍历</h4>
<p><code>vector</code>的迭代器遍历可以通过<strong>迭代器</strong>、<strong>auto关键字</strong>、<strong>范围for循环</strong>的方式进行。</p>
<ul>
<li><p>通过迭代器遍历：迭代器是一种<strong>指针</strong>，可以通过<code>begin()</code>和<code>end()</code>函数获取<code>vector</code>的<strong>首地址</strong>和<strong>尾地址</strong>。</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">	cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//通过*解引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = v.<span class="built_in">begin</span>(); it!=v.<span class="built_in">end</span>(); i++)&#123;</span><br><span class="line">	cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure></p></li>
<li><p>通过范围for循环遍历</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">	cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h4 id="vector与数组的区别">5.2.3 vector与数组的区别</h4>
<ul>
<li>相同点
<ul>
<li><code>vector</code>和数组都是<strong>线性结构</strong>，都是<strong>连续的内存空间（这里的连续空间是指虚拟内存，在物理内存中不保证连续）</strong>。</li>
<li><code>vector</code>和数组都是<strong>有序的</strong>，都可以通过<strong>下标</strong>访问元素。</li>
</ul></li>
<li>不同点
<ul>
<li><code>vector</code>是<strong>动态数组</strong>，可以<strong>动态增加</strong>和<strong>删除</strong>元素，而数组是<strong>静态数组</strong>，长度是<strong>固定</strong>的。</li>
<li><code>vector</code>是<strong>STL</strong>中的<strong>容器</strong>，提供了很多<strong>成员函数</strong>，可以方便的进行<strong>插入</strong>、<strong>删除</strong>、<strong>查找</strong>等操作，而数组没有这些功能。</li>
<li><code>vector</code>是<strong>类</strong>，而数组是<strong>基本数据类型</strong>，所以<code>vector</code>可以<strong>继承</strong>，而数组不能继承。</li>
<li><code>vector</code>是可以通过<code>v1=v2</code>的方式进行<strong>赋值</strong>的，而数组不能直接通过这种方式进行赋值。</li>
</ul></li>
</ul>
<h3 id="set-和-map容器">5.3 set 和 map容器</h3>
<h4 id="set">5.3.1 set</h4>
<p><code>set</code>是<strong>集合</strong>，是一种<strong>关联式容器</strong>，它的主要特点如下：</p>
<ul>
<li><code>set</code>底层是<strong>红黑树RBTree</strong>，是一种<strong>平衡二叉树</strong>，所以<strong>查找</strong>、<strong>插入</strong>、<strong>删除</strong>的时间复杂度都是<strong>O(logn)</strong>。</li>
<li>其元素只有<strong>key</strong>，没有<strong>value</strong>（或者说value就是key）</li>
<li><code>set</code>中的元素是<strong>唯一</strong>的，不允许重复。</li>
<li><code>set</code>中的元素是<strong>有序</strong>的，是按照<strong>key</strong>的<strong>升序</strong>排列的。</li>
<li><code>set</code>中的元素是<strong>不可修改</strong>的，如果要修改元素，需要先删除再插入。（否则的话修改会破坏红黑树的平衡性）</li>
</ul>
<p><code>set</code>的基本函数操作有：</p>
<ul>
<li><code>insert</code>：插入元素</li>
<li><code>erase</code>：删除元素</li>
<li><code>find</code>：查找元素</li>
<li><code>count</code>：统计元素个数（因为元素是唯一的，所以相当于判断元素是否存在）</li>
<li><code>begin</code>：返回指向第一个元素的迭代器</li>
<li><code>end</code>：返回指向最后一个元素的迭代器</li>
<li><code>size</code>：返回元素个数</li>
<li><code>empty</code>：判断是否为空</li>
</ul>
<p>操作举例:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">find</span>(<span class="number">1</span>) != s.<span class="built_in">end</span>())&#123;</span><br><span class="line">	s.<span class="built_in">erase</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">count</span>(<span class="number">2</span>))&#123;<span class="comment">//返回1</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;2存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="map">5.3.2 map</h4>
<p><code>map</code>跟<code>set</code>类似，也是一种<strong>关联式容器</strong>，底层也是由<strong>红黑树RBTree</strong>实现的，<code>key</code>具有<strong>唯一性</strong>和<strong>有序性</strong>。但是<code>map</code>中的元素是<strong>pair键值对的形式存在的</strong>，<code>key</code>是<strong>唯一</strong>的，而<code>value</code>可以重复。</p>
<p><code>map</code>的基本函数操作有：</p>
<ul>
<li><code>insert</code>：插入元素</li>
<li><code>erase</code>：删除元素</li>
<li><code>find</code>：查找元素</li>
<li><code>count</code>：统计元素个数（因为元素是唯一的，所以相当于判断元素是否存在）</li>
<li><code>begin</code>：返回指向第一个元素的迭代器</li>
<li><code>end</code>：返回指向最后一个元素的迭代器</li>
<li><code>size</code>：返回元素个数</li>
<li><code>empty</code>：判断是否为空</li>
</ul>
<p>操作举例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ulitity&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	map&lt;<span class="keyword">int</span>, string&gt; m_map;</span><br><span class="line">	<span class="comment">//三种插入数据的方式：make_pair、pair、类似数组的方式</span></span><br><span class="line">	m_map.<span class="built_in">insert</span>(make_pair&lt;<span class="keyword">int</span>, string&gt;(<span class="number">1</span>, <span class="string">&quot;Hello1&quot;</span>));</span><br><span class="line">	m_map.<span class="built_in">insert</span>(pair&lt;<span class="keyword">int</span>, string&gt;(<span class="number">2</span>, <span class="string">&quot;Hello2&quot;</span>));</span><br><span class="line">	m_map[<span class="number">3</span>] = <span class="string">&quot;Hello3&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (m_map.<span class="built_in">find</span>(<span class="number">1</span>) != m_map.<span class="built_in">end</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; m_map[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	m_map.<span class="built_in">erase</span>(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (m_map.<span class="built_in">count</span>(<span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;无2这个key&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="multiset和multimap">5.3.3 multiset和multimap</h4>
<p>扩展讲一下<code>multiset</code>和<code>multimap</code>，<code>multiset</code>和<code>multimap</code>是<code>set</code>和<code>map</code>的<strong>多重集合</strong>版本，特点是允许<code>key</code>重复。底层也是由<strong>红黑树RBTree</strong>实现的。</p>
<h2 id="六自动类型推导">六、自动类型推导</h2>
<p>自动类型推导有两种方式：<code>auto</code>和<code>decltype</code>。</p>
<h3 id="auto">6.1 auto</h3>
<p><code>auto</code>是C++11新特性，可以<strong>自动推导变量的类型</strong>，可以用于<strong>变量声明</strong>、<strong>函数返回值</strong>、<strong>模板参数</strong>等。</p>
<p>auto是编译器通过<strong>初始值</strong>去判断类型的</p>
<h3 id="decltype">6.2 decltype</h3>
<p><code>decltype</code>是C++11新特性，可以<strong>获取表达式的类型</strong>，可以用于<strong>变量声明</strong>、<strong>函数返回值</strong>、<strong>模板参数</strong>等。</p>
<p>decltype是编译器通过<strong>变量或表达式</strong>去判断类型的</p>
<p>使用<code>decltype</code>有两种方式：<strong>decltype(表达式)</strong>和<strong>decltype(变量)</strong>。</p>
<ul>
<li><p>变量方法</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">decltype</span>(a) b = <span class="number">20</span>;<span class="comment">//b的类型和a的类型相同</span></span><br><span class="line">	<span class="keyword">auto</span> c = a;<span class="comment">//c的类型和a的类型相同</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>表达式方法</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">decltype</span>(a) b = <span class="number">20</span>;<span class="comment">//b的类型和a的类型相同</span></span><br><span class="line">	<span class="keyword">auto</span> c = a;<span class="comment">//c的类型和a的类型相同</span></span><br><span class="line">	<span class="keyword">decltype</span>(a + <span class="number">1</span>) d = <span class="number">30</span>;<span class="comment">//d的类型和a+1的类型相同</span></span><br><span class="line">	<span class="keyword">auto</span> e = a + <span class="number">1</span>;<span class="comment">//e的类型和a+1的类型相同</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="七c11新特性">七、C++11新特性</h2>
<ul>
<li><code>auto</code>：自动类型推导</li>
<li><code>decltype</code>：获取表达式的类型</li>
<li><code>lambda</code>：是一种内嵌的匿名函数（闭包实例）
<ul>
<li>可以捕获变量（值分为捕获和引用捕获两种）、传递参数、返回值等</li>
</ul></li>
<li><code>nullptr</code>：用来代替<code>NULL</code>，<code>NULL</code>在C++中是一个宏定义，跟0是一样的，所以在重载函数时会出现<strong>二义性问题</strong>，而<code>nullptr</code>是一个关键字</li>
<li><code>智能指针</code>：<code>shared_ptr</code>、<code>unique_ptr</code>、<code>weak_ptr</code></li>
<li><code>初始化列表</code>：<code>&#123;&#125;</code>，用来初始化数组、结构体、类等，其中list列表变量初始化的顺序是<strong>由参数声明的顺序决定的</strong>，不是初始化列表的顺序决定的</li>
<li><code>基于范围的for循环</code>：for(auto i : v)</li>
<li><code>右值引用</code>：<code>&amp;&amp;</code>，用来实现移动语义
<ul>
<li>右值（将亡值/纯右值）不能取地址，左值可以取地址</li>
<li>右值引用不能绑定到任何左值，如果想实现绑定，需要使用<code>std::move</code>函数</li>
<li>左值引用就是普通的引用 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//左值是a，右值是10</span></span><br><span class="line"><span class="keyword">int</span> &amp;b = a;</span><br><span class="line"><span class="comment">//int &amp;c = 10;//编译报错，10是右值</span></span><br><span class="line"><span class="keyword">int</span> &amp;&amp;c = <span class="number">10</span>;</span><br><span class="line">c = <span class="number">20</span>;<span class="comment">//修改右值</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><code>noexcept</code>：用来指定函数是否抛出异常</li>
<li><code>explicit</code>：用来修饰构造函数，<strong>取消隐式转换</strong></li>
</ul>
<h2 id="九c-stl">九、C++ STL</h2>
<p>C++中STL是指：</p>
<ul>
<li>算法：排序、查找、替换等方法</li>
<li>容器：vector、list、deque、set、map等数据结构的容器，可以容纳不同类型的数据</li>
<li>迭代器：指针用来遍历容器的数据</li>
</ul>
<p>顺序式容器有：<code>vector</code>、<code>list</code>、<code>deque</code>（双向开口线性空间）、<code>queue</code>、<code>stack</code>、<code>priority_queue</code></p>
<ul>
<li>除了list外，插入删除(insert/erase)都会<strong>使原先取出的迭代器失效</strong></li>
</ul>
<p>关联式容器有：<code>set</code>、<code>map</code>、<code>multiset</code>、<code>multimap</code></p>
<ul>
<li>插入删除<strong>不会使迭代器失效</strong>（只有删除的那个元素的迭代器失效）</li>
<li>set和map是红黑树实现的，所以查找、插入、删除的时间复杂度都是O(logn)</li>
</ul>
<p>各种容器的迭代器类别如下表：</p>
<table>
<colgroup>
<col style="width: 14%">
<col style="width: 71%">
<col style="width: 14%">
</colgroup>
<thead>
<tr>
<th>容器</th>
<th>迭代器类别</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>vector deque</td>
<td>随机访问迭代器</td>
<td>支持<code>+</code>、<code>-</code>、<code>+=</code>、<code>-=</code>、<code>[]</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code></td>
</tr>
<tr>
<td>stack queue priority_queue</td>
<td>不支持迭代器（不能被遍历）</td>
<td>无法遍历</td>
</tr>
<tr>
<td>list (multi)map/set</td>
<td>双向迭代器</td>
<td>支持<code>++</code>、<code>--</code>、<code>*</code>、<code>-&gt;</code></td>
</tr>
<tr>
<td>unordered_map/set forward_list</td>
<td>前向迭代器（只能向前移动）</td>
<td>支持<code>++</code>、<code>*</code>、<code>-&gt;</code></td>
</tr>
</tbody>
</table>
<h3 id="stl动态分配空间">9.1 STL动态分配空间</h3>
<p>从堆上分配空间的话有<strong>一级配置器</strong>和<strong>二级配置器</strong>：</p>
<ul>
<li>一级配置器是通过<code>malloc</code>和<code>free</code>实现的</li>
<li>二级配置器是<strong>默认的</strong>分配方式（需要分配的空间小于128Byte时使用的），是通过维护<strong>内存池+自由链表</strong>实现的
<img src="/2024/03/09/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/memoryPool.png"></li>
</ul>
<h3 id="vector">9.2 vector</h3>
<p><strong>1）基础知识</strong></p>
<p><code>vector</code>是分配的<strong>连续地址空间</strong>，所以假设我们提前获取了vector中某个元素的地址，然后再插入元素，由于要保证vector的连续性，所以这个<strong>地址就会失效</strong>。</p>
<ul>
<li>而<code>deque</code>是由一段一段连续的空间拼接起来的</li>
</ul>
<p><strong>2）vector的双倍扩容</strong></p>
<p>vector中有效元素个数是<code>size()</code>，而分配的空间大小是<code>capacity()</code>，当插入元素且有<code>size()==capacity()</code>时，说明vector中的空间已经分配完了，这时就需要重新分配空间</p>
<ul>
<li>而<code>dequeue、stack、queue</code>也需要提前分配内存，但是是一次分配固定大小的内存，且不用重新拷贝，而是通过指针指向下一段的内存。</li>
</ul>
<p>vector当分配的空间不足时，新分配的空间会是<strong>原来的2倍</strong>，因为每次扩容就需要拷贝原先的数据，所以多分配内存的话能够减少<strong>内存分配和拷贝的次数</strong>，提高效率。</p>
<p>扩容有两种方法：</p>
<ul>
<li><code>resvser(n)</code>：预先分配空间，但是不会改变<code>size()</code>，只会改变<code>capacity()</code>，将<code>capacity()</code>预先扩大到n</li>
<li><code>resize(n,t)</code>：同时改变<code>size()</code>和<code>capacity()</code>都扩大到n，同时将新增的元素初始化为<code>t</code></li>
</ul>
<p><strong>3）vector释放内存</strong></p>
<p>vector有两种方式清楚数组：</p>
<ul>
<li><code>clear()</code>：清空数组，但是不会释放内存，<code>size()</code>变为0，<strong><code>capacity()</code>不变</strong></li>
<li><code>swap(vector&lt;int&gt;())</code>：清空数组，释放内存，<code>size()</code>和<code>capacity()</code>都变为0</li>
</ul>
<h3 id="list">9.3 list</h3>
<p><code>list</code>是<strong>双向链表</strong>实现的，所以各元素之间<strong>地址空间不连续</strong>，因此可以在任意位置插入元素，不会影响其他元素的地址。（这与vector不同）</p>
<p>vector和list的区别：</p>
<ul>
<li>vector<strong>随机访问效率更高</strong>（可以通过下标访问），而list只能通过迭代器访问O(n)</li>
<li>list在<strong>中间插入时效率高</strong>，因为vector插入时需要挪动后面的元素，且插入后后面的地址失效，而list依然有效</li>
</ul>
<h3 id="hashunordered_map">9.4 Hash（unordered_map）</h3>
<p><code>unordered_map</code>是C++11中引入的新容器，是<strong>哈希表</strong>，是一种<strong>关联式容器</strong>，底层是<strong>哈希表</strong>实现的，<code>key</code>具有<strong>唯一性</strong>和<strong>无序</strong>。哈希表查询时间复杂度是<strong>O(1)</strong>。</p>
<p>其中解决哈希冲突的方式是<strong>开链法</strong>，C++中哈希表中的哈希槽<code>bucket</code>是用<code>vector</code>实现的，但是每个<code>bucket</code>中存储的是<strong>链表</strong>，因此<code>unordered_map</code>插入新元素时<strong>原先的迭代器指针也不会失效</strong>。当然也可以使用其他方法解决哈希冲突问题：</p>
<ul>
<li>线性探测</li>
<li>再散列：维护多个不同的<strong>哈希函数</strong>，当发生冲突时，再使用另一个哈希函数，直到找到空槽</li>
</ul>
<p><img src="/2024/03/09/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/unordered_map.png"></p>
<h2 id="九ccpython的区别">九、C++、C、Python的区别</h2>
<h3 id="c和c的区别">1. C++和C的区别</h3>
<ul>
<li>编译链接不同：C++因为有<strong>重载</strong>，所以函数名会在C++编译器中进行<strong>名称改编</strong>，而C语言不会。C++编译后会生成<code>.obj</code>文件，C语言编译后会生成<code>.o</code>文件</li>
<li>C++支持<strong>面向对象</strong>，而C语言不支持</li>
<li>C++中内存分配和释放是通过<code>new</code>和<code>delete</code>，而C语言只能通过<code>malloc</code>和<code>free</code></li>
<li>C++中有<strong>引用</strong>，而C语言没有</li>
<li>C++中有<strong>try/catch/throw的异常处理</strong></li>
<li>C++中有<strong>模板</strong>，而C语言没有</li>
<li>C++新增了关键字：namespace、bool、true、false、new等</li>
</ul>
<h3 id="c和python的区别">2. C++和Python的区别</h3>
<ul>
<li>C++是<strong>编译型语言</strong>，Python是<strong>解释型语言</strong></li>
<li>Python支持的库很多，但是运行速度比C++慢</li>
<li>Python有严格的<strong>缩进规则，用缩进代表代码块</strong>，而C++用<strong>花括号{}</strong>代表代码块</li>
<li>C++变量需要<strong>声明</strong>，而Python不需要</li>
</ul>
]]></content>
      <categories>
        <category>C++知识点</category>
      </categories>
  </entry>
  <entry>
    <title>C++底层学习</title>
    <url>/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="一程序预编译-编译-链接-运行的过程">一、程序预编译-编译-链接-运行的过程</h1>
<h2 id="基础知识操作系统相关">1.1 基础知识（操作系统相关）</h2>
<h3 id="可执行文件格式及数据">1.1.1 可执行文件格式及数据</h3>
<p><strong>1）Windows和Linux的可执行文件格式</strong></p>
<p>以C++为例，Windows下的可执行文件格式是<code>.exe</code>，格式为<strong>PE</strong>；Linux下的可执行文件是<strong>ELF</strong>格式。</p>
<p><strong>2）数据和指令的区别</strong></p>
<p>无论用什么语言编写的程序，最终都是一堆<strong>二进制</strong>数据，这些数据有两种类型：<strong>指令</strong>和<strong>数据</strong>。指令是CPU执行的，数据是CPU读写的。</p>
<p>其中<strong>函数调用</strong>、<strong>循环</strong>、<strong>条件判断</strong>等最终都会被编译成一系列的<strong>指令</strong>存在<strong>文本段</strong>，而<strong>变量</strong>、<strong>常量</strong>等则会被编译成<strong>数据</strong>存储在**数据段。</p>
<p><strong>3）文本段和数据段</strong></p>
<ul>
<li><strong>文本段</strong>：存放程序的<strong>指令</strong>，是<strong>只读</strong>的，不允许写入。（代码区）
<ul>
<li>静态成员函数、普通成员函数</li>
</ul></li>
<li><strong>数据段</strong>：存放程序的<strong>数据</strong>，是<strong>可读写</strong>的。数据段又可以分为<strong>数据段</strong>和<strong>BSS段</strong>
<ul>
<li><strong>数据段</strong>存放<strong>初始化的全局变量</strong></li>
<li><strong>BSS段</strong>存放<strong>未初始化的全局变量</strong>。</li>
</ul></li>
</ul>
<p>这些<strong>段</strong>组成了<strong>可执行文件</strong>，在程序运行时会被加载到进程的<strong>虚拟内存</strong>中，然后通过<strong>页表</strong>映射到<strong>物理内存</strong>中。</p>
<p><strong>4）虚拟地址空间</strong></p>
<p>前面提到<strong>段</strong>在程序运行时会被加载到<strong>虚拟内存</strong>中，当程序运行时，操作系统会为每个进程分配一个<strong>虚拟地址空间</strong>（Linux下是<strong>4G</strong>），其中<strong>0-3G</strong>是用户空间，<strong>3-4G</strong>是内核空间。</p>
<p>其中用户空间组成为（从低位到高位）：</p>
<ul>
<li><strong>预留空间</strong>：<code>128M</code></li>
<li><strong>文本段.text</strong>：存放程序的<strong>指令</strong></li>
<li><strong>数据段.data</strong>：存放程序的<strong>已初始化的数据</strong></li>
<li><strong>BSS段.bss</strong>：存放<strong>未初始化的全局变量</strong></li>
<li><strong>堆heap</strong></li>
<li><strong>栈stack</strong></li>
</ul>
<p>虚拟空间由<strong>用户空间</strong>和<strong>内核空间</strong>组成，因此<strong>32位</strong>系统下虚拟内存的最大空间为<strong>3G+1G</strong>，<strong>64位系统是128T+128T</strong>：</p>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/memory.png"></p>
<p>访问栈区的数据比访问堆区的数据快：</p>
<ul>
<li>栈区数据直接由寄存器访问；堆区需要由指针访问，先将指针加载到寄存器，然后再访问数据</li>
<li>栈区可以利用连续空间的特性缓存数据；堆区数据是离散的，无法充分利用CPU缓存</li>
</ul>
<h3 id="cpu寄存器内存的关系">1.1.2 CPU、寄存器、内存的关系</h3>
<p>计算机的三个核心组成部分：<strong>CPU</strong>、<strong>内存</strong>、<strong>I/O</strong>。</p>
<ul>
<li><strong>CPU</strong>：是计算机的大脑，属于高速设备，用来频繁地读取、执行指令（数据）。</li>
<li><strong>内存</strong>：属于中速设备，用来存储程序的指令和数据。</li>
<li><strong>I/O</strong>：属于低速设备，用来输入输出数据。</li>
</ul>
<p>而<strong>寄存器</strong>是<strong>CPU内部的</strong>一块高速缓存，用来存储CPU执行指令时的临时数据，如<strong>程序计数器</strong>、<strong>指令寄存器</strong>、<strong>通用寄存器</strong>等。</p>
<p>一般来说，程序运行中会先从<strong>内存</strong>中读取指令到<strong>寄存器</strong>中，然后<strong>CPU</strong>执行这些指令，最后将结果通过<strong>寄存器</strong>写回到<strong>内存</strong>中。也就是说，<strong>寄存器</strong>是<strong>CPU</strong>和<strong>内存</strong>之间的桥梁。</p>
<h2 id="生成可执行文件的过程">1.2 生成可执行文件的过程</h2>
<p>以Linux下的C程序为例，生成可执行文件的过程主要分为四个阶段：</p>
<ul>
<li><strong>预编译</strong>（Preprocessing）-&gt;<code>.i</code>文件</li>
<li><strong>编译</strong>（Compilation）-&gt;<code>.s</code>文件</li>
<li><strong>汇编</strong>（Assembly）-&gt;<code>.o</code>文件</li>
<li><strong>链接</strong>（Linking）-&gt;可执行文件</li>
</ul>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/Compiler_Work.png"></p>
<p>当我们有一个<code>.c</code>文件时，我们可以通过<code>gcc</code>命令将其编译成可执行文件:
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc hello.c <span class="comment"># 编译</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./a.out <span class="comment"># 执行</span></span></span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure></p>
<p>而生成可执行文件过程就是<code>gcc</code>这个语句实现的，这句语句就实现了上述说到的4个步骤，接下来我们将剖析一下这四个步骤的具体实现。</p>
<h3 id="预编译">1.2.1 预编译</h3>
<p>预编译的主要工作是将<strong>头文件以及宏定义替换成其真正的内容</strong>，得到一个<code>.i</code>文件。所以预编译后得到的文件将比原文件大很多。</p>
<p>在Linux中我们可以通过<code>gcc -E</code>命令来分解编译过程，使其停留在预编译阶段，并通过<code>-o</code>指定文件名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc -E hello.c -o hello.i</span></span><br></pre></td></tr></table></figure>
<p>结果预编译后文件的大小变大，因为预编译后的文件中包含了很多头文件的内容：</p>
<table>
<thead>
<tr>
<th style="text-align: center;">时间</th>
<th style="text-align: center;">文件名</th>
<th style="text-align: center;">大小</th>
<th style="text-align: center;">代码行数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">预处理前</td>
<td style="text-align: center;">hello.c</td>
<td style="text-align: center;">50</td>
<td style="text-align: center;">3</td>
</tr>
<tr>
<td style="text-align: center;">预处理后</td>
<td style="text-align: center;">hello.i</td>
<td style="text-align: center;">1.1K</td>
<td style="text-align: center;">3</td>
</tr>
</tbody>
</table>
<p><strong>C++中宏定义与函数的区别</strong></p>
<ul>
<li><strong>宏定义</strong>在预编译阶段就完成了替换，相当于直接插入了代码，不存在函数调用，也没有返回值、不做类型检查、不加分号</li>
<li><strong>函数</strong>是在编译阶段才会被调用，有返回值、有类型检查、需要在最后加分号。</li>
</ul>
<h3 id="编译">1.2.2 编译</h3>
<p>编译的主要工作是将<strong>预编译后的文件</strong>转换成<strong>汇编代码</strong>，得到一个<code>.s</code>文件。</p>
<p>在Linux中我们可以通过<code>gcc -S</code>命令来分解编译过程，使其停留在编译阶段，并通过<code>-o</code>指定文件名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc -S hello.i -o hello.s</span></span><br></pre></td></tr></table></figure>
<p>最终得到的文件是一个汇编代码文件，内容如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    .file	&quot;hello.c&quot;</span><br><span class="line">    .text</span><br><span class="line">    .globl	main</span><br><span class="line">    .type	main, @function</span><br><span class="line">main:</span><br><span class="line">    .LFB0:</span><br><span class="line">    .cfi_startproc</span><br><span class="line">    pushq	%rbp</span><br><span class="line">    .cfi_def_cfa_offset 16</span><br><span class="line">    .cfi_offset 6, -16</span><br><span class="line">    movq	%rsp, %rbp</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></p>
<h3 id="汇编">1.2.3 汇编</h3>
<p>汇编的主要工作是将<strong>汇编代码</strong>转换成<strong>机器码Machine
Code</strong>（二进制），得到一个<code>.o</code>文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc -c hello.s -o hello.o</span></span><br></pre></td></tr></table></figure>
<p>前面我们提到，可执行文件是由<strong>文本段</strong>和<strong>数据段</strong>组成的，其实每个<code>.o</code>文件就是一个<strong>目标文件</strong>，其中包含了<strong>文本段</strong>和<strong>数据段</strong>的内容。因此单独一个<code>.o</code>文件是无法运行的分布如下：</p>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/memory_o.png"></p>
<h3 id="链接">1.2.4 链接</h3>
<p>假设我们代码不止一个文件，那么我们需要先将这些文件都全部生成为汇编代码<code>.o</code>，然后再将这些汇编代码链接成一个可执行文件<code>a.out</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc hello.o hello2.o -o a.out</span></span><br></pre></td></tr></table></figure>
<p>在链接的过程中，会将多个<code>.o</code>文件中的<strong>文本段</strong>和<strong>数据段</strong>合并成一个可执行文件，也就是将所有<code>.text</code>合并成一个<code>.text</code>，将所有<code>.data</code>合并成一个<code>.data</code>。最终的布局如下：</p>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/combine_o.png" width="80%"></p>
<h3 id="运行">1.2.5 运行</h3>
<p>运行时会先将可执行文件<code>a.out</code>加载到<strong>虚拟内存</strong>中，然后通过<strong>页表</strong>映射到<strong>物理内存</strong>中，最终通过<strong>CPU</strong>执行这些指令。</p>
<h2 id="静态链接和动态链接">1.3 静态链接和动态链接</h2>
<p>静态链接和动态链接的主要区别在于<strong>链接</strong>的时机不同</p>
<ul>
<li>静态链接是在<strong>编译</strong>时进行的</li>
<li>动态链接是在<strong>运行</strong>时进行的。</li>
</ul>
<p>其库存储的<strong>位置</strong>不同</p>
<ul>
<li>静态链接库是<strong>编译</strong>时链接集成到<strong>可执行文件</strong>中</li>
<li>动态链接库是作为独立的共享库存储的，<strong>运行</strong>时再加载到<strong>内存</strong>中。</li>
</ul>
<h3 id="静态链接">1.3.1 静态链接</h3>
<p><strong>静态链接</strong>是指在<strong>链接</strong>阶段将程序中所有的<strong>静态库</strong>（如Linux下的<code>.a</code>文件、Windows下的<code>.lib</code>文件）都链接到可执行文件中，生成一个<strong>独立的可执行文件</strong>。</p>
<p><strong>1）优点</strong></p>
<p>静态链接的方式包含了程序运行需要的所有代码和数据，因此可以独立运行，不需要依赖其他文件。</p>
<p><strong>2）缺点</strong></p>
<p>每个使用该库的程序都会有一份该库的拷贝，因此会<strong>占用更多的磁盘空间</strong>。</p>
<p>同时，如果库文件更新了，那么所有使用该库的程序都需要重新编译，<strong>维护成本高</strong>。</p>
<h3 id="动态链接">1.3.2 动态链接</h3>
<p><strong>动态链接</strong>是指在<strong>链接</strong>阶段只将程序中的<strong>引用</strong>链接到可执行文件中，实际<strong>链接</strong>库是在<strong>运行</strong>时进行的，操作系统执行时会根据需要加载<strong>共享库</strong>（如Linux下的<code>.so</code>文件、Windows下的<code>.dll</code>文件）。</p>
<p><strong>1）优点</strong></p>
<p>由于多个程序运行时只需要一个共享库，因此<strong>节省了磁盘空间</strong>。</p>
<p>如果库文件更新了，只需要更新一份库文件，所有使用该库的程序都会<strong>自动更新</strong>。</p>
<p><strong>2）缺点</strong></p>
<p>程序运行时需要加载共享库，因此<strong>启动速度慢</strong>。</p>
<p>如果共享库出现问题（丢失或损坏），那么所有使用该库的程序都会受到影响。</p>
<blockquote>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/88255667">C/C++编译链接</a></p>
<p>参考：<a href="https://blog.csdn.net/Mr_H9527/article/details/81156112">C++：深入理解编译和链接过程</a></p>
</blockquote>
<h1 id="二内存管理">二、内存管理</h1>
<h2 id="c内存分区">2.1 C++内存分区</h2>
<p>C++程序在运行时会将内存分为<strong>5个区域</strong>：</p>
<ul>
<li><strong>栈区</strong>：存放<strong>局部变量</strong>等，由<strong>系统自动</strong>分配和释放。</li>
<li><strong>堆区</strong>：存放<strong>动态分配</strong>的内存，由<strong>程序员</strong>分配和释放。</li>
<li><strong>全局/静态区</strong>：存放<strong>全局变量</strong>和<strong>静态变量</strong>，程序启动时分配，程序结束时释放。</li>
<li><strong>常量区</strong>：存放<strong>常量</strong>，如字符串常量。</li>
<li><strong>代码区</strong>：存放<strong>函数体的二进制代码</strong>。所有成员函数、全局函数都放在代码区。所以函数不占用对象的内存</li>
</ul>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/memory_fenpei.png" width="80%"></p>
<p>其实还有个<strong>自由存储区</strong>，也会被认为是<strong>堆区</strong>的一部分，用于存放<strong>new</strong>和<strong>delete</strong>的内存。</p>
<h2 id="内存池">2.2 内存池</h2>
<h2 id="内存泄漏">2.3 内存泄漏</h2>
<p>内存泄漏在前面的博客中已经提到过：<a href="https://akirazheng.github.io/2024/03/09/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/">C++基础知识学习</a></p>
<p>内存泄漏主要是由<strong>new</strong>或<strong>malloc</strong>分配的内存没有被释放，长时间运行后如果内存满了会导致内存溢出、造成程序崩溃。建议通过<strong>析构函数</strong>、<strong>智能指针</strong>、<strong>RAII</strong>等方式来避免内存泄漏。</p>
<h2 id="this指针">2.4 this指针</h2>
<p>同样在前面的博客中也提到过：<a href="https://akirazheng.github.io/2024/03/09/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/">C++基础知识学习</a></p>
<p>主要注意的是它只能在类的<strong>成员函数</strong>中使用，且<strong>静态成员函数</strong>中不能使用。</p>
<h2 id="类的内存分配">2.5 类的内存分配</h2>
<p>这部分包括类内的对齐在后面的<strong>内存对齐</strong>中会详细介绍。</p>
<p>一些特殊数据类型的大小：</p>
<ul>
<li>指针：32位下是4字节，64位下是8字节</li>
<li>union：取最大的成员的大小</li>
</ul>
<h1 id="三内存对齐">三、内存对齐</h1>
<p>内存对齐是编译器为了提高<strong>内存访问效率</strong>而采取的一种措施，能<strong>减少内存访问次数</strong>。</p>
<p>以32位系统为例，寄存器只能从能<strong>被4整除的地址</strong>（4bytes=32bits）中读取数据，因此如果数据不是4的整数倍，那么就需要<strong>两次</strong>内存访问才能读取完整的数据。</p>
<p>至于对齐字节是多少，这跟硬件的颗粒度有关，比如32位系统的寄存器是32bits，64位系统的寄存器是64bits。</p>
<h2 id="内存对齐的好处">3.1 内存对齐的好处</h2>
<ul>
<li><strong>方便平台移植</strong>
<ul>
<li>某些硬件平台不能访问任意地址的内存，只能访问某些特定地址的内存，因此需要对齐来<strong>兼容</strong>这些硬件平台。</li>
</ul></li>
<li><strong>提高内存访问效率</strong>
<ul>
<li>未对齐的数据在内存中需要访问两次，而对齐的数据只需要访问一次，因此对齐能<strong>提高内存访问效率</strong>。（对于数据结构特别是栈，最好是在<strong>自然边界</strong>上对齐）</li>
</ul></li>
</ul>
<h2 id="c中结构体及类的内存对齐">3.2 C++中结构体及类的内存对齐</h2>
<p><strong>1）结构体的内存对齐</strong></p>
<p>C++中结构体的内存对齐是由<strong>最宽基本类型</strong>决定的，即结构体中的<strong>每个成员</strong>都要对齐到<strong>最宽基本类型（结构体中变量类型最大值）</strong>的整数倍。</p>
<ul>
<li><p>point：union的话会以union中最大的成员的大小为对齐基准，union的大小也是最大成员的大小</p></li>
<li><p>对齐原则：</p>
<ul>
<li><strong>确定对齐基准字节数</strong>：找到结构体中<strong>最宽的基本类型</strong>，如最宽的是<code>double</code>，那么对齐基准字节数就是<code>8</code>。后面的数据都要按照<code>8</code>的整数倍对齐，不足的补0。</li>
<li><strong>每个成员对齐规则</strong>：每个成员的<strong>距离整个结构体初始位置的offset必须是min(该成员大小，对齐基准字节数)的整数倍</strong>。</li>
<li><strong>整体对齐原则</strong>：最后结构体的大小<code>sizeof(structA)</code>必须是<strong>对齐基准字节数</strong>的整数倍。</li>
</ul></li>
</ul>
<p>举例说明： <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">structA</span> &#123;</span></span><br><span class="line">    <span class="comment">//最大的是int，因此对齐基准字节数是4，最终大小为12</span></span><br><span class="line">    <span class="keyword">char</span> a;  <span class="comment">//a - - -</span></span><br><span class="line">    <span class="keyword">int</span> b;   <span class="comment">//b b b b</span></span><br><span class="line">    <span class="keyword">short</span> c; <span class="comment">//c c - -</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(structA);<span class="comment">//12</span></span><br></pre></td></tr></table></figure></p>
<p>优化后将<code>int</code>放在最前面或者最后面： <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">structA</span> &#123;</span></span><br><span class="line">    <span class="comment">//最大的是int，因此对齐基准字节数是4，最终大小为8，放在末尾同理</span></span><br><span class="line">    <span class="keyword">int</span> b;   <span class="comment">//b b b b</span></span><br><span class="line">    <span class="keyword">char</span> a;  <span class="comment">//a - - -</span></span><br><span class="line">    <span class="keyword">short</span> c; <span class="comment">//c c - -</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><strong>2）类的内存对齐</strong></p>
<ul>
<li>如果是类中的成员变量，也是按照上述规则进行对齐</li>
<li>同时如果类中有<strong>虚函数</strong>，那么类中会有一个<strong>虚函数表指针</strong>，这个指针大小为<strong>4</strong>也要进行对齐。</li>
<li>类中的<strong>成员函数</strong>不占实例化对象内的空间，因为<strong>成员函数</strong>是<strong>共享</strong>的。</li>
<li>所以一个类中如果只有普通函数，没有任何变量，那么这个类的大小是<strong>1</strong>。（因为类的大小最小是<strong>1</strong>）</li>
<li><strong>类中的static静态变量</strong>也不占类的大小，因为<strong>静态变量</strong>是<strong>共享</strong>的。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="comment">//最大的是int，因此对齐基准字节数是4，最终大小为12</span></span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//a a a a</span></span><br><span class="line">    <span class="keyword">char</span> b;<span class="comment">//b - - -</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;<span class="comment">//虚函数表指针:- - - -</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;<span class="comment">//成员函数不占空间</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in"><span class="keyword">sizeof</span></span>(A);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in"><span class="keyword">sizeof</span></span>(A);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p><strong>3）C++内存对齐最终还会再操作系统再次检查对齐</strong></p>
<p>比如我们在一个结构体中设置两个<code>char</code>型数据，那么根据C++的对齐规则，该结构体的大小是<code>2</code>，但是操作系统会再次检查对齐，如果操作系统要求对齐是<code>4</code>（32位），那么最终该结构体的大小是<code>4</code>（通过检查两个类对象的地址差发现的）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test2</span> &#123;</span></span><br><span class="line">	<span class="keyword">char</span> a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>当用<code>sizeof</code>和通过地址差来检查对齐时，会发现<code>sizeof(test2)</code>是<code>2</code>，但是两个类对象的地址差是<code>4</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test2 t1;</span><br><span class="line">    test2 t2;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(test2) &lt;&lt; endl;<span class="comment">//1</span></span><br><span class="line">    cout &lt;&lt; &amp;t2&lt;&lt; endl;<span class="comment">//000000D4769CF384</span></span><br><span class="line">    cout &lt;&lt; &amp;t1&lt;&lt; endl;<span class="comment">//000000D4769CF3A4</span></span><br><span class="line">    <span class="comment">//发现前后差了4，说明跟我们想象中的一个对象占用1个字节不一样，猜测操作系统也进行了对齐操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四内存池设计">四、内存池设计</h1>
<h2 id="c默认的内存管理函数">4.1 C++默认的内存管理函数</h2>
<h3 id="系统分配内存空间">4.1.1 系统分配内存空间</h3>
<p>系统在接收到<strong>内存分配请求</strong>时，会有以下的操作：</p>
<ul>
<li>查找<strong>内存空闲表</strong></li>
<li>按照一定算法分配不小于申请需求的<strong>内存块</strong></li>
<li>切割成合适的大小返回给用户</li>
<li>更新内存表</li>
<li>如果涉及多线程，由于多线程共享一块内存空间，所以还会统一进行<strong>锁竞争</strong></li>
</ul>
<p>那么就会存在<strong>内存碎片</strong>和<strong>效率性能</strong>的问题：</p>
<p><strong>1）内存碎片</strong></p>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/memory_sui.png"></p>
<ul>
<li>由于<strong>堆</strong>上内存的分配和释放是程序员控制的、<strong>不连续</strong>的，所以会产生内存碎片，导致<strong>内存利用率低</strong>。</li>
<li>内存碎片又分为<strong>外部碎片</strong>和<strong>内部碎片</strong>
<ul>
<li><strong>外部碎片</strong>是指已经被释放的内存，但是由于<strong>大小不合适</strong>无法分配给新的内存请求。</li>
<li><strong>内部碎片</strong>是指<strong>已分配的空间</strong>如C++中的<code>new</code>分配的内存，由于<strong>对齐</strong>等原因导致的<strong>浪费</strong>。</li>
</ul></li>
</ul>
<p><strong>2）效率性能问题</strong></p>
<ul>
<li>在多线程环境下，并发加锁会导致<strong>性能下降</strong>。</li>
<li>就像前面提到的系统分配内存的方式需要经过<strong>查找</strong>、<strong>分配</strong>、<strong>更新</strong>等操作，这些操作都会<strong>消耗时间</strong>，因此会影响<strong>效率</strong>。</li>
</ul>
<p>所以需要引入<strong>内存池</strong>来<strong>优化性能</strong>以及减少<strong>内存碎片</strong>问题。</p>
<p><strong>内存池</strong>是一种<strong>预先分配</strong>一定数量的内存，然后<strong>按需分配</strong>给用户，用户使用完后再<strong>归还</strong>给内存池，这样就可以<strong>减少内存碎片</strong>、<strong>减少频繁地向系统申请和释放资源来提高效率</strong>。</p>
<h3 id="malloc内存分配机制">4.1.2 malloc内存分配机制</h3>
<p>malloc分配内存有两种方式：<code>brk</code>和<code>mmap</code></p>
<ul>
<li>malloc不是系统调用，由于使用了池化技术会从提前申请的内存中分配，所以<strong>不会陷入内核态</strong></li>
<li><code>brk</code>和<code>mmap</code>是系统调用，会陷入内核态</li>
</ul>
<p><strong>1）C++内存回收</strong></p>
<p>C/C++是编译型语言，<strong>没有内存回收机制</strong>，程序员需要自己释放不需要的内存。</p>
<p>C++中的内存管理方式主要有<strong>运算操作符new</strong>和<strong>函数malloc</strong>两种，其中<strong>new</strong>也是基于<strong>malloc</strong>实现的。所以我们这里主要讨论<strong>malloc</strong>。</p>
<p>在C++程序中进行内存回收的方式有<strong>全局变量自动回收</strong>、<strong>delete、free回收</strong>、<strong>RAII通过析构函数自动回收</strong>等方式</p>
<p>对于<strong>堆</strong>上的资源，由于上面提到的<strong>效率</strong>和<strong>内存碎片</strong>问题，C++不会直接向堆申请资源，而是借助<strong>malloc</strong>函数来向<strong>系统</strong>申请资源。</p>
<p><strong>2）malloc内存分配机制</strong></p>
<p><strong>malloc</strong>属于<strong>标准库用于接口操作层</strong>，而用户调用<strong>malloc接口</strong>属于在<strong>用户层</strong>实现的，就像上面提到的，出于性能考虑，<strong>malloc</strong>是通过<strong>内存池</strong>的方式来管理内存的。</p>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/memory_malloc.png"></p>
<p><strong>malloc</strong>的实现机制简单来说是，当我们申请一块如8B内存时，会实际上向<strong>系统</strong>申请一块更大的如1M内存，然后后面申请内存时都是从这1M内存中分配，当这1M内存不够时，再向系统申请1M内存。同时<strong>malloc</strong>内部还尝试通过<strong>空闲链表</strong>的设计方式来<strong>减少内存碎片</strong>。</p>
<p>其中最主要的分配内存思想是<strong>分配时会搜索空闲链表，找到第一个大于等于所需空间的空闲区块</strong>来进行分配，并根据<strong>不同的编译器</strong>具有不同的分配方式（一般不同编译器平台用的都是不同的内存分配算法）：</p>
<ul>
<li>如windows下的采用的是微软的一套方案</li>
<li>Linux下gcc用的<strong>glibc</strong>采用的内存分配器是<strong>ptmalloc</strong></li>
</ul>
<p><strong>malloc的优点：减少内存碎片</strong></p>
<p>malloc 只分配几种固定大小的内存块，可以减少外部碎片。</p>
<p><strong>malloc的缺点：多线程下性能问题</strong></p>
<ul>
<li>malloc的分配区有<strong>互斥锁</strong>来保证线程安全，但是进程中多个线程是<strong>共享</strong>一个malloc的分配区的，加锁的<strong>时间代价</strong>高。</li>
<li>由于需要查找合适的空闲区块，因此还有<strong>查找</strong>耗时的问题。</li>
</ul>
<h2 id="经典内存池的设计">4.2 经典内存池的设计</h2>
<h3 id="设计思路">4.2.1 设计思路</h3>
<p>最基础的内存池设计类似于<strong>malloc</strong>的设计，主要包括<strong>内存分配</strong>和<strong>内存释放</strong>两个操作。操作是由<strong>空闲链表</strong>来实现的。</p>
<ul>
<li><p>首先是提前向<strong>OS</strong>申请一块<strong>大内存</strong>，然后将这块内存均分成<strong>小块</strong>（后面优化可以分割成不同大小的内存块）</p></li>
<li><p>用链表表头<code>freeNodeHead</code>来存储<strong>空闲内存块</strong>，当用户申请内存时，就从<code>freeNodeHead</code>中取出一块内存块分配给用户</p></li>
<li><p>分割后的内存块通过链表组成<strong>内存节点</strong></p></li>
<li><p>每次分配内存时从<strong>空闲链表</strong>中取出一个<strong>头节点，时间复杂度为O(1)</strong></p></li>
<li><p>每次释放内存时将<strong>内存节点</strong>插入到<strong>空闲链表</strong>的<strong>头部</strong>，时间复杂度为O(1)</p></li>
<li><p>当空间不够用时，再向<strong>OS</strong>申请一块<strong>大内存</strong></p>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/memory_pool.png"></p></li>
</ul>
<h3 id="内存池的结构体设计">4.2.2 内存池的结构体设计</h3>
<h4 id="变量">1）变量</h4>
<ul>
<li>申请的内存块头指针：<code>pBlockHeader</code>
<ul>
<li>内存池可以申请<strong>多块内存</strong></li>
</ul></li>
<li>上述每个内存块的<strong>空闲链表</strong>头指针：<code>pFreeNodeHead</code>
<ul>
<li>每个内存块可以被分割成更小的内存</li>
<li>每个内存块的<strong>空闲链表</strong>都是<strong>独立</strong>的</li>
</ul></li>
</ul>
<p>节点间的关系如下：</p>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/memory_pool.png"></p>
<h4 id="结构体">2）结构体</h4>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/StructNode.png"></p>
<ul>
<li><strong>内存块结构体</strong>：<code>MemoryBlock</code>
<ul>
<li>包括<strong>内存块</strong>的<strong>所有空闲节点</strong>和<strong>空闲链表</strong>的<strong>头指针</strong>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MemoryBlock</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    MemBlock *pNext;</span><br><span class="line">    FreeNode data[NumofObjects];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><strong>空闲节点结构体</strong>：<code>FreeNode</code>
<ul>
<li>包括<strong>空闲节点</strong>的<strong>数据</strong>和<strong>下一个空闲节点</strong>的<strong>指针</strong>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FreeNode</span> &#123;</span></span><br><span class="line">    FreeNode* pNext;</span><br><span class="line">    <span class="keyword">char</span> data[ObjectSize];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="tcmlloc内存池">4.3 tcmlloc内存池</h2>
<p>tcmalloc 是 Google
开发的内存分配器，在<strong>多线程</strong>场景下性能表现比<strong>malloc</strong>更好。</p>
<p>主要表现在<strong>tcmalloc</strong>会为每个单独的线程申请一块<strong>独享内存空间</strong>，在线程级实现了缓存，使得用户在申请内存时大多情况下是<strong>无锁内存分配</strong>。</p>
<h3 id="tcmalloc的架构">4.3.1 tcmalloc的架构</h3>
<p><strong>tcmalloc</strong>的架构在应用层由上至下主要包括：多个<strong>Thread-cache线程缓存</strong>、一个<strong>Central-cache中央缓存</strong>和一个<strong>Page-cache页缓存</strong>三部分。</p>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/tcmalloc.png"></p>
<ul>
<li><strong>Thread-cache线程缓存</strong>：每个线程都有一个<strong>线程缓存</strong>，用于存储<strong>小块内存</strong>，线程在申请内存时优先从<strong>线程缓存</strong>中申请，如果<strong>线程缓存</strong>中没有内存，那么再从<strong>中央缓存</strong>中申请。
<ul>
<li>由于<strong>线程缓存</strong>是<strong>独享</strong>的，因此<strong>线程缓存</strong>是<strong>无锁</strong>的。</li>
</ul></li>
<li><strong>Central-cache中央缓存</strong>：用于存储<strong>大块内存</strong>，<strong>线程缓存</strong>中没有内存时会从<strong>中央缓存</strong>中申请。
<ul>
<li><strong>中央缓存</strong>是<strong>共享</strong>的，因此需要<strong>加锁</strong>。</li>
<li>但是<strong>tcmalloc</strong>设计中，用<strong>哈希桶</strong>来减少<strong>锁竞争</strong>，每个<strong>哈希桶</strong>对应一个<strong>锁</strong>，因此<strong>锁竞争</strong>的概率会降低。</li>
</ul></li>
<li><strong>Page-cache页缓存</strong>：用于存储<strong>大块内存</strong>，<strong>中央缓存</strong>中没有内存时会从<strong>页缓存</strong>中申请。
<ul>
<li><strong>页缓存</strong>是<strong>共享</strong>的，且为串行方式，每次仅有一个线程可以访问，因此<strong>页缓存</strong>是<strong>有锁</strong>的。</li>
</ul></li>
</ul>
<h3 id="tcmalloc的性能优化">4.3.2 tcmalloc的性能优化</h3>
<h4 id="效率优化">1）效率优化</h4>
<p><strong>查找时间优化</strong></p>
<p>为了减少<strong>查找合适内存块的时间</strong>，<strong>tcmalloc</strong>采用了<strong>哈希桶</strong>的方式来设计内存块的分割：</p>
<p>前面讲到分割一块<strong>内存块</strong>是<strong>线性</strong>的，而且首次分割是等值的。而<strong>tcmalloc</strong>通过<strong>空间换时间</strong>的方式，将<strong>内存块</strong>分割成<strong>不同大小</strong>的内存块，然后将这些内存块放到<strong>哈希桶</strong>中，这样在分配内存时就可以<strong>直接按照对应大小找到合适的内存块</strong>，而不需要<strong>线性查找</strong>。</p>
<p>这里大小不同是按照<strong>2的幂次</strong>来分割的，如<code>16</code>、<code>32</code>、<code>64</code>等。</p>
<p><img src="/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/hashCache.png"></p>
<p><strong>多线程竞争优化</strong></p>
<ul>
<li><strong>线程缓存</strong>独享的无锁机制</li>
<li><strong>中央缓存</strong>采用<strong>哈希桶</strong>来减少<strong>锁竞争</strong>（多线程访问同一个哈希桶的概率降低）</li>
<li><strong>加锁</strong>使用更高效的<strong>自旋锁</strong>（自旋锁减少上下文切换、持锁时间短）</li>
</ul>
<h4 id="减少内存碎片">2）减少内存碎片</h4>
<p><code>central cache</code>释放回一个span，则依次寻找<code>page cache</code>中span所管理的页号的前后页号的页有没有空闲，看是否可以<strong>合并</strong>，如果合并继续向前寻找。这样就可以将切小的内存合并收缩成大的span，减少内存碎片。</p>
<h3 id="tcmalloc的缺点">4.3.3 tcmalloc的缺点</h3>
<p><strong>所需内存较大</strong>的服务时，独享<code>Thread-cache</code>保守的小内存空间会失去意义，这种情况下当请求量上来，锁冲突严重，CPU使用率将指数暴增。</p>
<p>实际生成环境我们可以选择用<strong>jemalloc</strong>。</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/m0_62782700/article/details/135443352?spm=1001.2014.3001.5502">【项目】九万字手把手教你写高并发内存池（化简版tcmalloc）</a></p>
<p>参考：<a href="https://blog.csdn.net/K346K346/article/details/49538975?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%2249538975%22%2C%22source%22%3A%22m0_46220956%22%7D">C++
内存池介绍与经典内存池的实现</a></p>
</blockquote>
]]></content>
      <categories>
        <category>C++知识点</category>
      </categories>
  </entry>
  <entry>
    <title>DELL系统重装教程</title>
    <url>/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>重装系统记得把<strong>重要文件备份</strong>，建议tb买个便宜的号备份到百度网盘，虽然一般重装只有C盘文件会全部被覆盖，不影响DEF盘，但是把重要文件都备份好总是没错的；</p>
<p>写个txt文件记录<strong>需要下载的软件</strong>，便于重装系统后下载软件，生产力软件（VScode、hexo博客搭建等）要记录下来，真的对以后重新安装软件的环境配置很有用，能节省很多时间！</p>
<p>本文主要针对电脑可以使用下，重装系统清理C盘的情况。</p>
<h1 id="系统重装">系统重装</h1>
<h2 id="一重装前软件下载">一、重装前软件下载</h2>
<ul>
<li>软件下载步骤主要是为了制作系统U盘，因此如果电脑无法正常使用，本步骤可以用其他电脑完成。</li>
<li>本步骤需要准备一个U盘，注意安装系统到U盘会格式化U盘，因此需要提前备份好U盘。</li>
<li>完成该步骤将得到一个系统盘，因此只要不删除U盘内的系统，以后重装系统可以直接跳过一步骤，从二开始。</li>
</ul>
<h3 id="下载系统到电脑">1.下载系统到电脑</h3>
<p>用迅雷下载下面的种子到电脑中，得到win10系统的iso镜像文件</p>
<pre><code>magnet:?xt=urn:btih:5C66F9BE1E46D0D4F7EC418D54C3A3FB03679D6D&amp;dn=zh-cn_windows_10_business_editions_version_21h1_updated_sep_2021_x64_dvd_023d42d3.iso&amp;xl=5709488128</code></pre>
<h3 id="下载系统到u盘会将u盘格式化">2.下载系统到U盘（会将U盘格式化）</h3>
<ul>
<li><p>用下面链接将<a href="http://rufus.ie/zh/">rufus</a>软件下载到电脑中</p></li>
<li><p>按win + R，然后输入命令diskmgmt.msc并点击回车键</p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/1.png" width="80%" height="80%"></p>
<p>得到<strong>磁盘管理</strong>的界面，将界面截图下来备用，便于重装时系统的分区</p>
<p>在磁盘管理下面的磁盘0处<strong>右键-&gt;卷</strong>截图该页面备用</p>
<p>（请确定本机的系统是装在C盘的）</p></li>
<li><p><strong>插入U盘</strong></p></li>
<li><p>先把杀毒软件关了，避免误杀，然后打开双击下载好的rufus，在rufus界面中完成剩下的设置选择</p>
<ul>
<li><p><strong>设备</strong>：选择你的U盘</p></li>
<li><p><strong>引导类型选择</strong>：点击选择按钮选择1中得到的iso镜像文件</p></li>
<li><p><strong>镜像选项</strong>：标准Windows安装</p></li>
<li><p><strong>分区类型</strong>：GPT</p></li>
<li><p><strong>目标系统类型</strong>：UEFI（非CSM）</p></li>
<li><p><strong>卷标</strong>：默认就行</p></li>
<li><p><strong>文件系统</strong>：NTFS</p></li>
<li><p><strong>簇大小</strong>：选带默认的那个</p></li>
<li><p>上述步骤最后在Rufus中表现如下图所示：</p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/5.png" width="80%" height="80%"></p></li>
</ul></li>
<li><p>rufus设置完成后点击<strong>开始</strong>，需要等待挺久时间的，等待到100%后系统将变成对应的Win10系统U盘，同时该步骤会把U盘格式化。</p></li>
</ul>
<h2 id="二重装系统">二、重装系统</h2>
<ul>
<li><p><strong>插入U盘</strong></p></li>
<li><p>桌面搜索打开<strong>Windows更新设置</strong>界面，选<strong>恢复</strong>，点击<strong>立即重新启动</strong>按钮</p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/7.png" width="80%" height="80%"></p></li>
<li><p>选择<strong>疑难解答</strong>-&gt;<strong>高级选项</strong>-&gt;<strong>UEFI固件设置</strong>-&gt;<strong>重启</strong>，得到下面的界面</p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/12.jpg"></p></li>
<li><p>在得到的页面中进行下述操作</p>
<ul>
<li><p>选Advanced Boot Options，取消勾选Enable Legacy Option
ROMs</p></li>
<li><p>Secure Boot Enable，选择Enabled（Secure Boot Enable在Secure
Boot里面）</p></li>
<li><p>保存后退出重启，重启后在黑色界面时疯狂按f12（不同电脑品牌需要按的快捷键不同，可百度查询需要按得快捷键）</p></li>
<li><p>得到如下界面</p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/13.jpg"></p></li>
<li><p>UEFI
BOOT选第二项（既选择U盘进入，我这里是uefi：sandisk），然后按enter进入</p></li>
<li><p>得到如下界面</p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/15.jpg" width="100%" height="100%"></p></li>
<li><p>点击<strong>下一步</strong>-&gt;<strong>现在安装</strong>-&gt;<strong>专业版</strong>-&gt;<strong>下一步</strong>-&gt;<strong>自定义：仅安装Windows(高级)(C)</strong></p></li>
</ul></li>
<li><p>在得到的界面中进行分区操作（确保重要文件已拷贝）</p>
<ul>
<li><p>删除下列分区(逐个点击后按下方的<strong>删除</strong>按钮)</p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/19.png" width="80%" height="80%"></p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/20.png" width="80%" height="80%"></p></li>
<li><p>点击<strong>驱动器 1
未分配的空间</strong>，下方选择<strong>新建</strong>按钮</p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/23.jpg" width="80%" height="80%"></p></li>
<li><p>大小调整到最大，然后点击上图的应用，出现个弹窗点确定就行</p></li>
<li><p>分区那往下滑<strong>选择驱动器 1
分区3</strong>，也就是主分区类型的分区，点击后按下一步，系统开始进行重新安装，等待一会即可</p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/25.jpg" width="80%" height="80%"></p></li>
</ul></li>
<li><p>最后安装完后微软还会继续采集信息，这部分按自己的需求设置就行</p></li>
</ul>
<h2 id="三激活系统">三、激活系统</h2>
<ul>
<li><p>装完进入桌面后，用win10的更新功能安装驱动</p>
<p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/27.png" width="80%" height="80%"></p></li>
<li><p>用下面链接下载软件进行Win10的激活</p>
<p><a href="https://mp.weixin.qq.com/s/TkAiq6naVPGBmQZU4PuPFg">激活Win10</a></p>
<p>链接：https://pan.baidu.com/s/1s4yF2aSmuAaaqxrWSRWE9g
提取码：<code>5l32</code></p></li>
<li><p>自带的office的软件不太全，你想重装可以从这个网站下</p>
<p><a href="https://msdn.itellyou.cn/">Office重装</a></p>
<p>office的激活同理可以用Win10的激活软件进行激活</p></li>
</ul>
<h2 id="四windows一些奇奇怪怪的问题解决">四、Windows一些奇奇怪怪的问题解决</h2>
<ul>
<li><p>USB口损坏导致电涌过大</p>
<ul>
<li><p><img src="/2022/02/03/DELL%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85%E6%95%99%E7%A8%8B/USBError.png"></p></li>
<li><p>如果老是弹出USB电流过大的提示，可以进入<code>设置</code>-&gt;<code>设备</code>-&gt;<code>USB</code>，然后把<code>如果在连接到USB设备时出现问题，请通知我</code>的选项关掉，这样就不会再频繁弹出<code>USB电流过大</code>的提示了。</p></li>
<li><p>但是上面的方法只是解决了提示的问题，如果USB口真的损坏了，那么还是需要维修的。最省钱的方法就是把坏掉的USB口用绝缘胶带封住，强制禁用这个USB口就行。</p></li>
</ul></li>
</ul>
<h1 id="结语">结语</h1>
<p>至此，Win10的安装就全部完成了，正常来说除了C盘外其它盘的文件都还在，可以开始重新安装自己需要的软件了，该重装教程还有不完善的地方，后续会继续补充改正~</p>
<p>本文涉及的软件资源可以从百度网盘获取</p>
<ul>
<li>链接：https://pan.baidu.com/s/1AfsgEPr0I22hDr6yQZ1wUg
提取码：<code>i7g5</code></li>
</ul>
]]></content>
      <categories>
        <category>重装-环境配置-计算机</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议的迭代（HTTP：应用层）</title>
    <url>/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/</url>
    <content><![CDATA[<h2 id="一从浏览器输入url到页面显示的过程">一、从浏览器输入URL到页面显示的过程</h2>
<h3 id="url到显示的全过程">1.1 URL到显示的全过程</h3>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/URL_to_display.png"></p>
<ul>
<li><strong>URL解析</strong>：浏览器解析URL，得到服务器的域名（www.baidu.com）和端口号，以及请求资源的路径
<ul>
<li>在<strong>缓存</strong>中<strong>找得到</strong>该域名对应的IP地址：直接访问服务器发送请求</li>
<li>在<strong>缓存</strong>中<strong>找不得到</strong>该域名：发起<strong>DNS迭代查询</strong>，得到服务器的IP地址</li>
</ul></li>
<li><strong>DNS域名解析</strong>：<strong>客户端</strong>发起<strong>迭代查询</strong>；<strong>DNS服务器</strong>之间通过<strong>递归查询</strong>得到域名对应的IP地址
<ul>
<li>浏览器 ---&gt; 本地DNS</li>
<li>本地DNS ---&gt; 根DNS ---&gt;
向本地DNS<strong>返回顶级DNS</strong>的IP地址</li>
<li>本地DNS ---&gt; 顶级DNS ---&gt;
向本地DNS<strong>返回权威DNS</strong>的IP地址</li>
<li>本地DNS ---&gt; 权威DNS ---&gt;
向本地DNS<strong>返回域名对应的IP地址</strong></li>
</ul></li>
<li><strong>客户端发起TCP连接</strong>：三次握手</li>
<li><strong>客户端发送HTTP请求</strong>：请求报文</li>
<li><strong>服务器发送HTTP响应</strong>：响应<strong>报文</strong>与<strong>状态码</strong></li>
<li><strong>浏览器解析渲染页面</strong>：解析HTML、CSS、JS等文件</li>
<li><strong>客户端发起断开TCP连接</strong>：四次挥手</li>
</ul>
<h3 id="dns域名解析">1.2 DNS域名解析</h3>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/DNS.png"></p>
<ul>
<li><strong>DNS域名解析</strong>：<strong>客户端</strong>发起<strong>迭代查询</strong>；<strong>DNS服务器</strong>之间通过<strong>递归查询</strong>得到域名对应的IP地址
<ul>
<li>浏览器 ---&gt; 本地DNS</li>
<li>本地DNS ---&gt; 根DNS ---&gt;
向本地DNS<strong>返回顶级DNS</strong>的IP地址</li>
<li>本地DNS ---&gt; 顶级DNS ---&gt;
向本地DNS<strong>返回权威DNS</strong>的IP地址</li>
<li>本地DNS ---&gt; 权威DNS ---&gt;
向本地DNS<strong>返回域名对应的IP地址</strong></li>
</ul></li>
</ul>
<p>DNS域名解析过程如下：</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/DNS2.png"></p>
<p><strong>DNS可能出现的一些网络攻击问题：</strong></p>
<ul>
<li><strong>DNS劫持</strong>：黑客劫持DNS服务器并<strong>篡改解析结果</strong>，使用户访问的网站<strong>跳转到恶意网站</strong>
<ul>
<li>解决：换个<strong>DNS服务器</strong>，躲过被劫持的<strong>DNS服务器</strong></li>
</ul></li>
<li><strong>DNS污染</strong>：黑客监听某些DNS查询，并伪装成目标服务器返回虚假结果（禁用google就是通过DNS污染实现的）
<ul>
<li>解决：直接在本机绑定hosts绕过DNS，或者更换成没被污染的DNS服务器</li>
</ul></li>
</ul>
<h3 id="正向代理和反向代理">1.3 正向代理和反向代理</h3>
<ul>
<li><strong>正向代理</strong>：代理客户端，<strong>向服务端隐藏客户端</strong>的真实IP地址
<ul>
<li>如平时通过VPN访问外网使用的技术就是正向代理</li>
</ul></li>
<li><strong>反向代理</strong>：代理服务器，<strong>向客户端隐藏服务器</strong>的真实IP地址
<ul>
<li>如Nginx就是一个反向代理服务器</li>
</ul></li>
</ul>
<h2 id="二http协议的特点">二、HTTP协议的特点</h2>
<h3 id="web构建的技术">2.1 Web构建的技术</h3>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/Web_build.png"></p>
<h3 id="http1http1.0与http1.1">2.2 HTTP1：HTTP1.0与HTTP1.1</h3>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/HTTP1.png"></p>
<h3 id="http2">2.3 HTTP2</h3>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/HTTP2.png"></p>
<p>HTTP2的很大特点是采用了<strong>stream</strong>技术，可以<strong>同时发送多个请求</strong>，并且<strong>不需要按照顺序来发送</strong>，这样可以<strong>提高传输效率</strong>，并且<strong>减少延迟</strong>。</p>
<p>stream中一个TCP连接可以有多个stream，每个stream都有一个唯一的标识符;一个stream中可以有多个message；每个message可以有多个frame。frame是HTTP2的最小单位。</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/HTTP2_stream.png"></p>
<h3 id="http3">2.4 HTTP3</h3>
<p>HTTP3是基于UDP的，使用了<strong>QUIC</strong>协议，可以<strong>减少延迟</strong>，并且<strong>提高传输效率</strong>。</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/HTTP3.png"></p>
<h3 id="http1http3的应用层到链路层的区别">2.5
HTTP1~HTTP3的应用层到链路层的区别</h3>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/HTTP1~HTTP3.jpg"></p>
<h2 id="三http缓存">三、HTTP缓存</h2>
<p>客户端中存储缓存副本，<strong>有效的缓存副本</strong>在下一次可以<strong>直接使用</strong>而<strong>不需要再次请求服务器</strong></p>
<p>HTTP实现缓存的方式有：强制缓存和协商缓存</p>
<ul>
<li>强缓存：通过<strong>Cache-Control</strong>和<strong>Expires</strong>字段设置<strong>缓存时间</strong>，当缓存时间<strong>未过期</strong>时，直接使用缓存，<strong>不需要与服务器通信</strong></li>
<li>协商缓存：通过<strong>Last-Modified</strong>和<strong>Etag</strong>字段，向服务器<strong>发送请求</strong>，服务器<strong>判断资源是否能直接使用缓存</strong></li>
</ul>
<p>HTTP实现缓存的方式如下：</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/HTTP_cache.png"></p>
<p>其中HTTP协商缓存的流程图如下：</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/HTTP_cache_2.jpg"></p>
<h2 id="四https">四、HTTPS</h2>
<p>HTTPS是在HTTP的基础上加入了<strong>SSL/TLS</strong>协议，可以<strong>保证数据传输的安全性</strong>。具有数据加密、校验、身份认证等特点。</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/HTTPS.png"></p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/SSL.png"></p>
<h3 id="对称加密">4.1 对称加密</h3>
<p>对称加密是指<strong>加密</strong>和<strong>解密</strong>使用的是<strong>同一个密钥</strong>，加密和解密的速度非常快，但是密钥的安全是一个问题。</p>
<p>密钥安全问题是指：<strong>密钥的传输</strong>和<strong>存储</strong>是一个问题，如果<strong>密钥被泄露</strong>，那么加密的数据也就不安全了。</p>
<p>所以如果要安全使用对称加密，我们需要有一个保证密钥被安全传输到双方的措施，这个措施我们后面会讲，就是通过<strong>非对称加密</strong>对密钥进行加密，然后将加密后的密钥传输给对方，这样才能保证后续通信过程中的<strong>密钥安全</strong>。</p>
<h3 id="非对称加密rsa">4.2 非对称加密RSA</h3>
<p>非对称加密是指加密和解密使用的是<strong>不同的密钥</strong>，加密使用的是<strong>公钥</strong>，解密使用的是<strong>私钥</strong>。</p>
<h4 id="rsa加密过程公钥对密文进行加密如下">RSA加密过程（公钥对密文进行加密）如下：</h4>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/RSA_public.png"></p>
<p>也就是说RSA加密是对明文进行<code>E</code>次方后求对<code>N</code>的余数，得到密文。</p>
<p>从公式可以知道，<code>E</code>和<code>N</code>是公钥，所有人都可以获得，并通过公钥对信息进行加密，所以我们用<code>(E,N)</code>来表示公钥。</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/RSA_public_key.png"></p>
<p>神奇的点在于，只有拥有对应<strong>私钥</strong>的才能对密文进行解密，得到明文。（一般私钥都在服务端处保存）</p>
<h4 id="rsa解密过程私钥对密文进行解密如下">RSA解密过程（私钥对密文进行解密）如下：</h4>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/RSA_private.png"></p>
<p>也就是说RSA解密是对密文进行<code>D</code>次方后求对<code>N</code>的余数，得到明文，所以我们用<code>(D,N)</code>来表示私钥。</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/RSA_private_key.png"></p>
<h4 id="生成密钥对的过程">生成密钥对的过程</h4>
<p>生成密钥对需要求<code>N</code>、<code>L</code>、<code>E</code>、<code>D</code>的值</p>
<ul>
<li>求<code>N</code>的值：<code>N</code>是两个大质数<code>p</code>和<code>1</code>的乘积，当<code>p</code>和<code>q</code>都是大质数时，<code>N</code>的值很难被分解，也就是基本不可能从公钥<code>N</code>的值反推出<code>p</code>和<code>q</code>的值（所以不能反推出私钥的值）
<ul>
<li><code>N = p * q</code></li>
</ul></li>
<li>求<code>L</code>的值：<code>L</code>是<code>p-1</code>和<code>q-1</code>的最小公倍数
<ul>
<li><code>L = LCM(p-1, q-1)</code></li>
</ul></li>
<li>求<code>E</code>的值：<code>E</code>是一个小于<code>L</code>的数，且<code>E</code>和<code>L</code>的最大公约数为1</li>
<li>求<code>D</code>的值：<code>D</code>是<code>E</code>的逆元，即<code>E * D % L = 1</code></li>
</ul>
<p>求完之后，我们就得到了公钥<code>(E,N)</code>和私钥<code>(D,N)</code>。</p>
<p><strong>我们只需要记得私钥<code>D</code>的值是几乎不可能被通过公钥反推回来的就行，且通过公钥加密的密文只有对应的私钥才能解密。</strong></p>
<p>RSA神奇的点就在于，<strong>私钥</strong>可以<strong>解密公钥</strong>加密的密文，而<strong>公钥</strong>可以解密<strong>私钥</strong>加密的密文。但是由于公钥是公开的，所以我们一般不用私钥进行加密（不然所有拥有公钥的都能解密数据了），只有在<strong>数字签名</strong>的时候才会用到私钥进行加密。</p>
<h4 id="采用rsa除了加密外还可以用于数字签名">采用RSA除了加密外，还可以用于数字签名</h4>
<p>数字签名其实是加密的反过程，是为了<strong>验证服务端的身份</strong>（也就是说数据是不是从服务端发送过来的）</p>
<p>最主要的过程是：<strong>服务端</strong>用<strong>私钥</strong>对数据进行<strong>加密</strong>（这里说加密其实不准确，我们可以称为<strong>签名</strong>），然后<strong>客户端</strong>用<strong>公钥</strong>对数据进行<strong>解密</strong>（这里说法也不准确，应该称为<strong>验证签名</strong>），如果解密后的数据和原数据一样（通过同步送过来的<strong>哈希值</strong>来判断是否一样），那么就说明数据是从服务端发送过来的。</p>
<p>数字签名的过程如下：</p>
<ul>
<li>服务端用私钥对<strong>原始消息的哈希值</strong>进行签名</li>
<li>发送给客户端：<strong>原始消息</strong>和<strong>签名</strong></li>
<li>客户端用公钥对<strong>签名</strong>进行解密，并计算同步发送过来的<strong>原始消息的哈希值</strong>，如果<strong>解密后的哈希值</strong>和<strong>同步发送过来的哈希值</strong>一样，那么就说明数据是从服务端发送过来的</li>
</ul>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/RSA_sign.jpg"></p>
<h3 id="https采用的混合加密模式">4.3 HTTPS采用的混合加密模式</h3>
<p>HTTPS采用的是<strong>混合加密模式</strong>，即<strong>对称加密</strong>和<strong>非对称加密</strong>结合使用。</p>
<ul>
<li><strong>非对称加密</strong>：用于<strong>传输对称加密的密钥</strong>
<ul>
<li>服务端发送自己的<strong>数字证书</strong>给客户端，请求<strong>身份认证</strong></li>
<li>客户端用CA认证过的服务端的<strong>公钥</strong>对服务端的<strong>数字证书</strong>进行验证（防止中间人发送伪造的证书来伪造服务端）</li>
<li>客户端验证通过后用<strong>公钥</strong>对自己随机生成的<strong>对称加密的密钥</strong>进行加密，然后发送给服务端</li>
<li>由于只有服务端有<strong>私钥</strong>，所以只有服务端能解密得到<strong>对称加密的密钥</strong>，所以此时只有服务端能解开并得到<strong>对称加密的密钥</strong></li>
</ul></li>
<li><strong>对称加密</strong>：客户端和服务端验证完并获取安全的<strong>对称加密的密钥</strong>后，就用于后续的<strong>传输数据</strong></li>
</ul>
<p>为什么要采用混合加密模式呢？</p>
<p>因为<strong>对称加密</strong>的速度很快，但是<strong>密钥安全</strong>是个问题，所以我们首次建立TLS连接的时候，采用<strong>非对称加密</strong>用于<strong>传输对称加密的密钥</strong>，可以确保<strong>密钥的安全</strong>。然后后面正常通信的时候使用这个<strong>安全的密钥</strong>，就可以保证在安全情况下进行快速通信。</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/RSA_mix.jpg"></p>
<h3 id="https的数字证书">4.4 HTTPS的数字证书</h3>
<p>数字证书是由权威的CA机构颁发的，用于<strong>证明服务端身份</strong>的一种证书。</p>
<p>如果没有权威公开的CA机构颁发的数字证书，那么就会出现<strong>中间人攻击</strong>，即中间人有自己的公钥和私钥，然后伪造了一个数字证书，客户端用伪造的公钥验证通过后，就会误认为是服务端发送的数据，这样就会出现中间人攻击<strong>安全问题</strong>。</p>
<p>而如果通过<strong>CA的私钥对服务器的公钥</strong>进行数字签名，那么这个证书就是只能由权威的CA公钥进行解密验证，所以客户端可以用CA的公钥验证服务端发来的数字证书，验证通过后才会从发来的数据中获取服务端的<strong>公钥</strong>。SSL/TLS建立安全连接的过程如下：</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/RSA_certificate.jpg"></p>
<p>CA能确保数据安全的图解：</p>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/RSA_certificate_2.png"></p>
<h1 id="五rpc">五、RPC</h1>
<h2 id="rpc的通信流程">5.1 RPC的通信流程</h2>
<p>RPC是一种<strong>远程调用</strong>框架，目的是使得<strong>调用远程服务</strong>和<strong>调用本地</strong>一样简单，而开发者更专注于业务开发，不需要考虑<strong>网络编程</strong>等细节。</p>
<p>RPC实现的主要流程为：</p>
<p>前提：服务提供端向<strong>注册中心</strong>注册接口服务</p>
<ul>
<li><strong>注册中心</strong>根据<strong>服务名</strong>找到<strong>服务提供端</strong>的<strong>IP地址</strong>和<strong>端口号</strong></li>
<li><strong>Netty客户端</strong>将数据<strong>序列化</strong>成<strong>二进制格式</strong>然后请求网络调用</li>
<li><strong>服务端</strong>在TCP通道中接收数据，将<strong>二进制数据</strong>反序列后分割成<strong>接口地址和参数对象</strong>，然后通过<strong>反射</strong>找到接口然后执行调用</li>
<li><strong>服务端</strong>处理完接口后将结果<strong>序列化</strong>成<strong>二进制数据</strong>返回给<strong>Netty客户端</strong></li>
<li><strong>Netty客户端</strong>接收到<strong>二进制数据</strong>后将数据<strong>反序列化</strong>成<strong>结果对象</strong></li>
</ul>
<p><img src="/2024/03/09/HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%AD%E4%BB%A3/RPCStructure.png" width="70%"></p>
<h2 id="rpc与http的区别">5.2 RPC与HTTP的区别</h2>
<ul>
<li><p>1）RPC和HTTP都是基于TCP封装的协议</p></li>
<li><p>2）<strong>RPC适用于C/S模式</strong>，比如PC上用的<strong>电脑管家等软件、公司内部微服务通信</strong>只需要跟自家的服务器通信；而<strong>HTTP适用于B/S模式</strong>，比如<strong>浏览器</strong>需要和<strong>其他公司的服务器</strong>通信，这时候就需要一个统一的协议也就是HTTP了。</p></li>
<li><p>3）<strong>RPC域名获取</strong>时一般都是有<strong>专门的中间服务</strong>去获取，而<strong>HTTP</strong>更统一于使用<strong>DNS</strong>去获取域名</p></li>
<li><p>4）<strong>RPC</strong>跟<strong>HTTP1.1</strong>一样保持的长连接，此外，<strong>RPC</strong>实现<strong>连接池</strong>来复用连接（不少编程语言在HTTP中也会用连接池复用）</p></li>
<li><p>5）<strong>RPC</strong>一般通过Protobuf实现序列化，而<strong>HTTP</strong>一般通过JSON实现序列化，Protobuf序列化后的数据量更小，传输效率更高</p></li>
</ul>
<p>因此不难看出，RPC定制化程度比HTTP更高</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>KMP算法</title>
    <url>/2024/04/29/KMP%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>最主要是掌握KMP算法的<strong>next数组</strong>的构建过程，具体的解法看参考的文章，讲得很好</p>
</blockquote>
<h1 id="一kmp算法next构建">一、KMP算法Next构建</h1>
<p><img src="/2024/04/29/KMP%E7%AE%97%E6%B3%95/createNext.png" width="70%"></p>
<h1 id="二代码实现c">二、代码实现（C++）</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;next, string templateStr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//后缀结尾</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//前缀结尾</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> str_size = templateStr.<span class="built_in">size</span>();</span><br><span class="line">	next = vector&lt;<span class="keyword">int</span>&gt;(str_size);</span><br><span class="line">	next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; str_size; ++i) &#123;</span><br><span class="line">		<span class="comment">//前缀跟后缀不相等的话，说明得往前查找</span></span><br><span class="line">		<span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; templateStr[j] != templateStr[i]) &#123;</span><br><span class="line">			j = next[j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//前缀跟后缀相等的话，说明可以往后移一位了</span></span><br><span class="line">		<span class="keyword">if</span> (templateStr[j] == templateStr[i]) &#123;</span><br><span class="line">			++j;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//构建当前后缀的最长前缀</span></span><br><span class="line">		next[i] = j;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; next, string templateStr, string searchStr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">//searchStr的</span></span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//templateStr的</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (; i &lt; searchStr.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="comment">//跟模板不相等则跳转到模板对应的位置</span></span><br><span class="line">		<span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; templateStr[j] != searchStr[i]) &#123;</span><br><span class="line">			j = next[j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//跟模板相等则模板指针加一，说明可以对下一个字符进行判断</span></span><br><span class="line">		<span class="keyword">if</span> (templateStr[j] == searchStr[i]) &#123;</span><br><span class="line">			++j;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//已经找全了（模板指针指向末尾）</span></span><br><span class="line">		<span class="keyword">if</span> (j == templateStr.<span class="built_in">size</span>()) <span class="keyword">return</span> i-templateStr.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//没找到</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三测试">三、测试</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	vector&lt;<span class="keyword">int</span>&gt; next;</span><br><span class="line">	string s = <span class="string">&quot;ababaca&quot;</span>;</span><br><span class="line"></span><br><span class="line">	myKMP kmp;</span><br><span class="line">	kmp.<span class="built_in">getNext</span>(next, s);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		cout &lt;&lt; next[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; kmp.<span class="built_in">KMP</span>(next, s, <span class="string">&quot;bacbababadababacambabacaddababacasdsd&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四相关leetcode题目">四、相关leetcode题目</h1>
<ul>
<li><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">28.
实现 strStr()</a></li>
<li><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">459.
重复的子字符串</a></li>
</ul>
<h1 id="总结">总结</h1>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/lijingran/p/8619711.html">字符串匹配KMP算法的讲解C++</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>LOVE_打火机与公主裙</title>
    <url>/2022/11/15/LOVE/</url>
    <content><![CDATA[
<!DOCTYPE html>
<!-- saved from url=(0062)file:///D:/OneDrive/%E6%A1%8C%E9%9D%A2/%E7%88%B1%E5%BF%83.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
	<title></title>
<style>
  *{
    padding: 0;
    margin: 0;
  }
  html, body {
  height: 100%;
  padding: 0;
  margin: 0;
  background: #000;
}
canvas {
  position: absolute;
  width: 100%;
  height: 100%;
}
.aa{
  position: fixed;
  left: 50%;
  bottom: 10px;
  color: #ccc
}
</style></head>

<body>
    <canvas id="pinkboard" width="989" height="805"></canvas>
 
    <script>
       
/*
 * Settings
 */
var settings = {
  particles: {
    length:   500, // maximum amount of particles
    duration:   2, // particle duration in sec
    velocity: 100, // particle velocity in pixels/sec
    effect: -0.75, // play with this for a nice effect
    size:      30, // particle size in pixels
  },
};
 
/*
 * RequestAnimationFrame polyfill by Erik M?ller
 */
(function(){var b=0;var c=["ms","moz","webkit","o"];for(var a=0;a<c.length&&!window.requestAnimationFrame;++a){window.requestAnimationFrame=window[c[a]+"RequestAnimationFrame"];window.cancelAnimationFrame=window[c[a]+"CancelAnimationFrame"]||window[c[a]+"CancelRequestAnimationFrame"]}if(!window.requestAnimationFrame){window.requestAnimationFrame=function(h,e){var d=new Date().getTime();var f=Math.max(0,16-(d-b));var g=window.setTimeout(function(){h(d+f)},f);b=d+f;return g}}if(!window.cancelAnimationFrame){window.cancelAnimationFrame=function(d){clearTimeout(d)}}}());
 
/*
 * Point class
 */
var Point = (function() {
  function Point(x, y) {
    this.x = (typeof x !== 'undefined') ? x : 0;
    this.y = (typeof y !== 'undefined') ? y : 0;
  }
  Point.prototype.clone = function() {
    return new Point(this.x, this.y);
  };
  Point.prototype.length = function(length) {
    if (typeof length == 'undefined')
      return Math.sqrt(this.x * this.x + this.y * this.y);
    this.normalize();
    this.x *= length;
    this.y *= length;
    return this;
  };
  Point.prototype.normalize = function() {
    var length = this.length();
    this.x /= length;
    this.y /= length;
    return this;
  };
  return Point;
})();
 
/*
 * Particle class
 */
var Particle = (function() {
  function Particle() {
    this.position = new Point();
    this.velocity = new Point();
    this.acceleration = new Point();
    this.age = 0;
  }
  Particle.prototype.initialize = function(x, y, dx, dy) {
    this.position.x = x;
    this.position.y = y;
    this.velocity.x = dx;
    this.velocity.y = dy;
    this.acceleration.x = dx * settings.particles.effect;
    this.acceleration.y = dy * settings.particles.effect;
    this.age = 0;
  };
  Particle.prototype.update = function(deltaTime) {
    this.position.x += this.velocity.x * deltaTime;
    this.position.y += this.velocity.y * deltaTime;
    this.velocity.x += this.acceleration.x * deltaTime;
    this.velocity.y += this.acceleration.y * deltaTime;
    this.age += deltaTime;
  };
  Particle.prototype.draw = function(context, image) {
    function ease(t) {
      return (--t) * t * t + 1;
    }
    var size = image.width * ease(this.age / settings.particles.duration);
    context.globalAlpha = 1 - this.age / settings.particles.duration;
    context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);
  };
  return Particle;
})();
 
/*
 * ParticlePool class
 */
var ParticlePool = (function() {
  var particles,
      firstActive = 0,
      firstFree   = 0,
      duration    = settings.particles.duration;
  
  function ParticlePool(length) {
    // create and populate particle pool
    particles = new Array(length);
    for (var i = 0; i < particles.length; i++)
      particles[i] = new Particle();
  }
  ParticlePool.prototype.add = function(x, y, dx, dy) {
    particles[firstFree].initialize(x, y, dx, dy);
    
    // handle circular queue
    firstFree++;
    if (firstFree   == particles.length) firstFree   = 0;
    if (firstActive == firstFree       ) firstActive++;
    if (firstActive == particles.length) firstActive = 0;
  };
  ParticlePool.prototype.update = function(deltaTime) {
    var i;
    
    // update active particles
    if (firstActive < firstFree) {
      for (i = firstActive; i < firstFree; i++)
        particles[i].update(deltaTime);
    }
    if (firstFree < firstActive) {
      for (i = firstActive; i < particles.length; i++)
        particles[i].update(deltaTime);
      for (i = 0; i < firstFree; i++)
        particles[i].update(deltaTime);
    }
    
    // remove inactive particles
    while (particles[firstActive].age >= duration && firstActive != firstFree) {
      firstActive++;
      if (firstActive == particles.length) firstActive = 0;
    }
    
    
  };
  ParticlePool.prototype.draw = function(context, image) {
    // draw active particles
    if (firstActive < firstFree) {
      for (i = firstActive; i < firstFree; i++)
        particles[i].draw(context, image);
    }
    if (firstFree < firstActive) {
      for (i = firstActive; i < particles.length; i++)
        particles[i].draw(context, image);
      for (i = 0; i < firstFree; i++)
        particles[i].draw(context, image);
    }
  };
  return ParticlePool;
})();
 
/*
 * Putting it all together
 */
(function(canvas) {
  var context = canvas.getContext('2d'),
      particles = new ParticlePool(settings.particles.length),
      particleRate = settings.particles.length / settings.particles.duration, // particles/sec
      time;
  
  // get point on heart with -PI <= t <= PI
  function pointOnHeart(t) {
    return new Point(
      160 * Math.pow(Math.sin(t), 3),
      130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25
    );
  }
  
  // creating the particle image using a dummy canvas
  var image = (function() {
    var canvas  = document.createElement('canvas'),
        context = canvas.getContext('2d');
    canvas.width  = settings.particles.size;
    canvas.height = settings.particles.size;
    // helper function to create the path
    function to(t) {
      var point = pointOnHeart(t);
      point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;
      point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;
      return point;
    }
    // create the path
    context.beginPath();
    var t = -Math.PI;
    var point = to(t);
    context.moveTo(point.x, point.y);
    while (t < Math.PI) {
      t += 0.01; // baby steps!
      point = to(t);
      context.lineTo(point.x, point.y);
    }
    context.closePath();
    // create the fill
    context.fillStyle = '#ea80b0';
    context.fill();
    // create the image
    var image = new Image();
    image.src = canvas.toDataURL();
    return image;
  })();
  
  // render that thing!
  function render() {
    // next animation frame
    requestAnimationFrame(render);
    
    // update time
    var newTime   = new Date().getTime() / 1000,
        deltaTime = newTime - (time || newTime);
    time = newTime;
    
    // clear canvas
    context.clearRect(0, 0, canvas.width, canvas.height);
    
    // create new particles
    var amount = particleRate * deltaTime;
    for (var i = 0; i < amount; i++) {
      var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());
      var dir = pos.clone().length(settings.particles.velocity);
      particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);
    }
    
    // update and draw particles
    particles.update(deltaTime);
    particles.draw(context, image);
  }
  
  // handle (re-)sizing of the canvas
  function onResize() {
    canvas.width  = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
  }
  window.onresize = onResize;
  
  // delay rendering bootstrap
  setTimeout(function() {
    onResize();
    render();
  }, 10);
})(document.getElementById('pinkboard'));
 
 
 
 
    </script>


</body></html>]]></content>
      <tags>
        <tag>杂货铺-休闲</tag>
      </tags>
  </entry>
  <entry>
    <title>Mine-重装系统后软件相关设置</title>
    <url>/2022/12/04/Mine-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="一zotero设置">一、Zotero设置</h1>
<h2 id="恢复文献数据">1.1 恢复文献数据</h2>
<ul>
<li><p>首先拷贝Zotero中<strong>存放Data的路径</strong>中的所有内容到新电脑中（如果是重装系统可忽略），如本人存放于<code>E:\zotero files</code>，需要将该目录下的所有文件拷贝一份</p>
<p><img src="/2022/12/04/Mine-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/papers_local_zotero.png" width="50%" heigh="50%"></p></li>
<li><p>然后打开新下载的zotero软件，依次点击：<code>编辑(E)</code>-&gt;<code>首选项(N)</code>-&gt;<code>高级</code>-&gt;<code>文件和文件夹</code></p></li>
<li><p>点击<code>数据存储位置</code>的<code>自定义</code>选项，填入第一步Data的路径后点击<code>OK</code>，如本人存放于<code>E:\zotero files</code></p>
<p><img src="/2022/12/04/Mine-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/optional.png" width="50%" heigh="50%"></p></li>
<li><p>最后重启zotero软件</p></li>
</ul>
<h2 id="安装插件">1.2 安装插件</h2>
<ul>
<li><p>插件安装方式</p>
<ul>
<li><ol type="1">
<li>先下载相关插件的<code>.spi</code>文件</li>
</ol></li>
<li><ol start="2" type="1">
<li>在zotero软件中点击<code>工具(T)</code>-&gt;<code>插件</code>-&gt;<code>小齿轮</code>-&gt;<code>Install Add-on from file...</code>-&gt;<code>选择对应.spi文件</code>-&gt;<code>Install now</code>-&gt;<code>重启</code></li>
</ol></li>
</ul>
<p><img src="/2022/12/04/Mine-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/zotero_extensions1.png" width="50%" heigh="50%">
<img src="/2022/12/04/Mine-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/zotero_extensions_installnow.png" width="50%" heigh="50%"></p></li>
<li><p><a href="https://zotero-chinese.gitee.io/zotero-plugins/#/">zotero</a>插件镜像网站</p></li>
<li><p><a href="https://github.com/l0o0/jasminum/releases">jasminum</a>插件用于中文文献条目的自动抓取</p>
<ul>
<li>可通过github链接或搜索：https://github.com/l0o0/jasminum/releases</li>
</ul></li>
<li><p><a href="https://github.com/windingwind/zotero-pdf-translate/releases/tag/v0.9.4">pdf-translate</a>插件用于pdf便捷翻译</p>
<ul>
<li>可通过github链接或搜索：https://github.com/windingwind/zotero-pdf-translate/releases/tag/v2.0.3</li>
</ul></li>
</ul>
<h1 id="二浏览器设置">二、浏览器设置</h1>
<h2 id="开启实时字幕翻译功能">2.1 开启实时字幕翻译功能</h2>
<ul>
<li>谷歌：<code>设置</code>-&gt;<code>无障碍</code>-&gt;<code>实时字幕</code></li>
<li>Edge：<code>设置</code>-&gt;<code>辅助功能</code>-&gt;<code>实时字幕</code>（Edge102有该功能，Edge103没有）</li>
</ul>
<h2 id="安装插件-1">2.2 安装插件</h2>
<h1 id="三遇到软件无法被搜索到的情况">三、遇到软件无法被搜索到的情况</h1>
<p>如<code>everything</code>软件无法搜索到</p>
<ul>
<li><p>先在桌面对软件建立桌面快捷键</p></li>
<li><p>将快捷方式复制到<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs</code></p></li>
</ul>
<p>参考自：https://blog.csdn.net/qq_40579464/article/details/105342847</p>
<h1 id="四qt安装">四、QT安装</h1>
<h2 id="配置msvc参考qt编程经验文章的配置方法">4.1
配置MSVC（参考“QT编程经验”文章的配置方法）</h2>
<h2 id="安装qt-creator5.12.6版本">4.2 安装QT Creator5.12.6版本</h2>
<p>参考：https://blog.csdn.net/qq_41453285/article/details/89853671</p>
<h2 id="配置mysql">4.3 配置MySQL</h2>
<p>参考：https://subingwen.cn/qt/sql-driver/ &amp;
https://zhuanlan.zhihu.com/p/188416607</p>
<pre><code>- LIBS += &quot;D:\Project\Wireless_communication_software\mysql_v8.0.32\MySQL Server 8.0\lib\libmysql.lib&quot;
- INCLUDEPATH += &quot;D:\Project\Wireless_communication_software\mysql_v8.0.32\MySQL Server 8.0\include&quot;
- DEPENDPATH += &quot;D:\Project\Wireless_communication_software\mysql_v8.0.32\MySQL Server 8.0\include&quot;</code></pre>
<h2 id="nivicate破解版安装">4.4 Nivicate破解版安装</h2>
<ul>
<li><a href="https://www.cnblogs.com/kkdaj/p/16260681.html">NavicatPremium16破解</a></li>
</ul>
<h1 id="五vscode相关编译器配置">五、Vscode相关编译器配置</h1>
<h2 id="cc配置">5.1 C/C++配置</h2>
<ul>
<li>参考：<a href="https://zhuanlan.zhihu.com/p/610895870">用vscode优雅配置c/c++环境！</a>
<ul>
<li>下载好vscode后从<code>3</code>部分下载MinGW开始进行配置</li>
<li><a href="https://blog.csdn.net/woxingzou/article/details/113746142）：https://pan.baidu.com/s/1ylj4YG7CBtv4C_RtVEtZ9Q">MinGW下载安装</a>
验证码：ftk5</li>
</ul></li>
<li>下载完MinGW后，配置VScode的部分参考<a href="https://zhuanlan.zhihu.com/p/87864677">VSCode配置C/C++环境</a>的第<code>3</code>部分</li>
<li>C++在vscode中运行是否每次都需要配置环境：https://www.zhihu.com/question/456362523</li>
</ul>
<h2 id="vscode中配置keil">5.2 Vscode中配置Keil</h2>
<ul>
<li>参考：(VS Code编写Keil uVison
5工程)[https://blog.csdn.net/weixin_43576926/article/details/107736692]</li>
</ul>
<h1 id="六jetbrains全家桶">六、JetBrains全家桶</h1>
<h2 id="clion配置c">6.1 CLion配置C++</h2>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_45571585/article/details/126977413">MacOS
配置Clion的C/C++环境的详细步骤及mac终端报错问题解决</a></p>
</blockquote>
]]></content>
      <categories>
        <category>重装-环境配置-计算机</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>QT编程经验</title>
    <url>/2023/03/18/QT%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="一小经验">一、小经验</h1>
<h2 id="组件复制">1.1 组件复制</h2>
<ul>
<li>在进行组件复制时，需要先把准备复制到的地方取消布局才能进行复制</li>
</ul>
<h2 id="tableview">1.2 tableview</h2>
<ul>
<li>在设计table内容时，为了方便后续修改表格，需要设计表格的model为<code>QStandardItemModel*</code>，后面对表格的修改都在model中进行，而不直接对table进行操作（QComBobox页也同理）</li>
</ul>
<h2 id="stacked的布局以及自适应缩放">1.3
stacked的布局以及自适应缩放</h2>
<ul>
<li>stack中各个界面整体不能单独布局，需要对stack进行统一布局</li>
<li>要实现自适应缩放需要把控件进行布局，同时如果缩放效果不符合预想可以通过修改Layout里面的layoutstretch的比值就可以实现</li>
</ul>
<h2 id="sql">1.4 sql</h2>
<h3 id="qt驱动sql">1.4.1 QT驱动sql</h3>
<ul>
<li><p>QT操作的前提：使用者能自己通过SQL语句实现数据库表数据的增删改查</p>
<ul>
<li>本地MySql的配置参考文章：https://subingwen.cn/qt/sql-driver/ &amp;
https://www.cnblogs.com/ShineLeBlog/p/14908927.html
<ul>
<li>在根据教程配置时需要注意.pro文件中添加INCLUDE等三个路径时，如果有路径中有空格需要在路径中添加双引号</li>
<li>还需要注意如果出现文件缺失错误，大概率是配置路径有问题，在添加双引号后先执行qmake然后在构建，参考https://blog.csdn.net/hhhuang1991/article/details/84060977</li>
<li>LIBS += "D:_communication_software_v8.0.32Server 8.0.lib"</li>
<li>INCLUDEPATH += "D:_communication_software_v8.0.32Server 8.0
"</li>
<li>DEPENDPATH += "D:_communication_software_v8.0.32Server 8.0
"</li>
</ul></li>
</ul></li>
<li><p>需要先将sql添加到.pro文件中：<code>QT += sql</code></p></li>
<li><p>qt提供的数据库类：</p>
<ul>
<li><ul>
<li>QSqlDatabase：通过这个类增/删/复制/关闭数据库，配置数据库信息</li>
</ul></li>
<li><ul>
<li>QSqlQuery：提供增删查改功能</li>
</ul></li>
<li>QSqlRecord：数据库记录</li>
<li>QSqlField：数据类型、列名等</li>
<li>QSqlQueryModel：遍历结果集的高级接口（模型视图结构，一般大型才需要）</li>
<li><ul>
<li>QSqlError：数据操作失败可以通过这个类获取错误信息</li>
</ul></li>
</ul></li>
</ul>
<h3 id="安装navicat">1.4.2 安装navicat</h3>
<p>参考：(NavicatPremium16破解)[https://www.cnblogs.com/kkdaj/p/16260681.html]</p>
<h3 id="sql事务操作-数据回滚">1.4.3 sql事务操作-数据回滚</h3>
<ul>
<li>在进行增、删、更新操作时需要添加事务操作来保护数据</li>
</ul>
<h3 id="sqlite使用">1.4.4 sqlite使用</h3>
<ul>
<li><a href="https://blog.csdn.net/weixin_42380257/article/details/81360237">SQLite数据库的创建和使用</a>,
<a href="https://blog.csdn.net/java_xiaoo/article/details/120868412">Navicat怎么连接Sqlite数据库</a></li>
</ul>
<h3 id="qt驱动sql出现问题">1.4.5 QT驱动sql出现问题</h3>
<ul>
<li>参考https://www.jianshu.com/p/6efaf46fec75 &amp;
https://subingwen.cn/qt/sql-driver</li>
<li><code>D:\Project\Wireless_communication_software\QT_v5.12.6\Qt\Qt5.12.6\5.12.6\mingw73_64\plugins\sqldrivers</code>路径中找不到<code>qsqlmysql.dll</code>和<code>qsqlmysql.dll</code>文件，因此需要想办法编译</li>
<li>在<code>D:\Project\Wireless_communication_software\QT_v5.12.6\Qt\Qt5.12.6\5.12.6\Src\qtbase\src\plugins\sqldrivers\mysql</code>目录下找到<code>mysql.pro</code>双击打开</li>
</ul>
<h2 id="qt实现web界面交互">1.5 QT实现web界面交互</h2>
<ul>
<li>参考<a href="https://blog.csdn.net/qq_34578785/article/details/106671018">Qt嵌入百度地图API的详细流程与常见问题</a>,
<a href="https://blog.csdn.net/qq_39295354/article/details/124655026?">QT加载百度在线地图</a></li>
<li>待参考<a href="https://blog.csdn.net/qq_41961619/article/details/107104622">qt使用高德地图并与之简单交互</a>,
<a href="https://www.cnblogs.com/feiyangqingyun/p/12150216.html">Qt编写百度地图综合应用（在线+离线+区域）</a>,
<a href="https://blog.csdn.net/Sakuya__/article/details/106031095">QT
QWebEngineView加载百度地图</a>,</li>
</ul>
<h2 id="qt利用sql的用户登录界面">1.6 QT利用sql的用户登录界面</h2>
<ul>
<li>参考：<a href="https://blog.csdn.net/qq_42179526/article/details/105845303">QT连接SQLite数据库（实现登陆注册）</a>,
<a href="https://blog.csdn.net/qq_16488989/article/details/108884580">Qt
手把手教你实现漂亮的登录界面</a>, <a href="https://www.bilibili.com/video/BV1ov4y1P7Vb/?">基于QT开发项目管理系统（附源码）-视频</a>,
<a href="https://blog.csdn.net/weixin_45739654/article/details/125702849">Qt设计精美的登录注册界面（包含SQLite数据库应用）</a></li>
</ul>
<h2 id="qt利用生成pri文件">1.7 QT利用生成pri文件</h2>
<p>参考：https://zhuanlan.zhihu.com/p/489685702</p>
<ul>
<li><p>先在工程的文件夹中创建一个新的文件夹</p></li>
<li><p>在新的文件夹中创建一个txt文件，并将名字后缀改成<code>pri</code></p></li>
<li><p>在工程的<code>.pro</code>文件下添加pri对应的文件夹地址信息</p>
<p><img url="addPri.png" width="%50" height="%50"></p></li>
<li><p>在<code>.pri</code>文件中添加需要加入的自定义类文件的地址信息</p>
<p><img url="pri.png" width="%50" height="%50"></p></li>
</ul>
<h1 id="二qt配置">二、QT配置</h1>
<h2 id="qt中配置msvc环境">2.1 QT中配置MSVC环境</h2>
<ul>
<li><p>先到<code>MaintenanceTool.exe</code>中添加对应MSVC版本的组件</p></li>
<li><p>参考：https://blog.csdn.net/Copperxcx/article/details/122540629
和 https://blog.csdn.net/zujiasheng/article/details/125302904</p>
<ul>
<li>QT5.12.6是可以配置MSVC的，但是只有在安装了VS后添加里面才会显示MSVC选项</li>
<li>大坑：VS中需要同时安装MSVC 2015版本的才能被QT自动识别</li>
</ul></li>
<li><p>完成后编译可能还会出错，因此需要将以下环境添加进环境变量中</p>
<ul>
<li>C:Files (x86)Kits\10</li>
<li>C:Files (x86)Kits\10</li>
<li>问题解决：http://t.csdn.cn/LkidD
https://bbs.csdn.net/topics/396205896 和
https://blog.csdn.net/dsn3S/article/details/121042651</li>
<li>出现：无法打开包括文件type_traits错误的话可以尝试在cmd这执行<code>"C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64</code></li>
<li>出现缺少shell32.dll问题
<ul>
<li>需要加入自己的Windows
Kits下lib下的的um文件路径到系统环境变量中:</li>
<li>比如我的路径:<code>C:\Program Files (x86)\Windows Kits\10\Lib\10.0.18362.0\um\x64</code>，如果没有um文件夹则重新下载windows
kits</li>
</ul></li>
<li>出现头文件缺失：https://blog.csdn.net/skye_95/article/details/81076456
和 https://blog.csdn.net/hhhuang1991/article/details/84060977</li>
</ul></li>
<li><p>解决MSVC中文出错问题</p>
<ul>
<li>在所有头文件<code>.h</code>中添加下面的语句
<ul>
<li><code>//解决MSVC中文乱码 #if _MSC_VER &gt;= 1600    // MSVC2015 &gt; 1899, MSVC_VER = 14.0 #pragma execution_character_set("utf-8") #endif</code></li>
</ul></li>
</ul></li>
</ul>
<h2 id="qt组件添加">2.2 QT组件添加</h2>
<ul>
<li>参考：https://blog.csdn.net/Arcofcosmos/article/details/122413626</li>
<li>参考：https://blog.csdn.net/qq_36170958/article/details/108679509
用到<code>MaintenanceTool.exe</code>
<ul>
<li>清华镜像：https://mirrors.tuna.tsinghua.edu.cn/qt/online/qtsdkrepository/windows_x86/root/qt/</li>
</ul></li>
</ul>
<h1 id="三qt打包exe可执行文件">三、QT打包EXE可执行文件</h1>
<p>参考：https://blog.csdn.net/ColinFhz/article/details/107879769</p>
<ul>
<li>1.打开<code>Qt5.12.6（MinGW...）</code>，如我的电脑是在搜索栏中点击<code>Qt5.12.6（MinGW 7.3.0 64-bit）</code></li>
<li>2.将QT
Creator运行得到的<code>.exe</code>文件复制到一个空文件夹中</li>
<li>3.在<code>Qt5.12.6（MinGW...）</code>打开的cmd控制台中cd到第2步中的文件夹处</li>
<li>4.输入<code>windeployqt text.exe</code>自动打包，其中<code>text</code>自己改成对应的文件名称就行</li>
</ul>
<h1 id="四qt云服务器中部署websocket通信">四、QT云服务器中部署websocket通信</h1>
<h2 id="云服务器配置-选用阿里云">1. 云服务器配置-选用阿里云</h2>
<ul>
<li><p>注意：新用户有<a href="https://help.aliyun.com/zh/ecs/3-month-free-trial">三个月免费使用的优惠</a></p></li>
<li><p>注意：学生用完三个月优惠后可以申请<a href="https://developer.aliyun.com/plan/student?userCode=r3yteowb">一个月学生免费试用优惠</a></p></li>
<li><p>参考<a href="https://blog.csdn.net/qq21497936/article/details/115409124?">阿里云服务器建立公网物联网服务器</a></p>
<ul>
<li>其中<code>添加端口</code>步骤是给公网映射一个端口，这样就可以通过公网IP+端口号访问到服务器了，除了安全组里面的端口号外，其它PC是无法通过公网IP访问到服务器的。这里可以测试，在服务器上监听服务器内网的安全组端口号，此时其它PC可以通过<code>公网IP+端口号</code>与服务器通信；若服务器监听的是非安全组的端口号，则其它PC无法通过<code>公网IP+端口号</code>与服务器通信。</li>
</ul></li>
<li><p>云服务器上部署服务端，实际上就是在云本机的内网IP上开放端口号，通过地址映射关系将公网IP与内网IP对应起来，这样就可以通过公网IP访问到云服务器了。</p></li>
</ul>
<p><img src="/2023/03/18/QT%E7%BC%96%E7%A8%8B%E7%BB%8F%E9%AA%8C/port_mapping.png" width="%50" height="%50"></p>
<h2 id="sqlite加密设置">2. sqlite加密设置</h2>
<p>将下面四个文件拷贝到QT下载路径下对于编译器的sql驱动文件夹中，比如我的是<code>\QT\Qt5.12.6\5.12.6\mingw73_64\plugins\sqldrivers</code>，然后在QT的.pro文件中添加<code>sqlcipher</code>库。</p>
<ul>
<li><code>libsqlcipher.a</code></li>
<li><code>libsqlcipher.a</code></li>
<li><code>sqlcipher.dll</code></li>
<li><code>sqlcipherd.dll</code></li>
</ul>
<p><img url="sqlitecipher.png" width="%50" height="%50"></p>
<h2 id="openssl配置">3. openssl配置</h2>
<p>参考：https://blog.csdn.net/byzzw/article/details/118390933</p>
]]></content>
      <tags>
        <tag>杂货铺-休闲</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql数据库学习</title>
    <url>/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="一mysql数据库在linux中的使用方法">一、Mysql数据库在Linux中的使用方法</h2>
<h3 id="修改密码">1.1 修改密码</h3>
<p>进入mysql前终端指令：</p>
<ul>
<li>查看mysql服务状态：<code>systemctl status mysql.service</code></li>
<li>查看mysql密码：<code>sudo cat /etc/mysql/debian.cnf</code></li>
</ul>
<p>根据查到的账号密码进入mysql：</p>
<ul>
<li><code>mysql -u debian-sys-maint -p</code></li>
<li>输入密码：（输入<code>debian-sys-maint</code>对应的密码即可）</li>
</ul>
<p>进入mysql后终端指令（指令以<code>;</code>结尾）：</p>
<ul>
<li>查看数据库：<code>show databases;</code></li>
<li>选择数据库：<code>use 数据库名;</code></li>
<li>查看表：<code>show tables;</code></li>
<li>查询表：<code>select * from 表名;</code></li>
<li>查看当前mysql用户：
<ul>
<li>先进入mysql数据库：<code>use mysql;</code></li>
<li>查看用户：<code>select user,host from user;</code></li>
<li>修改密码：<code>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';</code>后刷新权限：<code>flush privileges;</code></li>
<li>修改完密码后退出mysql：<code>exit;</code></li>
</ul></li>
</ul>
<p>修改完密码后，可以用新密码进入mysql：<code>mysql -u root -p</code></p>
<p>输入密码：<code>root</code>就可以进入</p>
<h3 id="终端使用mysqlsh来操作数据库">1.2
终端使用mysqlsh来操作数据库</h3>
<ul>
<li>下载mysql-shell：<code>sudo apt-get install mysql-shell</code></li>
<li>启动mysql-shell：<code>mysqlsh</code></li>
<li>连接数据库：<code>\connect root@localhost</code></li>
<li>输入上面修改后的密码：<code>root</code></li>
<li>查看数据库：<code>\sql show databases;</code></li>
</ul>
<h3 id="vscode中使用mysqlsh">1.3 vscode中使用mysqlsh</h3>
<ul>
<li>安装插件：<code>Mysql Shell for VS Code</code></li>
</ul>
<p>可能会出现错误：</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/err1.png"></p>
<p>根据错误提示在终端安装即可：</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/install.png"></p>
<p>然后<code>restart</code>即可</p>
<ul>
<li><p>重启后点击<code>New Connection</code>，输入连接信息(用户名、密码、端口等)，点击<code>OK</code>即可</p></li>
<li><p>配置完成后就可以在vscode中使用mysqlsh了，需要注意的是输入语句后需要按<code>ctrl+enter</code>才能执行</p></li>
</ul>
<h2 id="二mysql数据库基础操作">二、Mysql数据库基础操作</h2>
<h3 id="数据库的数据库表创建表格增删改查">2.1
数据库的数据库&amp;表创建、表格增删改查</h3>
<ul>
<li>创建数据库：<code>create database 数据库名;</code></li>
<li>删除数据库：<code>drop database 数据库名;</code></li>
<li>选择数据库：<code>use 数据库名;</code></li>
<li>创建表格：<code>create table 表名(字段名1 类型1, 字段名2 类型2, ...);</code></li>
<li>删除表格：<code>drop table 表名;</code></li>
<li>查看表格：<code>show tables;</code></li>
<li>查看表格结构：<code>desc 表名;</code></li>
<li>插入数据：<code>insert into 表名(字段1, 字段2, ...) values(值1, 值2, ...);</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> game;</span><br><span class="line">USE game;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> player (</span><br><span class="line">	id <span class="type">INT</span>,</span><br><span class="line">	name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">	level <span class="type">INT</span>,</span><br><span class="line">	exp <span class="type">INT</span>,</span><br><span class="line">	gold <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> player;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> player MODIFY <span class="keyword">COLUMN</span> name <span class="type">VARCHAR</span>(<span class="number">200</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> player <span class="keyword">Add</span> <span class="keyword">COLUMN</span> last_login DATETIME;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> player;</span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> player (id, name, level, exp, gold) <span class="keyword">VALUES</span> (<span class="number">1</span>, &quot;王五&quot;, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> player (id, name) <span class="keyword">VALUES</span> (<span class="number">2</span>, &quot;狂徒&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> player <span class="keyword">VALUES</span> (<span class="number">3</span>, &quot;某某&quot;, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> player MODIFY level <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> player (id, name) <span class="keyword">VALUES</span> (<span class="number">4</span>, &quot;张三&quot;), (<span class="number">5</span>, &quot;李四&quot;);</span><br><span class="line">UPDATE player <span class="keyword">set</span> level <span class="operator">=</span> <span class="number">1</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> &quot;狂徒&quot;;</span><br><span class="line">UPDATE player <span class="keyword">set</span> exp <span class="operator">=</span> <span class="number">1</span> <span class="keyword">WHERE</span> exp <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player;</span><br></pre></td></tr></table></figure>
<h3 id="数据库的导入导出">2.2 数据库的导入导出</h3>
<ul>
<li>导出数据库：<code>mysqldump -u root -p 数据库名 &gt; 导出文件名.sql</code>
<ul>
<li>eg：<code>mysqldump -u root -p game &gt; game.sql</code></li>
</ul></li>
<li>导入数据库：<code>mysql -u root -p 数据库名 &lt; 导入文件名.sql</code>
<ul>
<li>eg：<code>mysql -u root -p game &lt; game.sql</code></li>
<li>然后按照提示输入密码，完成后刷新<code>navicate</code>的mysql数据库即可看到导入的数据库</li>
</ul></li>
</ul>
<p>b站一个up主提供的数据库练习资源文件： 百度网盘：
https://pan.baidu.com/s/1shKNzVv0KViftFx51KATnw?pwd=qgpv 提取码:
qgpv</p>
<h3 id="数据库的常用语句">2.3 数据库的常用语句</h3>
<h4 id="范围查询">2.3.1 范围查询</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">AND</span> level <span class="operator">&lt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">AND</span> exp <span class="operator">&lt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">AND</span> level <span class="operator">&lt;</span> <span class="number">5</span> <span class="keyword">OR</span> exp <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">AND</span> exp <span class="operator">&lt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h4 id="模糊查询">2.3.2 模糊查询</h4>
<p>模糊查询通过通配符<code>LIKE</code>关键字实现，<code>%</code>表示任意多个字符，<code>_</code>表示一个字符（<code>_</code>的个数和字符个数相同）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;王%&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%王%&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;王_&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;王__&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="通配符匹配正则表达式">2.3.3 通配符匹配正则表达式</h4>
<p>这里的通配符是<code>REGEXP</code>，<code>^</code>表示开头，<code>$</code>表示结尾，<code>.</code>表示任意一个字符，<code>*</code>表示0个或多个，<code>+</code>表示1个或多个，<code>?</code>表示0个或1个，<code>[]</code>表示匹配其中任意一个字符，<code>[^]</code>表示不匹配其中任意一个字符</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/matchTips.png" width="50%" height="50%"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;^王.$&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;王&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;[王张]&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;王|张&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>练习题：</p>
<h4 id="排序查询">2.3.4 排序查询</h4>
<p>使用<code>ORDER BY</code>关键字，默认或者<code>ASC</code>表示升序，<code>DESC</code>表示降序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">ORDER</span> <span class="keyword">BY</span> level;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">ORDER</span> <span class="keyword">BY</span> level <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<p>练习题：</p>
<ul>
<li>按照等级降序排列后，再根据经验升序排序：
<ul>
<li><code>SELECT * FROM player ORDER BY level DESC, exp;</code></li>
</ul></li>
<li>按照第五列降序排列：
<ul>
<li><code>SELECT * FROM player ORDER BY 5 DESC;</code></li>
</ul></li>
</ul>
<h4 id="聚合函数">2.3.5 聚合函数</h4>
<p>聚合函数是对一组<strong>数据进行计算</strong>的函数，常用的聚合函数有<code>COUNT</code>、<code>SUM</code>、<code>AVG</code>、<code>MAX</code>、<code>MIN</code></p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/aggregate.png" width="50%" height="50%"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> player;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(level) <span class="keyword">FROM</span> player;</span><br></pre></td></tr></table></figure>
<p>**count (*)、count(1)、count(字段名)的区别**：</p>
<p>在索引下count都不用回表</p>
<ul>
<li><code>count(*)</code>：
<ul>
<li>count的值：相当于<code>count(0)</code>，会统计所有行数，包括<code>null</code>值</li>
<li>性能：性能跟<code>count(1)</code>一样，都会优先len最短的二级索引，Ali要求尽量用<code>count(*)</code></li>
</ul></li>
<li><code>count(1)</code>：
<ul>
<li>count的值：会统计所有行数，包括<code>null</code>值</li>
<li>性能：性能跟<code>count(*)</code>一样，都会优先len最短的二级索引，Ali要求尽量用<code>count(*)</code></li>
</ul></li>
<li><code>count(字段名)</code>：count的是该字段下非NULL的行数
<ul>
<li><code>count (主键)</code>：由于主键都是非NULL的，所以<code>count(主键)</code>不用额外判断，性能比<code>count(其他字段)</code>好</li>
<li><code>count(字段名)</code>：需要进行非NULL判断，性能最差</li>
</ul></li>
</ul>
<p>性能比较：**count(*) = count(1) &gt; count(主键) &gt;
count(字段名)**</p>
<h4 id="分组查询">2.3.6 分组查询</h4>
<p>使用<code>GROUP BY</code>关键字对查询结果进行分组，<code>HAVING</code>关键字对分组后的结果进行过滤</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> player <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"><span class="keyword">SELECT</span> level, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> player <span class="keyword">GROUP</span> <span class="keyword">BY</span> level;</span><br><span class="line"><span class="keyword">SELECT</span> level, <span class="built_in">COUNT</span>(level) <span class="keyword">FROM</span> player <span class="keyword">GROUP</span> <span class="keyword">BY</span> level <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(level)<span class="operator">&gt;</span><span class="number">4</span>;</span><br><span class="line"><span class="keyword">SELECT</span> level, <span class="built_in">COUNT</span>(level) <span class="keyword">FROM</span> player <span class="keyword">GROUP</span> <span class="keyword">BY</span> level <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(level) <span class="operator">&gt;</span> <span class="number">4</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> level;</span><br></pre></td></tr></table></figure>
<h4 id="去重查询">2.3.7 去重查询</h4>
<p>使用<code>DISTINCT</code>关键字对查询结果进行去重</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sex <span class="keyword">FROM</span> player;</span><br></pre></td></tr></table></figure>
<h4 id="并集">2.3.8 并集</h4>
<p>使用<code>UNION</code>关键字对两个查询结果进行合并（UNION会默认去重，如果不想去重可以使用<code>UNION ALL</code>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> exp <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> exp <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<h4 id="交集">2.3.9 交集</h4>
<p>使用<code>INTERSECT</code>关键字对两个查询结果进行交集运算</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> exp <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<h4 id="差集">2.3.10 差集</h4>
<p>使用<code>EXCEPT</code>关键字对两个查询结果进行差集运算</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> exp <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<h3 id="子查询">2.4 子查询</h3>
<p>子查询是指在<strong>查询语句中嵌套查询语句</strong>，子查询可以嵌套多层，子查询的结果可以是单行单列，也可以是多行多列</p>
<p>比如，我们需要查找表格中等级大于平均等级的玩家，那么我们可以根据下面的步骤进行：</p>
<ul>
<li>先计算平均等级
<ul>
<li><code>SELECT AVG(level) FROM player;</code></li>
</ul></li>
<li>然后再查询大于平均等级的玩家
<ul>
<li><code>SELECT * FROM player WHERE level &gt; (SELECT AVG(level) FROM player);</code></li>
</ul></li>
</ul>
<p>接着，我们还想单独取出表格中<code>level</code>一列，并列出<code>每个玩家的等级-平均等级</code>的值作为单独一列，并给这一列取个别名为<code>diff</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> level, </span><br><span class="line">level<span class="operator">-</span>ROUND((<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(level) <span class="keyword">FROM</span> player)) <span class="keyword">AS</span> diff</span><br><span class="line"><span class="keyword">FROM</span> player;</span><br></pre></td></tr></table></figure>
<p>可以根据查询结果，将查询结果作为新表格（创建一个新表格或插入其它表格中）：</p>
<ul>
<li>创建新表格：
<ul>
<li><code>CREATE TABLE new_player (SELECT * FROM player WHERE level &lt; 5);</code></li>
</ul></li>
<li>插入其它表格：
<ul>
<li><code>INSERT INTO new_player (SELECT * FROM player WHERE level BETWEEN 7 AND 10);</code></li>
</ul></li>
</ul>
<p>用<code>exists</code>关键字来判断<strong>子查询结果</strong>是否存在：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="operator">&gt;</span> <span class="number">100</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> level <span class="operator">&gt;</span> <span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<h3 id="表关联">2.5 表关联</h3>
<p>表关联是指<strong>将多个表格的数据进行关联</strong>，主要的关键词是<code>JOIN</code>，常用的关联方式有<code>INNER JOIN</code>、<code>LEFT JOIN</code>、<code>RIGHT JOIN</code>、<code>FULL JOIN</code></p>
<h4 id="内连接">2.5.1 内连接</h4>
<p><strong>内连接</strong>（<code>INNER JOIN</code>）：只返回两个表格中满足条件的数据（只会显示匹配的数据）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> equip</span><br><span class="line"><span class="keyword">ON</span> player.id <span class="operator">=</span> equip.player_id;</span><br></pre></td></tr></table></figure>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/innerJoin.png"></p>
<p>内连接方式可以用<code>WHERE</code>关键字来等同实现：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player p, equip e</span><br><span class="line"><span class="keyword">WHERE</span> p.id <span class="operator">=</span> e.player_id;</span><br></pre></td></tr></table></figure>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/innerJoin2.png"></p>
<h4 id="左连接">2.5.2 左连接</h4>
<p><strong>左连接</strong>（<code>LEFT JOIN</code>）：返回<strong>左表格</strong>中<strong>所有数据</strong>+右表格中满足条件的数据（会返回左表所有的数据，右表中无匹配的数据则显示<code>NULL</code>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> equip</span><br><span class="line"><span class="keyword">ON</span> player.id <span class="operator">=</span> equip.player_id;</span><br></pre></td></tr></table></figure>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/leftJoin.png"></p>
<h4 id="右连接">2.5.3 右连接</h4>
<p><strong>右连接</strong>（<code>RIGHT JOIN</code>）：返回<strong>右表格</strong>中<strong>所有数据</strong>，左表格中满足条件的数据（会返回右表所有的数据，左表中无匹配的数据则显示<code>NULL</code>）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> equip</span><br><span class="line"><span class="keyword">ON</span> player.id <span class="operator">=</span> equip.player_id;</span><br></pre></td></tr></table></figure>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/rightJoin.png"></p>
<h3 id="索引">2.6 索引</h3>
<p>索引是对数据库表格中<strong>某列或多列的值进行排序</strong>的一种结构，索引可以大大提高查询效率，如果没有索引，数据库会进行<strong>全表扫描</strong>，效率会很低（创建索引可以提高效率）</p>
<p>常用的索引有<code>UNIQUE</code>（唯一索引）、<code>FULLTEXT</code>（全文索引）、<code>SPATIAL</code>（空间索引）</p>
<p>创建索引的通用语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT<span class="operator">|</span>SPATIAL] INDEX 索引名 <span class="keyword">ON</span> 表名(列名);</span><br></pre></td></tr></table></figure>
<p>一般会对<strong>主键字段</strong>或者<strong>常用于查询的字段</strong>创建索引</p>
<ul>
<li>查看表格当前含有的索引：<code>SHOW INDEX FROM 表名;</code>
<ul>
<li><code>SHOW INDEX FROM npc;</code></li>
<li>可以看到主键<code>id</code>已经有了一个索引</li>
</ul></li>
<li>创建索引：<code>CREATE INDEX 索引名 ON 表名(字段名);</code>
<ul>
<li><code>CREATE INDEX name_index ON npc(name);</code></li>
<li>此时再查看索引，可以多了一个<code>name</code>字段的索引</li>
</ul></li>
</ul>
<p>比较有查询和无查询的效率：</p>
<p>将<code>npc</code>表格copy一份到<code>npc_slow</code>表格中：</p>
<ul>
<li><code>CREATE TABLE npc_slow (SELECT * FROM npc);</code></li>
<li>查询<code>npc_slow</code>表格中是没有任何索引的</li>
</ul>
<p>此时对<code>npc</code>表格和<code>npc_slow</code>表格中的<code>id</code>字段进行查询观察区别</p>
<p>删除索引：<code>DROP INDEX 索引名 ON 表名;</code></p>
<h3 id="视图">2.7 视图</h3>
<p>视图是<strong>虚拟的表格</strong>，是一个<strong>查询结果</strong>的存储，包含了<strong>行和列</strong>。（视图不包含数据，只包含查询语句）。由于视图只包含查询语句，因此视图是<strong>动态的</strong>，会随着数据的改变而改变查询结果，每次查询视图时都会执行查询语句。</p>
<p>创建视图的通用语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名 <span class="keyword">AS</span> 查询语句;</span><br></pre></td></tr></table></figure>
<p>比如我们想存一个<code>level</code>为top10的玩家视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> top10</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">ORDER</span> <span class="keyword">BY</span> level <span class="keyword">DESC</span> LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>然后就可以使用正常的查询语句来查询视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> top10;</span><br></pre></td></tr></table></figure>
<p>修改视图：<code>ALTER VIEW 视图名 AS 查询语句;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> top10</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">ORDER</span> <span class="keyword">BY</span> level LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>查看已有的视图：<code>SHOW TABLES;</code></p>
<p>删除视图：<code>DROP VIEW 视图名;</code></p>
<h2 id="三mysql原理">三、MySQL原理</h2>
<h3 id="事务">3.1 事务</h3>
<h4 id="事务的基础概念">3.1.1 事务的基础概念</h4>
<p>事务是指<strong>一组SQL语句</strong>组成的<strong>操作序列</strong>，这组操作要么全部成功，要么全部失败，事务是数据库管理系统执行的<strong>最小工作单位</strong>。</p>
<ul>
<li>如在银行操作中，A转账给B，要经过两个步骤：1. A账户减少金额；2.
B账户增加金额。这两个步骤要么同时成功(commit)，要么同时失败(rollback全部回滚)。</li>
</ul>
<p>事务的四个特性是ACID：<strong>原子性</strong>、<strong>一致性</strong>、<strong>隔离性</strong>、<strong>持久性</strong></p>
<p><strong>1）原子性（atomicity）-基础</strong>：事务是一个不可分割的工作单位（整体性），要么全部成功，要么全部失败，用<strong>commit</strong>来结束一个事务，由<strong>事务回滚undo日志</strong>来实现</p>
<p><strong>2）一致性（consistency）-约束条件</strong>：事务执行前后，数据会从一个<strong>语义合法状态</strong>转换到另一个<strong>语义合法状态</strong>，即事务执行前后数据的<strong>完整性约束</strong>没有被破坏（满足现实中的约束）</p>
<ul>
<li>如：A有200元（合法），转帐300元出去变成-100元（不合法），这就是不一致的状态，所以必须定义约束就是余额大于等于0</li>
<li>如：表中把name设置成唯一约束，但是由于事务提交或者回滚导致了重复的name，破坏了约束</li>
<li>如：A转账100w给B，A扣除100w成功后，服务器宕机了，B没有收到100w，也破坏了完整性约束</li>
</ul>
<p><strong>3）隔离性（isolation）-手段</strong>：多个事务之间是相互隔离的，一个事务的执行不会影响其它事务，能够处理并发情况</p>
<p>隔离性四个级别：<strong>读未提交</strong>、<strong>读已提交</strong>、<strong>可重复读（InnoDB默认的）</strong>、<strong>串行化</strong></p>
<ul>
<li><p><strong>脏读</strong>：一个事务读取到另一个事务未提交的数据</p>
<ul>
<li>解决：通过<strong>读已提交</strong>级别来解决，保证一个事务内读到的数据起码是已经提交的数据
<img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/dirty_read.png" width="50%"></li>
</ul></li>
<li><p><strong>不可重复读</strong>：一个事务多次读取同一数据，得到两次读取的数据不一致（其他事务更改了该数据）</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/non-repeating0.png" width="50%"></p>
<ul>
<li>解决：通过<strong>可重复读</strong>级别来解决，保证一个事务内多次读的数据都是初始读的数据的<strong>快照</strong>
<img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/non-repeating.png" width="50%"></li>
</ul></li>
<li><p><strong>幻读</strong>：幻读是一个事务内多次查询某个符合查询条件的<strong>记录数量</strong>时会出现前后不一样的情况</p>
<ul>
<li>解决：通过<strong>串行化</strong>级别来解决，保证事务执行时不会有其他事务的干扰，但是并行能力会降低
<img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/phantom-reads.png" width="50%"></li>
</ul></li>
<li><p><strong>串行化</strong>：最高级别，事务串行执行，通过<strong>锁</strong>来实现</p>
<ul>
<li>如：当事务A对某一行数据进行操作且未提交时，事务B想查询该行数据时会<strong>被阻塞</strong>，直到事务A提交或回滚</li>
</ul></li>
</ul>
<p><strong>4）持久性</strong>：事务一旦提交，对数据库的改变是永久性的，通过<strong>日志（redo重做日志-系统崩溃后重做提交的事务，undo回滚日志）</strong>来实现</p>
<p>四个特性的总结：</p>
<table>
<thead>
<tr>
<th style="text-align: center;">特性</th>
<th style="text-align: center;">特性得以保证的技术</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">原子性</td>
<td style="text-align: center;">undo回滚日志</td>
</tr>
<tr>
<td style="text-align: center;">一致性</td>
<td style="text-align: center;">原子+隔离+持久</td>
</tr>
<tr>
<td style="text-align: center;">隔离性</td>
<td style="text-align: center;">MVCC多版本并发控制、加锁机制</td>
</tr>
<tr>
<td style="text-align: center;">持久性</td>
<td style="text-align: center;">redo重做日志</td>
</tr>
</tbody>
</table>
<p>四个事务隔离级别的总结：</p>
<table>
<thead>
<tr>
<th style="text-align: left;">隔离级别</th>
<th style="text-align: center;">无脏读</th>
<th style="text-align: center;">无不可重复读</th>
<th style="text-align: center;">无幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">读未提交</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr>
<td style="text-align: left;">读已提交</td>
<td style="text-align: center;">√</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr>
<td style="text-align: left;">可重复读</td>
<td style="text-align: center;">√</td>
<td style="text-align: center;">√</td>
<td style="text-align: center;"></td>
</tr>
<tr>
<td style="text-align: left;">串行化</td>
<td style="text-align: center;">√</td>
<td style="text-align: center;">√</td>
<td style="text-align: center;">√</td>
</tr>
</tbody>
</table>
<p><strong>可重复读真的完全可重复读吗？</strong></p>
<p>由于存在<strong>快照读</strong>和<strong>当前读</strong>，如果前后全部是<strong>快照读</strong>是可以保证<strong>可重复读</strong>的</p>
<p>但是如果有<strong>当前读</strong>的话，也就是事务中出现了<strong>update、for
update的写操作</strong>，那么就会出现<strong>不可重复读</strong>的情况</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/repeatable-read.png" width="50%"></p>
<h4 id="事务的隔离级别">3.1.2 事务的隔离级别</h4>
<p>上面提到，事务在并发时有<strong>脏读</strong>、<strong>不可重复读</strong>、<strong>幻读</strong>的问题：</p>
<table>
<colgroup>
<col style="width: 5%">
<col style="width: 22%">
<col style="width: 72%">
</colgroup>
<thead>
<tr>
<th style="text-align: center;">并发问题</th>
<th style="text-align: center;">说明</th>
<th style="text-align: center;">解决方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">脏读</td>
<td style="text-align: center;">读到其他事务<strong>未提交的数据</strong></td>
<td style="text-align: center;">读已提交：每条语句前创建一个<strong>快照</strong></td>
</tr>
<tr>
<td style="text-align: center;">不可重复读</td>
<td style="text-align: center;">一个事务内前后读的<strong>数据</strong>内容不一样</td>
<td style="text-align: center;">可重复读：每个事务读到的数据都是初始读的数据的<strong>快照</strong>（MVCC）</td>
</tr>
<tr>
<td style="text-align: center;">幻读</td>
<td style="text-align: center;">一个事务内前后读的<strong>记录数量</strong>不一样</td>
<td style="text-align: center;">串行化：事务串行执行，通过<strong>select
for update的next-key
lock（行级锁+间隙锁）</strong>来实现（读写冲突时锁住）</td>
</tr>
</tbody>
</table>
<p><strong>Read View在MVCC中的工作原理</strong></p>
<p>Read View快照中有四个字段：</p>
<ul>
<li><code>creator_trx_id</code>：创建该快照的事务ID</li>
<li><code>m_ids</code>：创建快照时，所有<strong>活跃且未提交的事务</strong>ID</li>
<li><code>min_trx_id</code>：创建快照时，<strong>活跃且未提交事务中的最小<code>m_ids</code></strong>，<code>trx_id&lt;=min_trx_id</code>的事务都是当前快照可见的</li>
<li><code>max_trx_id</code>：创建快照时，当前数据库应该<strong>给下一个事</strong>务的ID</li>
</ul>
<p>当对某种表进行操作时，会有两个隐藏列，字段为<code>trx_id</code>和<code>roll_pointer</code>
- <code>trx_id</code>是执行当前事务的事务ID -
<code>roll_pointer</code>是当前事务的回滚指针，指向一个<strong>undo日志中的旧版本</strong></p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/two-hidden-columns.png" width="50%"></p>
<p>结合上面快照的几个字段，可以将事务id区分为如下图所示：</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/trx-id.png" width="50%"></p>
<p>这种就是通过<code>trx_id</code>构成<strong>版本链</strong>控制并发事务对同一个记录的行为，这种叫做<strong>多版本并发控制（MVCC）</strong></p>
<h4 id="事务的sql举例">3.1.3 事务的sql举例</h4>
<ul>
<li>开始事务：<code>START TRANSACTION;</code> 或
<code>BEGIN;</code></li>
<li>提交事务：<code>COMMIT;</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE sqlTest;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user(</span><br><span class="line">name VARCHAR(15) PRIMARY KEY,</span><br><span class="line">age INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">BEGIN;</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*) FROM user;</span><br><span class="line"></span><br><span class="line">INSERT INTO user VALUES(&#x27;akira&#x27;, 19);</span><br><span class="line">INSERT INTO user VALUES(&#x27;yangnan&#x27;, 18);</span><br><span class="line"></span><br><span class="line">SELECT * FROM user WHERE name=&#x27;akira&#x27;;# 同一事务内可以查询到更改</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*)FROM user;</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>
<h3 id="锁">3.2 锁</h3>
<p><strong>全表扫描</strong>时会对表中<strong>每一条数据加锁</strong></p>
<h4 id="锁的基础概念">3.2.1 锁的基础概念</h4>
<p>并发情况下的加锁方案：</p>
<ul>
<li>方案一：<strong>读用MVCC，写用加锁</strong>，读的可能是旧版本，但是性能更高</li>
<li>方案二：<strong>读写都用加锁</strong>，读写都是最新版本</li>
</ul>
<h5 id="全局锁read-lock">1）全局锁<code>READ LOCK</code></h5>
<p>整个数据库处于<strong>只读</strong>状态，适用于做<strong>全库备份</strong></p>
<ul>
<li>失效的操作：<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>ALTER</code>、<code>DROP</code>等(数据增删改、表结构变更)</li>
<li>加锁：<code>FLUSH TABLES WITH READ LOCK;</code></li>
<li>解锁：<code>UNLOCK TABLES;</code></li>
</ul>
<h5 id="表级锁">2）表级锁</h5>
<p>读写锁：</p>
<ul>
<li><strong>表级读锁-读共享锁-S锁</strong>：<code>LOCK TABLES table_name READ;</code>
<ul>
<li>加读锁的作用是<strong>防止其他事务对表进行写操作</strong>，但是不阻止其他事务对表进行读操作</li>
</ul></li>
<li><strong>表级写锁-写独占锁-X锁</strong>：<code>LOCK TABLES table_name WRITE;</code>
<ul>
<li>加写锁的作用是防止其他事务对表进行<strong>读写操作</strong></li>
</ul></li>
</ul>
<p>意向锁：意向锁与<strong>行级锁</strong>不冲突，表示有意向对表中的某些行加锁。正因为如此，意向锁并<strong>不会影响到多个事务对不同数据行加排他锁时的并发性</strong></p>
<p>作用：意向锁的目的是为了快速判断表里是否有记录被加锁，从而避免了直接对表加锁，提高了并发性</p>
<ul>
<li><strong>意向共享锁-IS</strong>：<code>select ... lock in share mode;</code>
<ul>
<li>用于<strong>表级锁</strong>，表示<strong>准备对表进行读操作</strong>，但是不会立即加锁，只是表示<strong>准备加锁</strong>，如果有<strong>写锁</strong>则会等待</li>
</ul></li>
<li><strong>意向独占锁-IX</strong>：<code>select ... for update;</code>
<ul>
<li>用于<strong>表级锁</strong>，表示<strong>准备对表进行写操作</strong>，但是不会立即加锁，只是表示<strong>准备加锁</strong></li>
</ul></li>
</ul>
<h5 id="行级锁">3）行级锁</h5>
<p>普通的<code>select</code>语句属于快照读，不会加锁，因此需要在查询语句中手动进行加锁</p>
<p>行级锁的实现语句也是<code>select ... for update;</code>，表示<strong>对查询到的行加锁</strong>，加完锁后其他事务就无法对加锁的行进行<strong>更新/删除/插入</strong>操作了</p>
<p>行级锁一般有三种，行级锁的加锁对象一般是<strong>索引</strong>：</p>
<ul>
<li><code>Record Lock</code>：记录锁，锁住某一行（一条）数据
<ul>
<li><code>select * from user where id=1 for update;</code>，其中id为主键</li>
</ul></li>
<li><code>Gap Lock</code>：间隙锁，锁住某一行数据之间的间隙，区间是<strong>前开后开</strong>
<ul>
<li>假设有一个范围为(3,5)的间隙锁区间，其他事务无法插入id=4的记录，可以有效<strong>防止幻读</strong></li>
</ul></li>
<li><code>Next-Key Lock</code>：行锁+间隙锁，锁住某一行数据和其之间的间隙，区间是<strong>前开后闭</strong>，在一些情况下会退化成<strong>记录锁/间隙锁</strong>
<ul>
<li>假设有一个范围为(3,5]的间隙锁区间，其他事务无法插入id=4的记录，也无法修改id=5的记录</li>
<li>假设<code>select * from user where id &gt;= 15</code>则会锁住(15,+∞]的区间</li>
</ul></li>
</ul>
<h4 id="死锁的出现与解决">3.2.2 死锁的出现与解决</h4>
<p>出现死锁的四个条件：<strong>互斥、占有并等待、不可抢占、循环等待</strong></p>
<p>死锁的出现：事务1和事务2都在等对方释放锁</p>
<p>死锁的排查：<code>SHOW ENGINE INNODB STATUS;</code>，查看死锁日志</p>
<p>死锁的解决：</p>
<ul>
<li><strong>超时机制</strong>：设置一个超时时间，如果超过这个时间还没有解锁，则自动解锁</li>
<li><strong>死锁检测</strong>：检测到死锁后，自动回滚一方的事务</li>
<li><strong>尽量不要逆序加锁</strong></li>
</ul>
<p>下面举一个逆序加锁的例子：</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/deadlock.png" width="80%"></p>
<h3 id="约束">3.3 约束</h3>
<h4 id="主键约束primary-key">1）主键约束：<code>PRIMARY KEY</code></h4>
<ul>
<li>可以有一列或者多列组合但是必须是唯一组合，主键是表格中的<strong>唯一标识</strong></li>
<li>一个表格只能有<strong>一个主键</strong></li>
<li>主键<strong>不能为<code>NULL</code></strong></li>
</ul>
<p>单一主键可以在创建该列时添加，也可以在<code>CREATE TABLE</code>的末尾添加：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">   user_id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">   username <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   password <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">   email <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">   user_id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">   username <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   password <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">   email <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY(user_id)</span><br><span class="line">); </span><br></pre></td></tr></table></figure>
<p>而多列主键只能在<code>CREATE TABLE</code>的末尾添加：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_roles(</span><br><span class="line">   user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   role_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY(user_id,role_id),</span><br><span class="line">   <span class="keyword">FOREIGN</span> KEY(user_id) <span class="keyword">REFERENCES</span> users(user_id),</span><br><span class="line">   <span class="keyword">FOREIGN</span> KEY(role_id) <span class="keyword">REFERENCES</span> roles(role_id)</span><br><span class="line">); </span><br></pre></td></tr></table></figure>
<h4 id="外键约束foreign-key">2）外键约束：<code>FOREIGN KEY</code></h4>
<p>MySQL的外键约束用来在两个表数据之间建立链接，其中一张表的一个字段被另一张表中对应的字段约束。也就是说，设置外键约束至少要有两种表，被约束的表叫做从表（子表），另一张叫做主表（父表），属于主从关系。</p>
<p>关于保证表的完整性可以用以下例子说明：</p>
<p>假如有两种表，一张用户账户表（用于存储用户账户），一张是账户信息表（用于存储账户中的信息）。</p>
<p>1）我不小心将用户账户表中的某个用户删除了，那么账户信息表中与这个用户有关的数据就变成无源数据了，找不到其属于哪个用户账户，导致用户信息不完整。</p>
<p>2）我在账户信息表中随便添加了一条数据，而其在用户账户表中没有对应的用户，这样用户信息也是不完整的。</p>
<p>为了解决这个问题，我们可以在账户信息表中添加一个外键约束，这个外键约束指向用户账户表中的用户ID，这样就可以保证账户信息表中的数据是完整的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users(</span><br><span class="line">   user_id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">   username <span class="type">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   password <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">   email <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_roles(</span><br><span class="line">   user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   role_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY(user_id,role_id),</span><br><span class="line">   <span class="keyword">FOREIGN</span> KEY(user_id) <span class="keyword">REFERENCES</span> users(user_id),</span><br><span class="line">   <span class="keyword">FOREIGN</span> KEY(role_id) <span class="keyword">REFERENCES</span> roles(role_id)</span><br><span class="line">); </span><br></pre></td></tr></table></figure>
<h4 id="唯一约束unique">3）唯一约束：<code>UNIQUE</code></h4>
<p>唯一约束保证了列中的所有数据是唯一的，但是可以有<code>NULL</code>值</p>
<p>唯一性约束同样可以对单列或者多列进行约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_1(</span><br><span class="line">   ...</span><br><span class="line">   column_name_1 data_type,</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">UNIQUE</span>(column_name_1)</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_1(</span><br><span class="line">   ...</span><br><span class="line">   column_name_1 data_type,</span><br><span class="line">   column_name_2 data_type,</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">UNIQUE</span>(column_name_1,column_name_2)</span><br><span class="line">); </span><br></pre></td></tr></table></figure>
<h3 id="三大范式">3.4 三大范式</h3>
<p><strong>1）第一范式</strong>：每一列都是不可再分的最小单元，即每一列都是原子的，不可再分</p>
<p>比如，我们在课程表中有一个<code>tags</code>字段，但是tags是多个标签组成的，不符合第一范式</p>
<p>解决：我们可以将<code>tags</code>字段拆分成多个字段，比如<code>tag1</code>、<code>tag2</code>、<code>tag3</code>等存在一个<code>tags</code>表中</p>
<p>这里就涉及表之间的<strong>链接表</strong>来实现，链接表通常是一个<strong>多对多</strong>的关系，包含两个表的<code>id</code>字段，比如<code>course_id</code>和<code>tag_id</code></p>
<p><strong>2）第二范式</strong>：表中的每一列都与主键相关，即表中的每一列都是完全依赖于主键的，而不是依赖于主键的一部分</p>
<p>第二范式要求如果某一列数据表示的内容不属于这个表的实体，那么这个列就应该独立出来，成为一个新的表，然后通过关联来连接这两个表</p>
<p>以下面的例子为例，如果name不单独作为一张表记录，那么当用户名更改时，所有name的记录都需要更改；且重复存储char会浪费空间</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/2NF.png" width="80%"></p>
<p><strong>3）第三范式</strong>：表中的每一列都与主键直接相关，而不是间接相关</p>
<p>如一个表中有<code>invoice_total</code>、<code>payment_total</code>、<code>balance</code>三个字段</p>
<p>其中<code>balance</code>字段是通过<code>invoice_total</code>和<code>payment_total</code>计算得到的</p>
<p>那么<code>balance</code>字段就不符合第三范式，如果修改了<code>invoice_total</code>或者<code>payment_total</code>，那么<code>balance</code>字段忘记修改就会出现问题</p>
<p>解决：删掉<code>balance</code>字段</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/3NF.png" width="80%"></p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/3NF_2.png" width="80%"></p>
<h3 id="索引ologn">3.5 索引：O(logn)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span> INDEX index_name (`age`);# 单一索引</span><br><span class="line"><span class="keyword">ADD</span> INDEX index_name (`age`, `name`);# 联合索引</span><br></pre></td></tr></table></figure>
<p><strong>为什么要建立索引？</strong></p>
<p>如果没建立索引，那么查询数据时聚簇索引只有主键，因此其他字段的查询是<strong>全表扫描</strong>，时间复杂度是<code>O(n)</code></p>
<p>而建立索引后，可以通过索引进行<strong>二分查找</strong>，时间复杂度是<code>O(logn)</code></p>
<h4 id="b树索引">3.5.1 B+树索引</h4>
<p><strong>1）比较使用其他数据结构</strong></p>
<ul>
<li>二叉查找树：解决了<strong>插入和查找</strong>问题，但是当所有插入的值都是最大值时会退化成<strong>链表</strong>，查询效率又退化成<code>O(n)</code>而非<code>O(logn)</code>;树的高度高，磁盘I/O次数多</li>
<li>平衡二叉树（如红黑树）：控制<strong>左子树和右子树的高度差不能超过1</strong>，解决链表退化问题，但是依然是二叉树（二叉树每个节点只能有左右两个子节点），高度依然很高</li>
<li>B树：<strong>每个子节点可以有M个节点</strong>，降低了树的高度，但是每个节点<strong>都会存所有数据</strong>（不仅存索引值），浪费空间（B树查询时间比B+树短一些）</li>
<li>B+树：<strong>非叶子节点只存索引</strong>，<strong>叶子节点存所有数据，以有序链表的形式构成（InnoDB用双向链表）</strong>，<strong>叶子节点之间有指针相连</strong>，降低了树的高度，减少了磁盘I/O次数；且相比B树，B+树有很多冗余节点，<strong>插入、删除和范围查询（因为有有序的叶子节点链表）</strong>更简单</li>
</ul>
<p><strong>2）B+树的特点</strong></p>
<p>MySQL的数据（索引+记录）的存储是持久化在磁盘的，所以如果单纯靠磁盘读取查询的话速度很慢，通常需要将磁盘中的数据先读取到内存中，所以要求数据结构的树高度尽量低，这样可以减少磁盘I/O次数</p>
<p>索引通过<strong>B+树</strong>作为数据结构存储数据，能够快速定位到数据，<strong>提高查询效率</strong>。索引的原理是在<strong>插入和更新</strong>时会先对数据进行排序，因此会影响插入和更新的效率</p>
<p>B+树的特点：B+树比红黑树的排序效率高，他是<strong>基于磁盘（磁盘页16K）的平衡树</strong>，具有<strong>通过增加宽度减少高度</strong>的特点，减少磁盘I/O次数。且排序后的数据全部放在<strong>叶子节点</strong>上，非叶子节点只存储索引。</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/B+tree.png" width="80%"></p>
<p><strong>3）优化B+树的插入速度</strong></p>
<p>如果插入是<strong>顺序插入</strong>的话，B+树的插入速度会很高，因为顺序插入不会导致树的平衡性被破坏，只需要在叶子节点上插入即可（如果非顺序需要经历<strong>分裂</strong>、<strong>旋转</strong>等操作）</p>
<p>所以一般会用<strong>自增id</strong>等有顺序的值作为主键。</p>
<h4 id="索引的类型">3.5.2 索引的类型</h4>
<h5 id="聚簇索引只有一个">1）聚簇索引：只有一个</h5>
<p>聚簇索引是一种<strong>数据存储方式，是针对主键搭建的B+树</strong>，中间节点存<strong>主键值和页码</strong>，叶子节点存<strong>主键值+所有完整数据本身</strong>，在InnoDB中不需要显示用<code>INDEX</code>创建索引，天然在创建含主键的表时就会生成，要求尽量用<strong>自增id</strong>作为主键</p>
<p>由于聚餐索引也是数据物理存储的方式，因此<strong>一个表只有一个聚簇索引（这里也对应了一个表只能有一个主键）</strong>，如果没有主键也没有唯一索引，Innodb会自动隐式定义一个</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/clustered-index.png" width="80%"></p>
<h5 id="二级索引非聚簇索引可以有多个">2）二级索引（非聚簇索引）：可以有多个</h5>
<p>二级索引的叶子节点存数据时只存储<strong>索引值和主键值，而不是表中的所有数据，并按照索引值作为排序</strong>，因此在查询时需要先通过二级索引找到主键值，再通过主键值找到数据（也就是<strong>回表</strong>），所以二级索引的查询效率比聚簇索引低</p>
<p>聚簇索引与二级索引的比较：聚簇索引查询速度更快（不用回表），但是插入、更新、删除速度慢（因为任何字段的更改都会影响到聚簇索引）</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/secondary-index.png" width="80%"></p>
<h5 id="联合索引多个字段组合可以有多个">3）联合索引：多个字段组合，可以有多个</h5>
<p>联合索引根据从左到右的顺序建立，左边字段的排序优先于右边字段，联合索引的叶子节点存储的是<strong>联合索引字段的值+主键值</strong>，依然需要回表</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/union-index.png" width="80%"></p>
<p><strong>索引覆盖：</strong></p>
<p>如果<strong>查询的字段在全部在联合索引叶子结点</strong>中，那么可以直接通过索引找到数据，不需要回表，这种情况叫做<strong>索引覆盖</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 假设表中有字段：name、age、sex，联合索引为(age,sex)</span><br><span class="line"></span><br><span class="line"># <span class="number">1.</span> 回表索引：选择的列联合索引不能完全包含，需要回表</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 索引覆盖：选择的列联合索引完全包含，不需要回表</span><br><span class="line"><span class="keyword">SELECT</span> age <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="keyword">SELECT</span> age <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">12</span> <span class="keyword">AND</span> sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>最左匹配原则：</strong></p>
<p>如果查询条件中包含了<strong>联合索引的前缀</strong>，那么可以使用联合索引，否则无法使用</p>
<p>联合索引启用的时机：比如有字段<code>(name,age,sex)</code>组成的联合索引，最左的原则就是<code>name-&gt;age-&gt;sex</code>，当查询条件中包含<code>name</code>和<code>age</code>时（允许<code>name</code>和<code>age</code>的顺序可以颠倒），可以使用联合索引，但是如果只包含<code>age</code>和<code>sex</code>时，因为缺少最左的<code>name</code>字段，无法使用联合索引</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/left-match.png" width="80%"></p>
<h5 id="三种索引总结">4）三种索引总结</h5>
<table>
<thead>
<tr>
<th style="text-align: center;">索引类型</th>
<th style="text-align: center;">叶子节点存数据</th>
<th style="text-align: center;">查询效率</th>
<th style="text-align: center;">插删改效率</th>
<th style="text-align: center;">回表</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">聚簇索引</td>
<td style="text-align: center;">主键值+所有数据</td>
<td style="text-align: center;">高</td>
<td style="text-align: center;">较低</td>
<td style="text-align: center;">无</td>
</tr>
<tr>
<td style="text-align: center;">二级索引</td>
<td style="text-align: center;">索引值+主键值</td>
<td style="text-align: center;">较低</td>
<td style="text-align: center;">高</td>
<td style="text-align: center;">覆盖查询无，否则有</td>
</tr>
<tr>
<td style="text-align: center;">联合索引</td>
<td style="text-align: center;">索引值+主键值</td>
<td style="text-align: center;">较低</td>
<td style="text-align: center;">高</td>
<td style="text-align: center;">覆盖查询无，否则有</td>
</tr>
</tbody>
</table>
<h4 id="索引失效">3.5.3 索引失效</h4>
<p>当索引失效时会采用全表扫描，效率会降低</p>
<p><strong>1）模糊查询</strong></p>
<p>当使用模糊查询模糊查找后面的字符，如<code>like %xx</code>或者<code>like %xx%</code>而不是从开头第一个字符开始查询时，索引会失效</p>
<p><strong>2）表达式计算</strong></p>
<p>当查询条件中有表达式计算时，如<code>where age+1=12</code>，索引会失效</p>
<p><strong>3）数据类型隐式转换</strong></p>
<p>如<code>phoneNum</code>在表中用<code>varchar</code>存储，但是查询时用<code>int</code>类型，会导致索引失效</p>
<p><strong>4）联合索引非最左匹配</strong></p>
<h4 id="索引设计原则用还是不用">3.5.4 索引设计原则：用还是不用？</h4>
<p><strong>1）什么情况下适合加索引</strong></p>
<ul>
<li><strong>主键</strong>：主键是表的唯一标识，必须加索引</li>
<li><strong>唯一性约束（区分度高的列）</strong>：如学号具有唯一性，必须加索引来加快查询</li>
<li><strong>频繁用于WHERE查询（特别是update、delete的WHERE查询）</strong>：如果某个字段经常用于查询，可以加索引</li>
<li><strong>经常用DISTINCT（去重）、GROUP
BY</strong>：相同的组成一组（相同的自然就排序会排一起）</li>
<li><strong>经常用ORDER BY</strong>：索引天生适合order排序</li>
<li><strong>经常用于多表JOIN连接查询</strong>：如外键<code>ON a.id=b.id</code>，可以对<code>id</code>加索引，这里跟<code>WHERE</code>的原因类似</li>
<li><strong>字符串前缀创建索引</strong>：如使用模糊查询<code>like 'xx%'</code>时，可以截取前面一段<code>xx</code>作为索引，加快查询
<ul>
<li><code>ALTER table shop ADD INDEX address_index (address(10));</code></li>
<li>区分度原则：<code>select count(distinct a)/count(*) from shop;</code>计算区分度，一般超过30%就算比较高效的索引</li>
</ul></li>
</ul>
<p><strong>2）什么情况下不适合加索引</strong></p>
<ul>
<li><strong>在WHERE中使用不到的不用创造索引</strong></li>
<li><strong>数据量小的表不需要加索引</strong>：少于1000行的表不需要加索引（回表、索引占用磁盘等问题都会影响性能）</li>
<li><strong>有大量数据重复的列，区分度不高的列不适合加索引</strong>：如性别、是否等等</li>
<li><strong>频繁更新的字段不适合加索引</strong>：因为每次更新都会更新索引，影响性能(如用户余额不适合加索引)</li>
<li><strong>经常更新的表不适合加索引</strong>：因为每次更新都会更新索引，影响更新速度</li>
<li><strong>不建议用无序的值作为索引</strong>：因为B+树更适合升序排列，插入无序的值会破坏平衡，需要经常进行<strong>分裂</strong>、<strong>旋转</strong>等操作</li>
</ul>
<h4 id="两千万数据需要多高的树">3.5.5 两千万数据需要多高的树</h4>
<p>记：MySQL中，<strong>1页=16KB；主键为bigint类型一般占8Bytes；页号一般为4Bytes</strong></p>
<p><strong>1）计算索引层两层存多少个索引</strong></p>
<ul>
<li>第一层：
<ul>
<li>每个索引包括：<strong>索引值+页号</strong>，即8+4=12Bytes</li>
<li>一页可以存储：16KB/12Bytes=1333个索引</li>
</ul></li>
<li>第二层：
<ul>
<li>第一层中每个索引可以对应第二层的一页数据，即1333个索引对应1333个页</li>
<li>1333个页可以存储：1333*1333=1776889个索引</li>
</ul></li>
</ul>
<p><strong>2）计算叶子节点层可以存储多少个实际数据</strong></p>
<p>叶子节点中，每个节点存储的数据为<strong>一行数据</strong>，假设一行数据为<strong>1KB</strong>，则一页可以存储<strong>16KB/1KB=16行数据</strong></p>
<p>在第二层中的1776889个索引对应1776889个页，而每个索引对应一页叶子结点，也就是每个索引对应16行数据</p>
<p>所以总共可以存储**1776889*16=28430224行数据**</p>
<p><strong>3）总结</strong></p>
<p>因此两千万级别的数据需要树的高度为<strong>3层</strong></p>
<h4 id="索引优化">3.5.6 索引优化</h4>
<p><strong>1）索引覆盖</strong></p>
<p>尽量通过<strong>联合索引</strong>覆盖所有要查询的字段，减少回表</p>
<p><strong>2）主键自增</strong></p>
<p>主键索引采用自增字段可以减少<strong>页分裂，提高插入效率</strong></p>
<p><strong>3）删除不常用的索引</strong></p>
<p>通过<code>show index from table_name;</code>查看索引，删除不常用的索引</p>
<p><strong>4）减少索引失效</strong></p>
<p>在MySQL中，如果遇到字符串跟数字比较，<strong>会把字符串自动转换成数字</strong>再比较</p>
<ul>
<li>情况一：索引的字段是字符串，查询条件误写成数字
<ul>
<li>分析：由于触发<strong>字符串自动转换成数字</strong>，在该案例上<strong>索引的值正好是字符串</strong>，所以相当于该字段进行函数操作了，导致<strong>索引失效</strong></li>
</ul></li>
<li>情况二：索引的字段是数字，查询条件误写成字符串
<ul>
<li>分析：由于触发<strong>字符串自动转换成数字</strong>，也就是将查询条件转换成数字，不影响索引字段，因此<strong>索引有效</strong></li>
</ul></li>
</ul>
<h3 id="日志">3.6 日志</h3>
<p>MySQL的操作是先写<strong>日志</strong>，再写<strong>磁盘</strong>，这样可以保证数据的<strong>持久性</strong>，即使数据库崩溃，也可以通过日志来恢复数据</p>
<ul>
<li><code>undo log</code>记录的是<strong>此次事务执行前</strong>的数据状态</li>
<li><code>redo log</code>记录的是<strong>此次事务执行后</strong>的数据状态，用于重启后的回滚</li>
</ul>
<h4 id="慢查询日志用于优化">3.6.1 慢查询日志：用于优化</h4>
<p>可以用于SQL语句优化的</p>
<p><strong>定位慢查询语句</strong></p>
<p>用于找到执行较慢的sql语句，在调优时手动打开慢查询日志（平时默认关闭，可以减少存慢查询日志的操作）</p>
<p>查看是否开启慢查询日志：<code>show variables like '%long_query_time%';</code></p>
<p>开启慢查询日志：<code>set global long_query_time=1;</code></p>
<p>查看慢查询日志的路径：<code>show variables like '%Slow_queries%';</code></p>
<p>慢查询分析工具：<code>mysqldumpslow -a -s t -t 10 /var/log/mysql/mysql-slow.log</code>定位具体的查询语句，然后用<code>explain</code>和<code>show profile</code>查看执行计划并优化</p>
<p><strong>1）SQL语句优化</strong></p>
<ul>
<li><strong>减少磁盘I/O</strong>：
<ul>
<li>尽量<strong>使用索引</strong>，减少全表扫描</li>
<li>通过二级索引查询时尽量使用<strong>索引覆盖，也就是只查询索引包含的字段</strong>，也可以给经常查询的字段添加<strong>联合索引</strong>增加字段，减少回表</li>
</ul></li>
<li><strong>减少内存消耗</strong>：
<ul>
<li><strong>减少排序、分组等操作</strong>，尽量<strong>使用索引排序</strong></li>
<li><strong>减少事务持有锁的时间</strong>（如先执行不加锁的查询语句，再执行加锁的更新语句）</li>
</ul></li>
<li><strong>分批处理、增加redis热词缓存、主从复制从库负责读（分担主库压力）</strong></li>
</ul>
<p><strong>2）多表关联查询的优化：小表驱动大表</strong></p>
<p>左连接：</p>
<ul>
<li>在<code>SELECT * FROM a LEFT JOIN b ON a.id=b.id</code>中的<strong>被驱动表</strong><code>b</code>上的字段<code>id</code>加索引，可以加快查询速度
<ul>
<li><code>CREATE INDEX idx_b_id ON b(id);</code></li>
</ul></li>
<li>设计多表连接时<strong>ON</strong>连接的两个<strong>字段类型需要设计成相同</strong>，否则会导致<strong>索引失效</strong></li>
</ul>
<p>内连接：只会返回两个表中<strong>交集</strong>的数据，随便哪个字段做索引都可以，有索引的表会自动成为<strong>被驱动表</strong></p>
<p><strong>3）子查询优化：避免子查询</strong></p>
<p>子查询会建立<strong>临时表</strong>，而临时表<strong>无法建立索引</strong>，且<strong>创建和销毁</strong>临时表会消耗资源(CPU、IO)，所以尽量<strong>避免子查询</strong></p>
<ul>
<li>用<strong>JOIN</strong>代替子查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 任务：查询所有班长</span><br><span class="line"># 子查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> FORM student stu1</span><br><span class="line"><span class="keyword">WHERE</span> stu1.stuID <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> monitorID <span class="keyword">FROM</span> class</span><br><span class="line">    <span class="keyword">WHERE</span> monitorID <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># <span class="keyword">JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> stu.<span class="operator">*</span> <span class="keyword">FROM</span> student stu <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> class c</span><br><span class="line"><span class="keyword">ON</span> stu.stuID <span class="operator">=</span> c.monitorID</span><br><span class="line"><span class="keyword">WHERE</span> c.monitorID <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>
<p><strong>4）排序优化：加索引(分组也类似)</strong></p>
<ul>
<li>在<strong>ORDER
BY</strong>的字段上加<strong>索引</strong>，索引本身就是有序的</li>
<li>尽量增加<strong>limit</strong>限制，减少排序的数据量</li>
<li><code>ORDER BY</code>的顺序满足<strong>联合索引的最左匹配原则</strong>，否则联合索引会失效</li>
</ul>
<p>GROUP
BY的优化：where效率高于having，所以尽量在where中过滤数据不用分组语句</p>
<p><strong>5）分页优化</strong></p>
<p>在执行<code>SELECT * FROM student LIMIT 2000000,10</code>时，会先查询出2000010条数据，然后再取出10条，这样会消耗大量的资源</p>
<p>解决思路：尽量往主键索引靠，减少回表浪费前面查询的资源</p>
<ul>
<li><code>student</code>表中的<code>id</code>字段作为自增主键，然后<code>SELECT * FROM student WHERE id &gt; 2000000 LIMIT 10</code>就不用再回表</li>
</ul>
<p><strong>6）sql和索引都没问题：分批查询、分库分表、主从读写分离、缓存</strong></p>
<h4 id="undolog回滚日志">3.6.2 undolog回滚日志</h4>
<p>undolog存在<strong>Buffer
Pool</strong>中，也就是内存中，属于脏页数据，它的持久化是通过<strong>redo
log</strong>来保证的</p>
<p>回滚日志是用于当<strong>服务器崩溃或者事务回滚</strong>时，通过执行<strong>相反的操作</strong>来恢复数据的日志。</p>
<p>比如事务中<strong>删除一条数据</strong>，那么回滚日志就会记录一条<strong>插入</strong>操作</p>
<p>同时通过回滚版本链可以在MVCC中用于创建某个旧版本的<strong>快照</strong></p>
<p><code>undo-log</code>中记录的是旧版本的数据并形成<strong>数据版本链</strong>：</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/undo-log.png" width="50%"></p>
<h4 id="redolog重做日志">3.6.3 redolog重做日志</h4>
<p>不同于undolog，redo
log是<strong>磁盘</strong>上的<strong>物理日志</strong>，用于<strong>系统崩溃后重做提交的事务</strong>，但是也是先写进<strong>redo-log
buffer</strong>，再写进<strong>磁盘</strong>的</p>
<p><code>redo log</code> 也是为了防止 <code>Buffer Pool</code>
中的脏页丢失而设计的(只记录未被刷盘的数据的物理日志)</p>
<p>由于<code>redo log</code>是顺序写，所以写的速度比实际数据随机落盘快，同时由于其对数据恢复很重要，所以他的刷盘时机也有讲究：</p>
<p><strong>1）内存中的redo log buffer刷盘时机</strong></p>
<ul>
<li>redo log内存buffer满了，会刷盘</li>
<li>MySQL正常关闭</li>
<li>定时每<code>1s</code>刷盘一次</li>
<li>每次<strong>事务提交</strong>时刷盘</li>
</ul>
<p>其中<strong>事务提交</strong>时有三种刷屏方式可选择：</p>
<ul>
<li>commit时不刷盘</li>
<li>commit时将数据从用户态刷到内核态的page cache中但是不刷盘</li>
<li>commit时将数据刷盘到磁盘中持久化</li>
</ul>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/redo-log-buffer.png" width="50%"></p>
<p><strong>2）磁盘中的redo log循环写</strong></p>
<p><code>redo log</code>是<strong>循环写进本地磁盘</strong>的，写满会覆盖，所以<code>redo log</code>的大小是固定的，可以通过<code>innodb_log_file_size</code>来设置</p>
<p>循环写时<code>write pos</code>顺时针移动，当<code>write pos</code>追上<code>checkpoint</code>时就是满了，此时MySQL的所有操作都会被阻塞，通过<code>checkpoint</code>顺时针移动来实现擦除
- <img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/redo-log.png" width="50%"></p>
<p>其中<strong>蓝色区域</strong>代表数据还<strong>未写进本地表数据文件</strong>中，<strong>红色区域</strong>代表数据<strong>已经落盘</strong></p>
<h4 id="binlog二进制日志">3.6.4 binlog二进制日志</h4>
<p>binlog是在事务提交后记录<strong>表结构更新</strong>和<strong>数据更新</strong>的日志，不记录<strong>查询</strong>的日志</p>
<p>相比<code>redo log</code>，<code>binlog</code>是<strong>全量日志，写满会追加写</strong>，而<code>redo log</code>是<strong>循环写</strong>，写满会覆盖</p>
<p><strong>1）binlog实现主从复制：实现读写分离</strong></p>
<p><strong>mysql的主从设置可以通过中间件（如mycat）设置规则</strong></p>
<p>实际中考虑I/O限制，一般会有<strong>1主2~3从</strong>的架构，并采用<strong>异步复制</strong>，即主库提交事务后不等待从库的返回，直接返回给客户端</p>
<ul>
<li>step1：MySQL提交事务请求给主库后，主库会先写<code>binlog</code>后再更新本地存储数据</li>
<li>step2：然后<code>binlog</code>会发送复制给所有从库上写到<code>relay log</code>中继日志</li>
<li>step3：从库读取<code>relay log</code>，然后写入本地<code>binlog</code>，再更新本地存储数据</li>
</ul>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/binlog.png" width="70%"></p>
<p><strong>2）事务提交的两阶段提交</strong></p>
<p>原因：<code>redo log</code>和<code>binlog</code>的刷盘不能出现半成功，比如<code>redo log</code>刷盘更新了数据，<code>binlog</code>没刷盘，这样会导致数据不一致</p>
<p>解决：为了防止两份日志不一致，MySQL采用了两阶段提交<strong>准备pre阶段</strong>和<strong>提交commit阶段</strong>，由<strong>协调者</strong>和<strong>参与者</strong>共同完成</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/two-phase-commit.png" width="70%"></p>
<h4 id="三种日志的区别和关联">3.6.5 三种日志的区别和关联</h4>
<p>服务器宕机了怎么办？</p>
<ul>
<li>在 redo log 刷新到磁盘之前，都是回滚（通过 undo log）</li>
<li>如果 redo log 刷新到了磁盘，那么就是重做 redo log</li>
</ul>
<table>
<colgroup>
<col style="width: 5%">
<col style="width: 43%">
<col style="width: 6%">
<col style="width: 26%">
<col style="width: 3%">
<col style="width: 13%">
</colgroup>
<thead>
<tr>
<th style="text-align: center;">日志</th>
<th style="text-align: center;">作用</th>
<th style="text-align: center;">存储位置</th>
<th style="text-align: center;">是否持久化</th>
<th style="text-align: center;">是否可以恢复数据</th>
<th style="text-align: center;">层级</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">undo日志</td>
<td style="text-align: center;">实现<strong>原子性</strong>，用于MVCC和回滚</td>
<td style="text-align: center;">内存</td>
<td style="text-align: center;">否（持久化也是通过redo log保证的）</td>
<td style="text-align: center;">是</td>
<td style="text-align: center;">Innodb存储引擎</td>
</tr>
<tr>
<td style="text-align: center;">redo日志</td>
<td style="text-align: center;">实现<strong>持久性</strong>，用于系统崩溃后重做提交的事务（循环写）</td>
<td style="text-align: center;">磁盘</td>
<td style="text-align: center;">是</td>
<td style="text-align: center;">是</td>
<td style="text-align: center;">Innodb存储引擎</td>
</tr>
<tr>
<td style="text-align: center;">binlog日志</td>
<td style="text-align: center;">用于<strong>主从复制和数据备份</strong>，记录所有的DDL和DML操作（全量日志）</td>
<td style="text-align: center;">磁盘</td>
<td style="text-align: center;">是</td>
<td style="text-align: center;">是</td>
<td style="text-align: center;">server层</td>
</tr>
</tbody>
</table>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/log.png" width="70%"></p>
<h3 id="分库分表路由和切片">3.7 分库分表：路由和切片</h3>
<p>MySQL的高可用性体现在：</p>
<ul>
<li>主从复制下的读写分离</li>
<li>分库分表下的路由和切片</li>
<li>分布式事务下的分布式ID保证全局唯一</li>
</ul>
<h4 id="使用mysql分库分表中间件适用于小业务">3.7.1
使用MySQL分库分表中间件：适用于小业务</h4>
<p><strong>TDSQL</strong>：腾讯开源的分库分表中间件，支持<strong>读写分离</strong>、<strong>分库分表</strong>、<strong>分布式事务</strong>等功能，路由过程由中间件完成</p>
<h4 id="自定义分库分表的路由策略切片">3.7.2
自定义分库分表的路由策略：切片</h4>
<p>一般分库分表的路由策略有<strong>取模</strong>、<strong>范围</strong>、<strong>一致性哈希</strong>等方式实现切片</p>
<p><img src="/2024/04/12/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/sharding.png" width="70%"></p>
<h4 id="分布式id">3.7.3 分布式ID</h4>
<p><strong>1）分布式ID具有的特点</strong></p>
<ul>
<li><strong>全局唯一</strong>：必须保证生成的 ID
是全局性唯一的，这是分布式 ID 的基本要求；</li>
<li><strong>有序性</strong>：生成的 ID
需要按照某种规则有序，便于数据库的写入和排序操作；</li>
<li><strong>可用性</strong>：需要保证高并发下的可用性。除了对 ID
号码自身的要求，业务还对 ID
生成系统的可用性要求极高；如在asyncflow中拼接了表明，增加了task_id的可用性</li>
<li><strong>自主性</strong>：分布式环境下不依赖中心认证即可自行生成
ID；</li>
<li><strong>安全性</strong>：不暴露系统和业务的信息。在一些业务场景下，会需要
ID 无规则或者不规则。</li>
</ul>
<p><strong>2）分布式ID生成方案</strong></p>
<p>分布式ID的生成一般都由<strong>时间、机器ID、序列号</strong>等组成，其中高位的时间戳保证和放在低位的自增序列号保证有序性，机器ID保证唯一性</p>
<ul>
<li><strong>UUID</strong>
<ul>
<li>优点：全局唯一、本地生成没有网络消耗</li>
<li>缺点：无序、且占用空间大、有可能会暴露mac地址</li>
</ul></li>
<li><strong>雪花算法</strong>：Twitter开源的分布式ID生成算法
<ul>
<li>优点：可以保证高并发下的<strong>唯一性</strong>和<strong>单机的有序递增性</strong></li>
<li>缺点：强依赖于<strong>机器时钟</strong>，如果机器时钟回拨会导致ID重复</li>
</ul></li>
</ul>
<blockquote>
<p>参考：</p>
<ol type="1">
<li><p><a href="https://xiaolincoding.com/mysql/transaction/mvcc.html">事务隔离级别是怎么实现的？</a></p></li>
<li><p><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/MySQL%E5%AE%9E%E6%88%98%E5%AE%9D%E5%85%B8/08%20%20%E7%B4%A2%E5%BC%95%EF%BC%9A%E6%8E%92%E5%BA%8F%E7%9A%84%E8%89%BA%E6%9C%AF.md">08
索引：排序的艺术</a></p></li>
<li><p><a href="https://xiaolincoding.com/mysql/index/why_index_chose_bpuls_tree.html#%E6%80%8E%E6%A0%B7%E7%9A%84%E7%B4%A2%E5%BC%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%98%AF%E5%A5%BD%E7%9A%84">为什么
MySQL 采用 B+ 树作为索引？</a></p></li>
<li><p><a href="https://xiaolincoding.com/mysql/log/how_update.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81-undo-log">MySQL
日志：undo log、redo log、binlog 有什么用？</a></p></li>
<li><p><a href="https://zhuanlan.zhihu.com/p/534893180">分布式唯一 ID
生成方案浅谈</a></p></li>
</ol>
</blockquote>
<h2 id="四sql安全问题">四、SQL安全问题</h2>
<p>SQL会存在<strong>SQL注入</strong>问题，攻击者在<strong>HTTP包中注入一些SQL操作</strong>从而破坏数据库</p>
<p>预防办法：</p>
<ul>
<li>使用<strong>orm</strong>框架：摒弃手动拼接SQL语句，而是通过<strong>orm框架传参</strong>实现SQL操作</li>
<li>增强<strong>用户验证</strong></li>
<li>完善<strong>数据库操作最小权限</strong></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Redis数据库学习</title>
    <url>/2024/09/21/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="一redis数据结构">一、Redis数据结构</h1>
<h2 id="string">1. string</h2>
<h3 id="基本操作增删改查">1.1 基本操作：增删改查</h3>
<p>创建：</p>
<ul>
<li><code>set key value</code></li>
<li><code>setnx key value</code>：如果key不存在则设置，否则失败</li>
</ul>
<p>查询</p>
<ul>
<li><code>get key</code></li>
<li><code>mget key1 key2</code>：一次获取多个key的值</li>
</ul>
<p>更新</p>
<ul>
<li><code>set key value</code></li>
</ul>
<p>删除</p>
<ul>
<li><code>del key</code></li>
</ul>
<h3 id="底层实现">1.2 底层实现</h3>
<p>编码格式：</p>
<ul>
<li><code>int</code>：存储整数</li>
<li><code>embstr</code>：小于等于44字节的字符串（浮点型会被转换为字符串存储）</li>
<li><code>raw</code>：大于44字节的字符串</li>
</ul>
<h2 id="list">2. list</h2>
<p>list就是一个列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&quot;a&quot;, </span><br><span class="line">&quot;1234&quot;, </span><br><span class="line">&quot;@!=#&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="基本操作">2.1 基本操作</h3>
<p>list是允许双端操作的，不是完全的先入先出，也不是完全的后入先出</p>
<p>创建</p>
<ul>
<li><code>lpush key value1 value2</code>：从左边插入</li>
<li><code>rpush key value1 value2</code>：从右边插入</li>
</ul>
<p>查询</p>
<ul>
<li><code>llen key</code>：获取列表长度</li>
<li><code>lrange key start end</code>：获取指定范围的元素</li>
</ul>
<p>更新</p>
<ul>
<li><code>lpush key value1 value2</code>：从左边插入</li>
<li><code>rpush key value1 value2</code>：从右边插入</li>
<li><code>lpop key</code>：从左边弹出</li>
<li><code>rpop key</code>：从右边弹出</li>
</ul>
<p>删除</p>
<ul>
<li><code>del key</code></li>
<li><code>lrem key count value</code>：删除指定数量的元素，时间复杂度O(n)</li>
<li><code>ltrim key start end</code>：删除指定范围的元素，时间复杂度O(n)</li>
</ul>
<h3 id="底层实现-1">2.2 底层实现</h3>
<ul>
<li><code>ziplist</code>：压缩列表，用类似数组的结构存储数据，修改效率低</li>
<li><code>linkedlist</code>：双向链表，修改效率高</li>
<li><code>quicklist</code>：ziplist和linkedlist的结合体</li>
</ul>
<h2 id="set">3. set</h2>
<p>set适用于<strong>去重</strong>场景和<strong>交集场景</strong>，可以在<strong>点赞</strong>和<strong>共同关注</strong>等场景中使用</p>
<h3 id="基本操作-1">3.1 基本操作</h3>
<p>创建</p>
<ul>
<li><code>sadd key value1 value2</code>：添加元素</li>
</ul>
<p>查询</p>
<ul>
<li><code>sismember key value</code>：判断元素是否存在</li>
<li><code>smembers key</code>：获取所有元素的列表</li>
<li><code>SUNION key1 key2</code>：求并集，如用于共同关注的人</li>
</ul>
<p>更新</p>
<ul>
<li><code>sadd key value1 value2</code>：添加元素</li>
<li><code>srem key value1 value2</code>：删除元素</li>
</ul>
<p>删除</p>
<ul>
<li><code>del key</code></li>
</ul>
<h3 id="底层实现-2">3.2 底层实现</h3>
<ul>
<li><code>intset</code>：整数集合，元素都是整数（有序的，整体来看不依赖set的顺序）</li>
<li><code>hashtable</code>：哈希表，元素都是字符串（无序的）</li>
</ul>
<p>存在元素个数阈值，当元素个数小于512个时会用<code>intset</code>，否则会用<code>hashtable</code></p>
<h2 id="hash">4. hash</h2>
<h3 id="基本操作-2">4.1 基本操作</h3>
<p>创建</p>
<ul>
<li><code>hset key field1 value1 field2 value2</code>：添加元素</li>
<li><code>hsetnx key field value</code>：如果field不存在则设置，否则失败</li>
</ul>
<p>查询</p>
<ul>
<li><code>hget key field</code>：获取元素</li>
<li><code>hgetall key</code>：获取所有元素</li>
</ul>
<p>更新</p>
<ul>
<li><code>hset key field value</code>：添加元素</li>
<li><code>hdel key field</code>：删除元素</li>
</ul>
<p>删除</p>
<ul>
<li><code>del key</code></li>
</ul>
<h3 id="底层实现-3">4.2 底层实现</h3>
<p>都是无序的</p>
<ul>
<li><code>ziplist</code>：压缩列表，用类似数组的结构存储数据，修改效率低</li>
<li><code>hashtable</code>：哈希表，元素都是字符串（无序的）</li>
</ul>
<h2 id="zset">5. zset</h2>
<h3 id="基本操作-3">5.1 基本操作</h3>
<h3 id="底层实现-4">5.2 底层实现</h3>
<ul>
<li><code>ziplist</code>：压缩列表，用类似数组的结构存储数据，修改效率低，查找速度为<code>O(n)</code></li>
<li><code>skiplist</code>：<strong>跳表</strong>，类似于二分法，查找速度为<code>O(logn)</code></li>
</ul>
<p><strong>为什么用跳表而不用红黑树？</strong></p>
<p>跳表跟红黑树的查询时间复杂度都是<code>O(logn)</code>，但是跳表的<strong>实现更简单</strong>，而且跳表的<strong>范围查询效率更高</strong>；而<strong>平衡树插入和删除</strong>涉及<strong>旋转</strong>等操作，较为复杂</p>
<p>但是跳表的<strong>层数比较高</strong></p>
<p><strong>跳表插入一个数的层高是随机的，一开始默认1层，然后每增加一层的概率都是25%，最高为32层</strong></p>
<h1 id="二redis基础知识">二、Redis基础知识</h1>
<p>redis常用在<strong>热点词、排行榜、分布式锁<code>setnx</code></strong>等场景中</p>
<h2 id="redis的优点">1. redis的优点</h2>
<ul>
<li>读写性能高：redis是基于<strong>内存</strong>的，读写性能高</li>
<li>数据结构类型多：支持多种数据结构，如string、list、set、hash等
<ul>
<li>功能：支持<strong>事务、哨兵模式、主从复制、集群</strong>等功能来保证数据的<strong>安全性和高可用性</strong></li>
</ul></li>
</ul>
<h2 id="redis的单线程与多线程">2. redis的单线程与多线程</h2>
<p>redis<strong>主要处理逻辑是单线程</strong>的，主要的数据crud是短平快的，本身不会消耗很多时间，而如果像mysql一样用多线程还要考虑资源竞争、线程上下文切换、同步机制等开销，增加了维护难度，提高了系统复杂度，得不偿失：</p>
<ul>
<li>数据读写上：redis数据是通过内存的，所以瓶颈不在cpu</li>
</ul>
<p>随着高并发场景的普及，单核cpu也逐渐不够用了（不过redis的多线程是默认关闭的，可以在redis.config配置文件中打开）</p>
<p>redis的主要瓶颈在<strong>I/O处理</strong>上，所以采用<strong>epoll多路复用用+reactor模式</strong>来提高I/O处理效率。</p>
<ul>
<li>解包、回包用的是<strong>多线程</strong></li>
<li><strong>RDB</strong>全量备份时属于耗时操作，开一个单独进程来执行</li>
</ul>
<h2 id="缓存穿透缓存击穿缓存雪崩">3. 缓存穿透、缓存击穿、缓存雪崩</h2>
<ul>
<li>缓存穿透：<strong>Redis和MySQL都没有这个key</strong></li>
<li>缓击击穿：<strong>某个热点key失效</strong></li>
<li>缓存雪崩：<strong>大量key同时失效</strong></li>
</ul>
<h3 id="缓存穿透">3.1 缓存穿透</h3>
<p>缓存穿透是指<strong>查询一个一定不存在的数据</strong>，也就是<strong>redis和mysql都不存在这个key</strong>，会导致数据库压力过大</p>
<p>解决方案：</p>
<p><strong>1）布隆过滤器</strong></p>
<p>布隆过滤器将<strong>可能存在的key的哈希存到一个足够大的位数组</strong>中</p>
<ul>
<li><strong>能通过</strong>布隆过滤器的key<strong>不一定存在</strong></li>
<li>但是<strong>不能通过</strong>的key<strong>一定不存在</strong></li>
</ul>
<p><img src="/2024/09/21/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/blooming.png"></p>
<p><img src="/2024/09/21/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/blooming2.png"></p>
<p><strong>2）限流策略：漏斗算法、令牌桶</strong></p>
<ul>
<li><strong>漏斗算法</strong>：漏斗的流出速度是固定的，如果流入速度大于流出速度，那么就会溢出</li>
<li><strong>令牌桶</strong>：固定速率往桶里放令牌，请求来了就拿一个令牌，如果没有令牌则拒绝请求
<ul>
<li>优点：空闲时攒着令牌，用于应对突发流量</li>
</ul></li>
</ul>
<h3 id="缓存击穿">3.2 缓存击穿</h3>
<p>缓存击穿是指<strong>某个热点key失效</strong>，导致<strong>大量请求直接打到数据库</strong></p>
<p>解决方案：</p>
<p><strong>1）热点数据永不过期</strong></p>
<p>对于某些热点数据，可以设置<strong>永不过期</strong></p>
<p><strong>2）延迟过期时间</strong></p>
<p>设置<strong>窗口时间</strong>，窗口时间内key被频繁访问则<strong>延长过期时间</strong></p>
<h3 id="缓存雪崩常见于主redis宕机">3.3 缓存雪崩：常见于主redis宕机</h3>
<p>缓存雪崩是指<strong>大量key同时失效</strong>，导致<strong>大量请求直接打到数据库</strong></p>
<p>解决方案：</p>
<p>如果是普通失效，可以通过设置<strong>随机过期时间</strong>来避免同时失效，也可以类似于<strong>缓存击穿</strong>的解决方式设置<strong>窗口时间或永不过期</strong></p>
<p>如果是<strong>主redis宕机</strong>，可以通过<strong>从redis</strong>来解决</p>
<p><strong>1）主从redis</strong></p>
<p>设置<strong>主从redis集群</strong>，当主redis宕机时，可以通过<strong>重新选举新的主redis</strong>来继续提供缓存服务</p>
<p><strong>2）熔断</strong></p>
<p>当主redis宕机时，可以通过<strong>熔断</strong>来避免大量请求直接打到数据库，直接<strong>关掉</strong>缓存相关的一些<strong>次要服务</strong>，保证核心功能的正常运行</p>
<h2 id="redis持久化rdb和aof">4. redis持久化：RDB和AOF</h2>
<p>redis持久化是通过<strong>RDB和AOF</strong>实现，其中<strong>RDB</strong>（二进制文件）是使用<strong>快照</strong>可持久化，<strong>AOF</strong>（文本文件）是<strong>追加型日志</strong>；其中RDB在宕机时会出现较大的丢失，而AOF是用于恢复的，用默认everysec的话最多允许1s的数据丢失</p>
<p><strong>1）RDB</strong></p>
<p><strong>RDB</strong>是<strong>全量保存</strong>，操作量大，所以一般5min保存一次</p>
<p><strong>2）AOF</strong></p>
<p><strong>AOF是追加</strong>，操作量小，所以一般频率较高（1s）</p>
<p><strong>3）RDB和AOF的混合使用</strong></p>
<p>RDB是做备份用的，从缓存可以直接恢复，会比从db恢复快，所以一般也建议开启RDB。</p>
<p>在恢复时先将RDB的二进制数据以二进制的格式写入新的AOF文件中，其余的没来得及全量备份的数据可以通过以前的AOF来恢复</p>
<p>之后追加进AOF的新数据继续以AOF的文本格式追加</p>
<h2 id="redis的过期策略">5. redis的过期策略</h2>
<h3 id="定时删除">5.1 定时删除</h3>
<p><strong>每个key都会有一个定时</strong>器，到期后会被删除</p>
<p>缺点：每个key都要维护一个定时器，占用内存</p>
<h3 id="惰性删除">5.2 惰性删除</h3>
<p>当<strong>用户访问取key时才删除</strong></p>
<p>缺点：如果长期无操作则会逐渐导致内存泄漏</p>
<h3 id="定期删除">5.3 定期删除</h3>
<p>适合cpu能力较差的，所有key<strong>定期检查是否过期</strong></p>
<p>缺点：及时性有限，可能会存在有key过期了但还没被删除的情况</p>
<h3 id="定期惰性">5.4 定期+惰性</h3>
<p>redis采用的是<strong>定期+惰性</strong>的策略</p>
<h2 id="redis的内存淘汰策略">6. redis的内存淘汰策略</h2>
<p>内存回收触发时机：每次<strong>读写时都会检查内存是否超过限制</strong>，如果超过则会触发内存回收</p>
<h3 id="noeviction不淘汰默认的">6.1 noeviction不淘汰（默认的）</h3>
<p>redis默认采用不淘汰的方式，当内存超过限制时<strong>拒绝写入</strong></p>
<h3 id="lru淘汰最久未使用的key">6.2 lru：淘汰最久未使用的key</h3>
<p>lru是<strong>最久未使用</strong>的key</p>
<p>但是redis使用的是<strong>近似lru</strong>，因为标准lru是<strong>维护双端链表</strong>，内存成本大</p>
<p>近似lru是通过<strong>随机采样</strong>来实现的：每次淘汰时<strong>随机选取一部分key</strong>，然后淘汰其中最久未使用的key（<strong>根据最近使用时间排序</strong>）</p>
<h3 id="lfu淘汰使用频率最低的key">6.3 lfu：淘汰使用频率最低的key</h3>
<p>lfu记录上次访问的时间戳和累计访问次数，每次淘汰时<strong>选取访问次数最少的key</strong></p>
<p>其中如果一段时间内没有被访问，那么该key的访问次数会逐渐衰减</p>
<p>lfu相比lru好处在于：lru按照最近使用时间排序，可能会删除某个<strong>热点key</strong>，而lfu则是按照<strong>访问次数</strong>排序</p>
<h3 id="random随机淘汰设置了过期时间的key">6.4
random：随机淘汰设置了过期时间的key</h3>
<h2 id="redis的使用场景">7. redis的使用场景</h2>
<h3 id="redismysql保持一致性的方式旁路缓存">7.1
redis+mysql保持一致性的方式：旁路缓存</h3>
<p>旁路缓存遵循<strong>读更新redis、写删除redis</strong>的原则</p>
<ul>
<li>读：
<ul>
<li>先读redis</li>
<li>如果没有再读mysql，然后重新写入redis</li>
</ul></li>
<li>写：
<ul>
<li>先写mysql，再删除redis</li>
</ul></li>
<li>过期兜底：设置一个较短的过期时间，避免数据不一致</li>
</ul>
<h3 id="redis在秒杀中的作用削峰">7.2 redis在秒杀中的作用：削峰</h3>
<p>将redis当做<strong>消息队列</strong>使用，记录库存，当库存量少于0时，直接拒绝客户端请求</p>
<h3 id="redis的分布式锁">7.3 redis的分布式锁</h3>
<h4 id="加锁way1setnxpx">加锁way1：set+nx&amp;px</h4>
<p><strong>1）不直接使用setnx的原因：无法保证原子性</strong></p>
<p>在redis中，如果使用<code>setnx</code>无法直接设置过期时间，必须<code>setnx+expire</code></p>
<p>但是这样<strong>两个指令就无法保证原子性</strong>了</p>
<p>因此一般使用<strong>set+nx和px参数</strong></p>
<ul>
<li><code>nx</code>：如果key不存在则设置</li>
<li><code>px</code>：设置过期时间</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set lock_key unique_value nx px 10000</span><br></pre></td></tr></table></figure>
<p><strong>2）解锁：用lua保证原子性</strong></p>
<p>解锁有两个操作:</p>
<ul>
<li>判断锁的unique_value是否为准备执行解锁的客户端（key是锁的名字，values是owner保证原子性的，是锁持有者的id）</li>
<li>然后再解锁</li>
</ul>
<p>需要执行两个操作，不符合原子性，所以要用<code>lua脚本</code>来保证原子操作（lua本身不是原子操作，但是redis是单线程，所以可以保证操作的原子性）</p>
<h3 id="加锁way2redlock红锁">加锁way2：redlock红锁</h3>
<p><strong>1）用红锁的原因：单点故障锁尚未同步到子节点</strong></p>
<p>集群下有多个redis节点，客户端向主节点申请加锁，此时如果<strong>主节点单点故障</strong>了，新的主节点并没有同步锁的信息，导致其他客户端可以继续加锁</p>
<p><strong>2）解决方案：红锁保证超过半数子节点成功加锁</strong></p>
<ul>
<li>记录客户端刚发出加锁请求的时间点为<strong>t1</strong></li>
<li>客户端加锁操作不仅对主节点进行，还需要<strong>同时向超过半数的节点成功加锁</strong></li>
<li>拿到半数用户加锁的时间点<strong>t2-t1&lt;锁过期时间</strong>，则认为加锁成功
<ul>
<li>tips：如果完成加锁操作后锁已经过期了，那么也没有意义</li>
</ul></li>
</ul>
<h2 id="redis的集群模式主从复制模式哨兵模式hash切片集群">8.
redis的集群模式：主从复制模式、哨兵模式、hash切片集群</h2>
<p>redis提供三种集群模式：<strong>主从复制模式、哨兵模式、hash切片集群</strong></p>
<h3 id="主从复制模式读写分离">8.1 主从复制模式：读写分离</h3>
<p>多个节点，读写分离降低主节点压力，该模式下，主节点宕机不会自动选举新的主节点，因此需要<strong>手动恢复</strong></p>
<p>且数据同步跟主节点返回操作结果给客户端之间是<strong>异步</strong>的，所以可能会有<strong>数据不一致</strong>的情况</p>
<p><strong>redis主从复制的方式</strong>：</p>
<p>redis主从节点之间的连接方式是<strong>长连接</strong>的</p>
<ul>
<li><strong>新节点加入：全量复制</strong>：主节点将数据全部复制给<strong>新的从节点</strong></li>
<li><strong>旧的从节点：增量复制</strong>：主节点将<strong>增量数据</strong>复制给<strong>旧的从节点</strong>，从节点<strong>掉线后</strong>如果落后的不多也会用增量复制</li>
</ul>
<p><img src="/2024/09/21/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/redis主从复制.png"></p>
<h3 id="哨兵模式自动选举新的主节点">8.2
哨兵模式：自动选举新的主节点</h3>
<p>哨兵模式通过新增一个<strong>哨兵节点</strong>来监控主节点的状态，当主节点宕机时，哨兵节点会自动<strong>投票选举</strong>新的主节点，实现<strong>主从节点故障转移</strong></p>
<p><img src="/2024/09/21/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/redis哨兵模式.png"></p>
<h3 id="hash切片集群数据分片">8.3 hash切片集群：数据分片</h3>
<p>当一台机器无法承载时，可以通过切片方案将数据分布在不同机器上</p>
<p>redis<strong>没有一致性哈希</strong>的概念，而是使用<strong>2^14的哈希槽</strong>来实现的切片</p>
<p><img src="/2024/09/21/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/redis切片.png"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>SolveProgramLearningProblem</title>
    <url>/2022/12/08/SolveProgramLearningProblem/</url>
    <content><![CDATA[<h1 id="一python">一、Python</h1>
<h2 id="in-vscode">1.1 In VScode</h2>
<p>根据python的文件路径问题，其相对路径是从当前文件夹开始的，而不是从.py文件对应的文件夹开始的</p>
<ul>
<li>若有文件如下所示</li>
</ul>
<p><img src="/2022/12/08/SolveProgramLearningProblem/python_vscode_setpath1.png" width="%50" height="%50"></p>
<ul>
<li><p>想在<code>q_learning_agent.py</code>代码中调用<code>rectangle.png</code>文件</p></li>
<li><p>在<code>q_learning_agent.py</code>代码中相对路径应从最外层的文件夹开始写，也就是写成当前文件夹<code>./</code>而不是上一层文件夹<code>../</code></p>
<ul>
<li><p>正确写法：<code>imgpath="./img/rectangle.png"</code>，该写法的相对路径是从最外层文件夹开始的</p>
<p><img src="/2022/12/08/SolveProgramLearningProblem/python_vscode_setpath3.png" width="%50" height="%50"></p></li>
<li><p>错误写法：<code>imgpath="../img/rectangle.png"</code>，该写法认为相对路径是从<code>Q-learning</code>文件夹开始的</p>
<p><img src="/2022/12/08/SolveProgramLearningProblem/python_vscode_setpath4.png" width="%50" height="%50"></p></li>
</ul></li>
</ul>
<h1 id="二git使用">二、Git使用</h1>
<h2 id="git指令下载开源项目到本地">2.1 git指令下载开源项目到本地</h2>
<ul>
<li><p>先下载<code>Git for windows</code>软件</p></li>
<li><p>在本地盘中右键点击<code>Git Bash Here</code></p></li>
<li><p>进行基础配置，告诉git你是谁</p>
<ul>
<li>git config --global user.name "你的名字或昵称"
<ul>
<li>如：AkiraZheng</li>
</ul></li>
<li>git config --global user.email "你的邮箱"
<ul>
<li>如：1428384878@qq.com</li>
</ul></li>
</ul></li>
<li><p>克隆项目</p>
<ul>
<li>git clone 项目地址
<ul>
<li>其中项目地址是github项目<code>code</code>中的<code>http</code>链接,
项目地址形式为:https://gitee.com/xxx/xxx.git或者
git@gitee.com:xxx/xxx.git</li>
</ul></li>
<li>在弹出的窗口输入你的github账号密码信息
<ul>
<li>如果没弹出窗口则先输入<code>git config --system --unset credential.helper</code>再重新执行<code>git clone</code>指令</li>
</ul></li>
</ul></li>
</ul>
<h2 id="在linux下使用git上传项目">2.2 在Linux下使用git上传项目</h2>
<ul>
<li><a href="https://blog.csdn.net/qq_32348883/article/details/123035279">参考</a></li>
</ul>
<h3 id="将本地项目push到远程仓库的main分支中">2.2.1
将本地项目push到远程仓库的main分支中</h3>
<ul>
<li><p>1.进入项目文件夹</p>
<ul>
<li><code>cd 项目文件夹</code></li>
</ul></li>
<li><p>2.将项目上传到服务器</p></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd existing_repo</span><br><span class="line">git remote add origin git@github.com:AkiraZheng/MyWebServer.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -uf origin main</span><br></pre></td></tr></table></figure>
<ul>
<li><ol start="3" type="1">
<li>添加readme文件</li>
</ol></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;添加 README&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<h3 id="常用指令">2.2.2 常用指令</h3>
<ul>
<li><p>查看当前远程仓库地址</p>
<ul>
<li><code>git remote -v</code></li>
</ul></li>
<li><p>删除远程仓库地址</p>
<ul>
<li><code>git remote rm origin</code></li>
<li><code>git remote -v</code></li>
</ul></li>
<li><p>添加远程仓库地址</p>
<ul>
<li><code>git remote add origin git@github.com:AkiraZheng/MyWebServer.git</code></li>
</ul></li>
<li><p>将当前文件夹添加到新分支</p>
<ul>
<li><code>git branch -M master</code></li>
</ul></li>
<li><p>将当前文件夹上传到远程仓库的master分支</p>
<ul>
<li><code>git push -u origin master</code></li>
</ul></li>
<li><p>删除某个分支</p>
<ul>
<li><code>git branch -d 分支名</code></li>
</ul></li>
</ul>
<h3 id="举例更新项目到远程仓库">2.2.3 举例更新项目到远程仓库</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add *</span><br><span class="line">git commit -m &quot;更新项目&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<h1 id="三云服务器远程连接">三、云服务器远程连接</h1>
<h2 id="阿里云">1 阿里云</h2>
<h2 id="windows系统">1.1 windows系统</h2>
<ul>
<li><p>创建用于部署的端口号</p>
<ul>
<li><p>进入<a href="https://ecs.console.aliyun.com/server/">阿里云服务器控制台</a>选择对应的服务器点击进入</p></li>
<li><p>点击上方Tab的<code>安全组</code>-&gt;<code>管理规则</code>-&gt;<code>手动添加</code></p>
<p><img src="/2022/12/08/SolveProgramLearningProblem/aliyun_add_port.png" width="%50" height="%50"></p></li>
</ul></li>
<li><p>修改系统登录密码</p>
<ul>
<li><p>进入<a href="https://ecs.console.aliyun.com/server/">阿里云服务器控制台</a>选择对应的服务器点击进入</p></li>
<li><p>点击上方Tab的<code>实例详情</code>-&gt;<code>基本信息</code>-&gt;<code>重置密码</code></p>
<p><img src="/2022/12/08/SolveProgramLearningProblem/aliyun_change_password.png" width="%50" height="%50"></p></li>
<li><p>注意：不能修改登录名<code>administrator</code>，只能修改密码，否则会修改失败</p></li>
</ul></li>
<li><p>远程登录</p>
<ul>
<li><p>在自己的电脑主机中点击<code>开始</code>-&gt;<code>运行</code>-&gt;输入<code>mstsc</code>-&gt;<code>确定</code>-&gt;输入服务器的公网IP地址-&gt;<code>连接</code>-&gt;输入用户名<code>administrator</code>-&gt;输入密码-&gt;<code>确定</code></p></li>
<li><p>或者在电脑的搜索栏中搜索<code>远程桌面连接</code>，然后输入服务器的公网IP地址-&gt;<code>连接</code>-&gt;输入用户名<code>administrator</code>-&gt;输入密码-&gt;<code>确定</code></p></li>
</ul></li>
<li><p>远程文件传输</p>
<ul>
<li><a href="https://help.aliyun.com/zh/ecs/use-cases/use-mstsc-exe-to-upload-a-file-to-a-windows-instance">阿里云提供的上传文件功能</a>
<ul>
<li>1.在远程桌面连接前点击<code>显示选项</code>-&gt;<code>常规</code>Tab中<code>本地资源</code></li>
<li>2.直接在本机中通过复制粘贴传递文件</li>
</ul></li>
</ul></li>
</ul>
<h1 id="四使用visual-studio与github进行代码管理出现的问题">四、使用Visual
Studio与Github进行代码管理出现的问题</h1>
<h2 id="突然出现未能推送到远程仓库的问题">1.1
突然出现“未能推送到远程仓库”的问题</h2>
<ul>
<li><p>问题如下：</p>
<p><img src="/2022/12/08/SolveProgramLearningProblem/vs_pushError_code.png" width="%50" height="%50"></p></li>
<li><p><a href="https://blog.csdn.net/harry_yaya/article/details/107484793">解决方案</a></p>
<ul>
<li>1）首先先使用魔法科学上网</li>
<li>2）接着在cmd中测试能不能ping通github.com。<code>ping github.com</code>，针对ping不通的情况，需要修改hosts文件。</li>
<li>3）打开<code>C:\Windows\System32\drivers\etc</code>目录下的hosts文件</li>
</ul>
<p><img src="/2022/12/08/SolveProgramLearningProblem/vs_pushError_fixHosts.png" width="%50" height="%50"></p>
<ul>
<li>4）在hosts文件中添加如下内容并保存
<code>markdown       192.30.255.112  github.com git        185.31.16.184 github.global.ssl.fastly.net</code><br>
</li>
<li>5）再次在cmd中测试能不能ping通github.com。<code>ping github.com</code>，如果能ping通，就可以在vscode中进行push操作了。</li>
</ul></li>
</ul>
<h2 id="右侧工具栏消失">1.2 右侧工具栏消失</h2>
<ul>
<li><p>问题如下：</p>
<p><img src="/2022/12/08/SolveProgramLearningProblem/vs_no_rightTool.png" width="%50" height="%50"></p></li>
<li><p>解决方案</p>
<p>在VS软件的顶部点击<code>视图</code>,在试图下方点击<code>解决方案资源管理器</code></p>
<p><img src="/2022/12/08/SolveProgramLearningProblem/vs_no_rightTool_fix.jpg" width="%50" height="%50"></p></li>
<li><p>解决效果</p>
<p><img src="/2022/12/08/SolveProgramLearningProblem/vs_no_rightTool_result.png" width="%50" height="%50"></p></li>
<li><p>参考链接：<a href="https://blog.csdn.net/weixin_44143600/article/details/118654089#">Visual
Studio 2019解决右侧工具栏消失</a></p></li>
</ul>
]]></content>
      <tags>
        <tag>杂货铺-休闲</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode+Anaconda+Pycharm+JDK的Python和Java环境配置</title>
    <url>/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="一python部分">一、Python部分</h1>
<h2 id="首先安装anaconda">1.1 首先安装Anaconda</h2>
<p>Anaconda包含Python环境，可以建立管理多个不同版本的Python环境，安装它后就默认安装了python、IPython、集成开发环境Spyder和众多的包和模块，让你在管理环境和包时更加方便。</p>
<ul>
<li><p>从官网中下载Anaconda的exe文件</p></li>
<li><p>安装过程中注意勾选<strong>Alls Users</strong>和<strong>Add
Anaconda to the system PATH environment
variable</strong>，便于以后不用再配置路径</p></li>
</ul>
<h2 id="安装vscode">1.2 安装VScode</h2>
<p>我这里直接用Anaconda进行VScode下载</p>
<ul>
<li><p>运行Anaconda Navigator后，点击VS
Code位置下方的Install直接进行下载（由于我已经下载过了，因此按钮变成了Launch，没下载过的话按钮显示的是Install）</p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/1.png" width="80%" height="80%"></p></li>
</ul>
<h2 id="vscode中配置python环境">1.3 VScode中配置Python环境</h2>
<ul>
<li><p>安装Python插件</p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/2.png" width="80%" height="80%"></p></li>
<li><p>安装Code Runner插件</p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/3.png" width="80%" height="80%"></p></li>
<li><p>安装中文插件</p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/4.png" width="80%" height="80%"></p></li>
<li><p>安装python函数快速注释插件<code>autoDocstring</code></p>
<ul>
<li>使用方法：输入<code>"""</code>后回车</li>
</ul></li>
</ul>
<p>此时运行.py代码可以正常运行了，VScode中Pyhon环境搭建完毕</p>
<p>VScode中Pyhon环境搭建参考文章：<a href="https://zoyi14.smartapps.cn/pages/note/index?origin=share&amp;slug=ef1ae10ba950&amp;_swebfr=1&amp;_swebFromHost=baiduboxapp">Anaconda
+ VSCode 最详细教程</a></p>
<h2 id="pycharm中配置python环境">1.4 Pycharm中配置Python环境</h2>
<ul>
<li><p>Pycahrm需要在<strong>settings</strong>中跟conda的解析器关联起来</p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/5.png" width="60%" height="60%"></p></li>
<li><p>点击<strong>Project
Interpreter</strong>，点击右方的锯齿轮后点击<strong>Add</strong>,点击<strong>Conda
Environment</strong>和右边的<strong>Existing
environment</strong>，一路点OK即可</p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/6.png" width="100%" height="100%"></p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/7.png" width="100%" height="100%"></p></li>
</ul>
<h1 id="二java部分">二、Java部分</h1>
<h2 id="安装jdk">2.1 安装JDK</h2>
<ul>
<li><p>若有安装过Java，则首先在控制面板中卸载以前版本的Java</p></li>
<li><p>到<a href="https://www.oracle.com/java/technologies/downloads/#java11">甲骨文的官网中下载JDK</a>，我这里选择的是JDK11，直接下载exe文件</p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/8.png" width="80%" height="80%"></p></li>
<li><p>双击下载的exe文件一路无脑安转(只需要更改并记住安装路径)</p></li>
</ul>
<h2 id="配置java环境">2.2 配置Java环境</h2>
<ul>
<li><p>我的电脑处右键点击属性，找到并点击高级系统设置，点击环境变量</p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/9.png" width="50%" height="50%"></p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/10.png" width="60%" height="60%"></p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/11.png" width="60%" height="60%"></p></li>
<li><p>在系统变量(S)中点击新建</p>
<ul>
<li>设置JAVA_HOME：Name: <code>JAVA_HOME</code>，Value:
<code>你java的安装路径,bin文件夹所在的那个文件夹的路径</code></li>
</ul>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/12.png" width="80%" height="80%"></p>
<ul>
<li>双击系统变量(S)中的Path，添加两个变量<code>%JAVA_HOME%\bin</code>和<code>%JAVA_HOME%\jre\bin</code></li>
</ul>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/13.png" width="80%" height="80%"></p>
<ul>
<li>一路点确定即可</li>
</ul></li>
</ul>
<h2 id="vscode中配置java">2.3 VScode中配置Java</h2>
<ul>
<li><p>打开VScode安转Java插件<code>Extension Pack for Java</code></p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/14.png" width="80%" height="80%"></p></li>
<li><p>在设置中找到并打开settings.json文件，添加语句<code>"java.home": "你java的安装路径,bin文件夹所在的那个文件夹的路径",</code></p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/15.png" width="40%" height="40%"></p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/16.png" width="50%" height="50%"></p>
<p><img src="/2022/02/03/VScode-Anaconda-Pycharm-JDK%E7%9A%84Python%E5%92%8CJava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/17.png" width="100%" height="100%"></p></li>
</ul>
<p>此时运行.java代码可以正常运行了，VScode中Java环境搭建完毕</p>
<p>VScode中Java环境搭建参考视频：<a href="https://www.bilibili.com/video/BV16y4y177b9?from=search&amp;seid=14977310378351523965&amp;spm_id_from=333.337.0.0">保姆级Java环境配置与VSCode配置</a></p>
]]></content>
      <categories>
        <category>重装-环境配置-计算机</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>WebServer学习1：部署运行</title>
    <url>/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p>本项目是以Github上的开源项目<a href="https://github.com/qinguoyi/TinyWebServer">TinyWebServer</a>作为学习基础</p>
</blockquote>
<h2 id="一环境配置">一、环境配置</h2>
<h3 id="环境">1. 环境</h3>
<ul>
<li>服务器测试环境
<ul>
<li>Ubuntu版本22.04.1</li>
<li>MySQL版本8.0.36</li>
</ul></li>
<li>浏览器测试环境
<ul>
<li>Windows、Linux均可</li>
<li>Chrome</li>
<li>FireFox（本文调试环境为Linux下自带的FireFox）</li>
<li>其他浏览器暂无测试</li>
</ul></li>
</ul>
<h3 id="软件安装">2. 软件安装</h3>
<ul>
<li><p>安装VMware和Ubuntu</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_46653651/article/details/133420059">（一）TinyWebServer的环境配置与运行</a></li>
<li>这里Ubuntu可以在清华镜像中下载，否则很慢<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a></li>
</ul>
<p><img src="/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/config_qinghua1.png"></p>
<p><img src="/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/config_qinghua2.png"></p>
<p><img src="/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/config_qinghua3.png"></p></li>
<li><p>安装MySQL（中间可能会缺少一些东西，按照提示安装即可）</p>
<ul>
<li>打开终端输入：</li>
</ul>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装mysql</span></span><br><span class="line">sudo apt upgrade &amp;&amp; sudo apt install mysql-server mysql-client libmysqlclient-dev</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入mysql</span></span><br><span class="line">sudo mysql -u root</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出mysql</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置mysql远程连接</span></span><br><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改成</span></span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启mysql服务</span></span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>在终端创建TinyWebServer需要的数据库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入mysql</span></span><br><span class="line">sudo mysql -u root</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建数据库akiradb，可以改成自己想改的名字</span></span><br><span class="line">create database akiradb;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用数据库akiradb</span></span><br><span class="line">use akiradb;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建user表</span></span><br><span class="line">CREATE TABLE user(</span><br><span class="line">    username char(50) NULL,</span><br><span class="line">    passwd char(50) NULL</span><br><span class="line">)ENGINE=InnoDB;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加数据</span></span><br><span class="line">INSERT INTO user(username, passwd) VALUES(&#x27;akira&#x27;, &#x27;akira&#x27;);</span><br></pre></td></tr></table></figure></p></li>
<li><p>补充：一些常用的mysql命令（mysql语句一般都需要分号;作为结尾）
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有数据库</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除数据库akiradb</span></span><br><span class="line">drop database akiradb;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有表</span></span><br><span class="line">show tables;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择user表中的所有数据</span></span><br><span class="line">select * from user;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除表user</span></span><br><span class="line">drop table user;</span><br></pre></td></tr></table></figure></p></li>
<li><p>退出mysql后在终端查询数据库状态 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看mysql状态</span></span><br><span class="line">sudo service mysql status</span><br></pre></td></tr></table></figure>
<img src="/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/mysql_status.png"></p></li>
</ul></li>
</ul>
<blockquote>
<p>在centos安装mysql的时候可以参考https://blog.csdn.net/weixin_45031801/article/details/139429231，但是要注意出现<code>See "systemctl status mysqld.service" and "journalctl -xe" for details</code>报错时，要将连接里的增加<code>skip-grant-tables</code>代码先加完再启动</p>
</blockquote>
<h2 id="二tinywebserver代码">二、TinyWebServer代码</h2>
<h3 id="代码下载">1. 代码下载</h3>
<ul>
<li>下载TinyWebServer代码
<ul>
<li><a href="https://github.com/qinguoyi/TinyWebServer">TinyWebServer</a></li>
</ul></li>
<li>使用git 克隆到本地 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 没有git的使用下面命令(有git忽略此步骤)</span></span><br><span class="line">sudo apt install git -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行下面的命令吧项目克隆到本地</span></span><br><span class="line">git clone https://github.com/qinguoyi/TinyWebServer.git</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="代码编译">2. 代码编译</h3>
<ul>
<li><p>git后项目就会出现在桌面上，进入项目文件夹，修改main.cpp文件配置</p></li>
<li><p>打开main.cpp修改对应配置（直接在TinyWebServer文件夹点击main.cpp修改即可）</p>
<ul>
<li>获得需要的mysql的用户名和密码（需要先按照vim） <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">   cd /etc/mysql</span><br><span class="line">sudo vim debian.cnf</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/mysql_user.png"></p>
<ul>
<li>修改main.cpp文件</li>
</ul>
<p><img src="/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/main_cpp.png"></p></li>
<li><p>编译运行 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入项目文件夹</span></span><br><span class="line">cd TinyWebServer</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">./server</span><br></pre></td></tr></table></figure>
注意：这里的<code>make</code>指令也可以换成<code>sh ./build.sh</code></p></li>
<li><p>编译时出现错误：</p>
<ul>
<li><code>fatal error: mysql.h: No such file or directory</code>:安装链接库
<code>apt-get install libmysqlclient-dev</code></li>
<li>g++编译时：<code>No such file or directory</code>:<code>sudo apt-get install g++</code></li>
</ul></li>
<li><p>运行并用浏览器访问</p>
<ul>
<li>终端中执行<code>./server</code></li>
<li>浏览器输入<code>http://localhost:9006</code>即可访问(也可输入回环IP地址，如<code>http://127.0.0.1:9006</code>)</li>
</ul></li>
</ul>
<h2 id="三windows下使用sshvscode远程连接ubuntu">三、Windows下使用ssh+VSCode远程连接Ubuntu</h2>
<h3 id="部署linux和windows下的vscode环境">1.
部署Linux和Windows下的VScode环境</h3>
<ul>
<li><p>在Linux下安装VSCode</p>
<ul>
<li>打开应用商店搜索<code>VSCode</code>安装即可</li>
</ul>
<p><img src="/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/vscode_linux.png"></p></li>
<li><p>按照<a href="https://www.bilibili.com/video/BV1MN411T71b/?spm_id_from=333.999.0.0">VSCode远程连接Ubuntu</a>的步骤即可</p></li>
</ul>
<h3 id="在linux下运行本文代码-在windows下运行本文代码">2.
在Linux下运行本文代码 &amp;&amp; 在Windows下运行本文代码</h3>
<ul>
<li><p>在Linux下运行本文代码</p>
<ul>
<li>在VSCode中打开<code>TinyWebServer</code>文件夹</li>
<li>在VSCdoe中打开终端，输入<code>./server</code>运行(如果还没make要先执行<code>make</code>)</li>
<li>浏览器输入<code>http://localhost:9006</code>即可访问</li>
</ul>
<p><img src="/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/vscode_linux_run.png"></p></li>
<li><p>在Linux中将TinyWebServer文件夹另存为一个工作区</p></li>
</ul>
<p><img src="/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/vscode_linux_save.png"></p>
<ul>
<li>在Windows下运行本文代码
<ul>
<li>根据上面部署视频中打开我们刚才生成的工作区就行</li>
<li>然后同样在Windows下的VSCode中打开终端，输入<code>./server</code>运行(如果还没make要先执行<code>make</code>)</li>
</ul>
<img src="/2024/02/28/WebServer%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/vscode_windows_run.png"></li>
</ul>
<h3 id="vmware中ubuntu出现内存不足需要扩容">3.
VMWare中Ubuntu出现内存不足需要扩容</h3>
<p>首先关闭虚拟机，在VMWare中选择<code>编辑虚拟机设置</code>，然后选择<code>处理器和内存</code>，然后打开虚拟机，通过<code>gparted</code>扩容</p>
<p>具体扩容操作参考<a href="https://blog.csdn.net/qq_34160841/article/details/113058756">vmware：ubuntu虚拟机如何扩容？</a></p>
<p>如果遇到权限不足问题，可以参考<a href="https://blog.csdn.net/ningmengzhihe/article/details/127295333">GParted给ubuntu系统磁盘resize大小时候出现cannot
resize read-only file system解决办法</a></p>
<h2 id="四总结">四、总结</h2>
<p>全部部署完就可以开启源代码的学习啦~</p>
]]></content>
      <categories>
        <category>WebServer项目（C++）</category>
      </categories>
  </entry>
  <entry>
    <title>WebServer学习2：从Config文件了解Makefile编译</title>
    <url>/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h2 id="一c终端编译的命令行解析">一、C++终端编译的命令行解析</h2>
<h3 id="int-mainint-argc-char-argv">1. int main(int argc, char
*argv[])</h3>
<ul>
<li>argc：命令行参数的个数</li>
<li>argv：命令行参数的数组
<ul>
<li>argv[0]：程序名</li>
<li>argv[1]：第一个参数</li>
</ul></li>
</ul>
<h3 id="getopt函数">2. getopt()函数</h3>
<ul>
<li>作用：自动从命令行参数中获取选项</li>
<li>头文件：#include &lt;unistd.h&gt;</li>
<li>函数原型：int getopt(int argc, char * const argv[], const char
*optstring);
<ul>
<li>argc：命令行参数的个数</li>
<li>argv：命令行参数的数组</li>
<li>optstring：选项字符串
<ul>
<li>选项字符串说明: "p:l:m:o:s:t:ca::"
<ul>
<li>p: 表示选项p后面必须跟一个参数</li>
<li>c 表示选项c后面不可以跟参数</li>
<li>a::表示选项a后面可以跟一个参数，也可以不跟参数</li>
</ul></li>
</ul></li>
<li>optarg：是一个全局变量，指向<code>当前选项的参数值</code>
<ul>
<li>例如：-p
8080，optarg指向<code>当前选项p</code>的参数值，即<code>8080</code></li>
</ul></li>
</ul></li>
</ul>
<h3 id="代码示例">3. 代码示例</h3>
<ul>
<li><p>config.h文件 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span> <span class="comment">//getopt</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Config</span>();</span><br><span class="line">    ~<span class="built_in">Config</span>()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parse_arg</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>;<span class="comment">//实现命令行参数解析</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//端口号</span></span><br><span class="line">    <span class="keyword">int</span> PORT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志写入方式:0同步 1异步</span></span><br><span class="line">    <span class="keyword">int</span> LOGWrite;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//触发组合模式listenfd LT：0 ET：1</span></span><br><span class="line">    <span class="keyword">int</span> TRIGMode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//listenfd触发模式</span></span><br><span class="line">    <span class="keyword">int</span> LISTENTrigmode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//connfd触发模式</span></span><br><span class="line">    <span class="keyword">int</span> CONNTrigmode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//优雅关闭连接</span></span><br><span class="line">    <span class="keyword">int</span> OPT_LINGER;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据库连接池数量</span></span><br><span class="line">    <span class="keyword">int</span> sql_num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池内的线程数量</span></span><br><span class="line">    <span class="keyword">int</span> thread_num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否关闭日志</span></span><br><span class="line">    <span class="keyword">int</span> close_log;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//并发模型选择:Reactor/Proactor</span></span><br><span class="line">    <span class="keyword">int</span> actor_model;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p></li>
<li><p>config.cpp文件 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Config::<span class="built_in">Config</span>()&#123;</span><br><span class="line">    <span class="comment">//构造函数,初始化默认参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//端口号,默认6666</span></span><br><span class="line">    PORT = <span class="number">6666</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志写入方式,默认同步</span></span><br><span class="line">    LOGWrite = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//server listen和conn的I/O复用组合触发模式</span></span><br><span class="line">    <span class="comment">//默认listenfd LT + connfd LT(LT是水平触发)</span></span><br><span class="line">    TRIGMode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//listenfd触发模式,默认LT</span></span><br><span class="line">    LISTENTrigmode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//connfd触发模式,默认LT</span></span><br><span class="line">    CONNTrigmode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//优雅关闭连接,默认不使用</span></span><br><span class="line">    OPT_LINGER = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据库连接池数量(数据库线程池),默认8</span></span><br><span class="line">    sql_num = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池内的线程数量,默认8,这个参数可以根据服务器的负载情况进行调整</span></span><br><span class="line">    thread_num = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否关闭日志,默认不关闭</span></span><br><span class="line">    close_log = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//并发模型选择,默认proactor</span></span><br><span class="line">    actor_model = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Config::parse_arg</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//argc是参数个数(至少为1);argv是参数数组,argv[0]是程序名</span></span><br><span class="line">    <span class="keyword">int</span> opt;<span class="comment">//用于保存getopt的返回值</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>*str = <span class="string">&quot;p:l:m:o:s:t:c:a:&quot;</span>;<span class="comment">//选项字符串,每个选项后面的冒号表示该选项后面需要接一个参数</span></span><br><span class="line">    <span class="keyword">while</span> ((opt=<span class="built_in">getopt</span>(argc, argv, str)) != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">//getopt是个迭代器,每次取出一个选项,并将选项对应的参数赋值给全局变量optarg</span></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (opt)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:&#123;</span><br><span class="line">            PORT = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">            <span class="comment">// cout &lt;&lt; &quot;PORT = &quot; &lt;&lt; PORT &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;l&#x27;</span>:&#123;</span><br><span class="line">            LOGWrite = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span>:&#123;</span><br><span class="line">            TRIGMode = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:&#123;</span><br><span class="line">            OPT_LINGER = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:&#123;</span><br><span class="line">            sql_num = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:&#123;</span><br><span class="line">            thread_num = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:&#123;</span><br><span class="line">            close_log = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:&#123;</span><br><span class="line">            actor_model = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>main.cpp文件 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;config.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//mySql配置</span></span><br><span class="line">    string user = <span class="string">&quot;debian-sys-maint&quot;</span>;</span><br><span class="line">    string password = <span class="string">&quot;AwGW2dQW8v5oJQk0&quot;</span>;</span><br><span class="line">    string database = <span class="string">&quot;akiradb&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// //命令行解析</span></span><br><span class="line">    Config config;<span class="comment">//配置参数只在程序启动时使用一次</span></span><br><span class="line">    config.<span class="built_in">parse_arg</span>(argc, argv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>task.json文件 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppbuild&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;C/C++: g++ 生成活动文件&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;/usr/bin/g++&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-fdiagnostics-color=always&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-g&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;/config.cpp&quot;</span>,<span class="comment">//需要某个文件的路径，可以直接写路径，也可以用$&#123;fileDirname&#125;来获取当前文件的路径</span></span><br><span class="line">                <span class="comment">// &quot;$&#123;fileDirname&#125;/*.cpp&quot;,//写c++把 *.c 换成 *.cpp；linux中使用 / 来分割，windows中使用 \ 来分割。试过了没用</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;group&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;调试器生成的任务。&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>launch.json文件 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(gdb) 启动&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;为 gdb 启用整齐打印&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="二在linuxvscode环境下编译c程序">二、在Linux+VSCode环境下编译C++程序</h2>
<h3 id="通过配置.json文件实现编译多文件编译">1.
通过配置.json文件实现编译(多文件编译)</h3>
<p>由于当前是多文件编译,所以如果使用系统默认的<code>tasks.json</code>文件,直接编译运行会报错</p>
<p><img src="/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/run_error.png"></p>
<p>从报错中我们可以看到,显示的是没有定义构造函数<code>Config::Config()</code>,也没有定义<code>Config::parse_arg</code>函数,但是我们明明已经在.cpp中实现了</p>
<p>所以可以初步判断是编译的时候没有链接到.cpp文件.所以肯定是<code>tasks.json</code>文件的问题,需要实现多文件编译的配置</p>
<ul>
<li>修改tasks.json文件</li>
</ul>
<p><img src="/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/change_task_json.png"></p>
<p>此时修改完就发现可以正常编译了,我们先运行生成可执行文件,然后在终端输入解析参数来测试</p>
<p><img src="/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/json_test.png"></p>
<p>但是我们会发现每写一个.cpp文件都需要在<code>tasks.json</code>文件中添加一次,这样非常麻烦,所以我们可以使用<code>Makefile</code>文件来实现多文件编译</p>
<h3 id="通过makefile文件实现编译多文件编译">2.
通过Makefile文件实现编译(多文件编译)</h3>
<h3 id="从终端g编译.o文件开始">2.1
从终端g++编译<code>.o</code>文件开始</h3>
<ul>
<li>一次性编译所有的.cpp文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成可执行文件</span></span><br><span class="line">g++ main.cpp config.cpp -o main</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">./main -p 100</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录下的文件</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p><img src="/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/makefile_shell1.png"></p>
<p>这种编译方式有个缺点,就是每次修改了一个.cpp文件,就需要重新编译所有的.cpp文件,而且随着项目体量增大,需要在终端写的.cpp文件也越来越多</p>
<ul>
<li>优化一下,通过单独编译每个.cpp文件,然后再链接成可执行文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成单个.o文件</span></span><br><span class="line">g++ config.cpp -c</span><br><span class="line">g++ main.cpp -c</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 链接所有.o文件成可执行文件</span></span><br><span class="line">g++ *.o -o main</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录下的文件</span></span><br><span class="line">ll</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有.o文件</span></span><br><span class="line">rm *.o</span><br></pre></td></tr></table></figure>
<p><img src="/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/makefile_shell2.png"></p>
<p>然后修改了某个文件后,单独编译修改的那个文件后直接链接就行,不需要重新编译所有的.cpp文件,但是这样还是不够优雅,每次编译都要自己手动写重复的命令,所以我们可以使用<code>Makefile</code>文件来实现多文件编译</p>
<h3 id="通过makefile文件实现多文件编译">2.2
通过Makefile文件实现多文件编译</h3>
<p>参考<a href="https://www.bilibili.com/video/BV188411L7d2/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=fa61c94b4d0a0af186e3cb794e46eea9">Makefile教程</a></p>
<ul>
<li>第一个版本:简单将刚刚终端的命令写入Makefile文件</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Version 1</span></span><br><span class="line"><span class="section">test: main.cpp config.cpp</span></span><br><span class="line">	g++ -o test main.cpp config.cpp</span><br></pre></td></tr></table></figure>
<p>在终端输入<code>make</code>命令,就会自动编译了</p>
<p><img src="/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/makefile_shell3.png"></p>
<ul>
<li>第二个版本:优化一下,通过变量来定义文件名和编译器</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Version 2</span></span><br><span class="line">CXX = g++</span><br><span class="line">TARGET = test</span><br><span class="line">OBJS = main.o config.o</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line">	<span class="variable">$(CXX)</span> -o <span class="variable">$(TARGET)</span> <span class="variable">$(OBJS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.cpp</span></span><br><span class="line">	<span class="variable">$(CXX)</span> -c main.cpp</span><br><span class="line"></span><br><span class="line"><span class="section">config.o: config.cpp</span></span><br><span class="line">	<span class="variable">$(CXX)</span> -c config.cpp</span><br></pre></td></tr></table></figure>
<p>在终端输入<code>make</code>命令,就会自动编译了</p>
<p><img src="/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/makefile_shell4.png"></p>
<ul>
<li>第三个版本:简化生成规则</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Version 3</span></span><br><span class="line">CXX = g++</span><br><span class="line">TARGET = test</span><br><span class="line">OBJS = main.o config.o</span><br><span class="line"></span><br><span class="line"><span class="comment">## 编译选项 -c 表示编译链接分开进行 -Wall 表示显示所有警告信息</span></span><br><span class="line">CXXFLAGS = -c -Wall</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line">	<span class="variable">$(CXX)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化所有的.o文件的生成规则</span></span><br><span class="line"><span class="section">%.o: %.cpp</span></span><br><span class="line">	<span class="variable">$(CXX)</span> <span class="variable">$(CXXFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.o <span class="variable">$(TARGET)</span></span><br></pre></td></tr></table></figure>
<p>在终端输入<code>make</code>命令,就会自动编译了,执行<code>make clean</code>命令,就会自动删除所有的.o文件和可执行文件</p>
<p><img src="/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/makefile_shell5.png"></p>
<p>第三个版本在有新的文件需要编译时,直接在<code>OBJS</code>处添加新的文件名就行,不需要再添加新的生成规则,非常方便</p>
<ul>
<li>第四个版本:</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Version 4</span></span><br><span class="line">CXX = g++</span><br><span class="line">TARGET = test</span><br><span class="line"><span class="comment"># 自动实现把当前目录下的所有.cpp文件转换成.o文件</span></span><br><span class="line">SRC = <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line"><span class="comment"># 当目录下还有timer文件夹,取消注释下面的代码,可以将timer文件夹下的所有.cpp文件加入到SRC中</span></span><br><span class="line"><span class="comment">#SRC += $(wildcard timer/*.cpp)</span></span><br><span class="line">OBJS = <span class="variable">$(<span class="built_in">patsubst</span> %.cpp, %.o, <span class="variable">$(SRC)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译选项 -c 表示编译链接分开进行 -Wall 表示显示所有警告信息</span></span><br><span class="line">CXXFLAGS = -c -Wall</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line">	<span class="variable">$(CXX)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化所有的.o文件的生成规则</span></span><br><span class="line"><span class="section">%.o: %.cpp</span></span><br><span class="line">	<span class="variable">$(CXX)</span> <span class="variable">$(CXXFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.o <span class="variable">$(TARGET)</span></span><br></pre></td></tr></table></figure>
<p><img src="/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/makefile_shell6.png"></p>
<p>第四个版本就可以实现自动编译当前目录下的所有.cpp文件,当有新的文件时都不用重新修改Makefile文件</p>
<h2 id="三在linux下使用gdb调试c程序">三、在Linux下使用gdb调试C++程序</h2>
<p>未完待续......</p>
<h2 id="四总结">四、总结</h2>
<p>本文主要是讲解了C++终端编译的命令行解析</p>
<p>然后通过配置.json文件实现编译(多文件编译)</p>
<p>最后通过Makefile文件实现编译(多文件编译)</p>
<p>并且通过四个版本的Makefile文件来由浅入深实现编译(多文件编译)</p>
<p>所有编译问题都解决了,接下来我们就开始从socket和epool实现I/O复用通信开始学习WebServer项目的代码：<a href="https://akirazheng.github.io/2024/03/04/WebServer%E5%AD%A6%E4%B9%A03%EF%BC%9Asocket%E7%BC%96%E7%A8%8B%E4%B8%8Eepoll%E5%AE%9E%E7%8E%B0I-O%E5%A4%8D%E7%94%A8/">WebServer学习3：socket编程与epoll实现I/O复用</a></p>
]]></content>
      <categories>
        <category>WebServer项目（C++）</category>
      </categories>
  </entry>
  <entry>
    <title>WebServer学习3：socket编程与epoll实现I/O复用</title>
    <url>/2024/03/04/WebServer%E5%AD%A6%E4%B9%A03%EF%BC%9Asocket%E7%BC%96%E7%A8%8B%E4%B8%8Eepoll%E5%AE%9E%E7%8E%B0I-O%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一socket编程">一、socket编程</h2>
<p>socket是一种文件描述符，也是一种通信机制的实现，可选地实现TCP或者UDP通信</p>
<p>以TCP实现socket通信为例，C/S模型中，服务器端和客户端分别创建一个socket，然后通过socket的
<strong>(bind、listen、accept)(服务端）</strong>、<strong>connect（客户端）</strong>等函数来实现通信</p>
<p>客户端通过bind绑定本地端口和IP，然后启动listen监听端口，当有客户端connect发起连接请求时，accept函数接受连接请求，server获得一个新的client
socket，然后通过这个新的socket来进行通信</p>
<p>如果我们要判定服务器中一个网络程序有没有启动，可以通过
<code>netstat</code> 命令查看对应的端口号是否有被监听。</p>
<p>C/S模式下的TCP服务器与TCP客户端的工作流程如下(B/S模式也类似)：</p>
<p><img src="/2024/03/04/WebServer%E5%AD%A6%E4%B9%A03%EF%BC%9Asocket%E7%BC%96%E7%A8%8B%E4%B8%8Eepoll%E5%AE%9E%E7%8E%B0I-O%E5%A4%8D%E7%94%A8/connect_TCP.png" width="60%"></p>
<h2 id="二io复用">二、I/O复用</h2>
<p>I/O复用是在单个进程中<strong>同时跟踪监控（记录）多个文件描述符（Socket
I/O流）的状态</strong>，来达到不必为每个fd都创建一个监控线程的目的。（通过I/O多路复用，可以将监听的fd设置成非阻塞的，这样就不会阻塞整个进程）</p>
<p>当多个文件描述符中的任意一个准备好进行I/O操作时，询问线程再通知处理数据的线程发起recvfrom请求去读取数据</p>
<p>通过<strong>请求队列来处理多客户端连接问题</strong>，提高服务器的并发性能</p>
<p>Linux下，实现socket
I/O复用的技术有<strong>select、poll、epoll</strong>等，进程可以通过这些技术发起I/O多路复用的系统调用，其中epoll在处理高并发场景下是性能最高的，Nginx、Redis等都是基于epoll实现的</p>
<p>而且常见的<strong>select、poll、epoll</strong>都是同步阻塞的（socket可以是非阻塞的），因此本项目最后会通过<strong>线程池</strong>来实现并发处理，<strong>为每个就绪的文件描述符分配一个逻辑单元（线程）</strong>来处理</p>
<h3 id="select">1. select</h3>
<p>select是最古老的I/O复用技术，使用<strong>线性结构</strong>来表示fd集合，它的缺点是<strong>最大文件描述符数量受限</strong>，32位系统的fd限制为1024，64位系统的fd限制为2048，文件描述符的限制是由操作系统决定的(可以通过修改配置来改变)</p>
<p>且<strong>每次调用select都需要将fd集合从用户态拷贝到内核态</strong>，效率较低</p>
<p>select是采用<strong>轮询</strong>方式来监测就绪事件的，每次调用select都会遍历所有的fd，时间复杂夫为O(n)</p>
<p><img src="/2024/03/04/WebServer%E5%AD%A6%E4%B9%A03%EF%BC%9Asocket%E7%BC%96%E7%A8%8B%E4%B8%8Eepoll%E5%AE%9E%E7%8E%B0I-O%E5%A4%8D%E7%94%A8/select.png" width="60%"></p>
<h3 id="poll">2. poll</h3>
<p>poll是对select的改进，原理相似，都需要来回拷贝全部监听的文件描述符，它采用<strong>链表</strong>代替select的fd_set结构，<strong>理论上可以支持无限个fd</strong></p>
<p>poll的效率比select高，但是<strong>当文件描述符数量较大时，效率依然不高</strong>，因为poll也是采用轮询的方式来监测就绪事件，但是事实上同一时间内，大量的<strong>客户端只有少量处于活跃的就绪状态</strong>，因此随着fd的增长，不断轮询所有fd的方法会导致效率线性下降</p>
<h3 id="epoll">3. epoll</h3>
<p>epoll是Linux内核2.6版本引入的，是<strong>Linux系统特有的</strong>（select和poll不是）</p>
<p>epoll底层是通过<strong>红黑树</strong>实现的，并且维护一个<strong>就绪链表
Ready List</strong>。<strong>所有 FD 集合采用红黑树存储，就绪 FD
集合使用链表存储</strong>,<strong>理论上可以支持无限个fd</strong>。使用高效的数据结构使插入和删除查询等性能较好（时间复杂度为<code>O(logN)</code>)</p>
<p>epoll一开始就<strong>在内核态分配了一段空间，来存放管理的
fd</strong>，所以在每次连接建立后，交给 epoll
管理时，需要将其添加到原先分配的空间中，后面再管理时就<strong>不需要频繁的从用户态拷贝管理的
fd
集合</strong>，提高了性能（也就是<code>select</code>和<code>poll</code>在内核中都没有一个数据结构来维护fd句柄，有数据到达时需要不断从用户态拷贝到内核态，而<code>epoll</code>在<code>fd</code>创建时内核态就有红黑树，可以减少拷贝。</p>
<p><img src="/2024/03/04/WebServer%E5%AD%A6%E4%B9%A03%EF%BC%9Asocket%E7%BC%96%E7%A8%8B%E4%B8%8Eepoll%E5%AE%9E%E7%8E%B0I-O%E5%A4%8D%E7%94%A8/epoll.gif" width="60%"></p>
<ul>
<li><code>epoll</code>：
<ul>
<li><code>epoll_create</code>：在内核态创建socket</li>
<li><code>epoll_ctl</code>：将内核的socket加入到红黑树中</li>
</ul></li>
</ul>
<p>epoll属于<strong>事件驱动型</strong>，当有活动的fd时，会<strong>自动触发回调函数</strong>，将活动的fd放入就绪链表中等待epoll_wait调用处理</p>
<p>而select和poll在内核判断是否有就绪的fd时开销最大</p>
<ul>
<li><p>epoll的两种工作模式，一般来说<strong>边缘触发调用系统次数比较少，所以更高效</strong>：</p>
<ul>
<li><strong>LT（水平触发）</strong>：只要fd状态是就绪的，就会触发事件(默认方式)</li>
<li><strong>ET（边缘触发）</strong>：只有当fd状态发生变化时才会触发事件
<ul>
<li>ET 是一种高速工作方式，很大程度上减少了 epoll
事件被重复触发的次数</li>
<li>ET
模式下，<strong>必须使用非阻塞的套接字(socket)</strong>，以避免由于一个文件句柄的<strong>阻塞读/阻塞写</strong>操作<strong>把处理多个文件描述符的任务饿死</strong></li>
</ul></li>
</ul></li>
</ul>
<h2 id="三epoll实现io复用">三、epoll实现I/O复用</h2>
<p>Linux下，epoll其实很简单，只要三个函数就可以了：</p>
<ul>
<li><p><strong>epoll_create</strong>：</p>
<p>创建一个epoll句柄,一个epoll会占用一个fd,所以epollfd在程序结束时也有close</p>
<p>epoll_create的参数size已经不起作用了，只要大于0就行（因为红黑树的大小是动态的）</p></li>
<li><p><strong>epoll_ctl</strong>：</p>
<p>注册要监听的事件类型（首先是server的listenfd，然后是连接server的client的connfd）</p>
<p>通过<code>epoll_ctl</code>函数将socket加入到内核中的<code>红黑树</code></p>
<p>epoll_ctl由三个宏定义来控制对fd的操作：</p>
<ul>
<li><strong>EPOLL_CTL_ADD</strong>：<strong>注册</strong>新的fd到epoll中，一旦该fd就绪，就会自动触发回调函数</li>
<li><strong>EPOLL_CTL_MOD</strong>：<strong>修改</strong>已经注册的fd的监听事件</li>
<li><strong>EPOLL_CTL_DEL</strong>：从epoll中<strong>删除</strong>一个fd(删除后一般还要手动close该fd)</li>
</ul>
<p>注册的fd会有以下的event<strong>事件类型</strong>：</p>
<ul>
<li><strong>EPOLLIN</strong>：表示对应的文件描述符<strong>可以读</strong>（包括对端SOCKET正常关闭）</li>
<li><strong>EPOLLOUT</strong>：表示对应的文件描述符<strong>可以写</strong></li>
<li><strong>EPOLLPRI</strong>：表示对应的文件描述符<strong>有紧急的数据可读</strong></li>
<li><strong>EPOLLERR</strong>：表示对应的文件描述符发生<strong>错误</strong></li>
<li><strong>EPOLLHUP</strong>：表示对应的文件描述符被<strong>挂断</strong></li>
<li><strong>EPOLLET</strong>：表示将epoll中的fd设为<strong>ET边缘触发模式</strong></li>
<li><strong>EPOLLONESHOT</strong>：表示将epoll中的fd设为<strong>ONESHOT模式</strong>只监听一次事件，epoll处理完该fd后，<strong>fd就会被从epoll中删除</strong>，如果需要再监听这个socket的话，除非再次调用epoll_ctl注册该fd</li>
</ul>
<p>通过epoll_ctl添加进来的<strong>fd都会被放在红黑树某个节点</strong>内，所以重复添加是无效的</p>
<p>当有相应的事件（如EPOLLIN、EPOLLOUT等）发生时，就会<strong>调用回调函数将该fd放入就绪链表（双向链表rdllist）中</strong>，当调用epoll_wait时，只需要检查双向链表中是否有存在注册的事件（在红黑树中）即可</p>
<p><img src="/2024/03/04/WebServer%E5%AD%A6%E4%B9%A03%EF%BC%9Asocket%E7%BC%96%E7%A8%8B%E4%B8%8Eepoll%E5%AE%9E%E7%8E%B0I-O%E5%A4%8D%E7%94%A8/red-black-tree.png"></p></li>
<li><p><strong>epoll_wait</strong>：等待事件的产生</p>
<p>epoll_wait在EventLoop中属于一个阻塞过程，当rdlist为空（无就绪fd）时挂起当前进程，直到rdlist不空时进程才被唤醒</p>
<p>文件fd状态改变（buffer由不可读变为<strong>可读EPOLLIN</strong>或由不可写变为<strong>可写EPOLLOUT</strong>），导致相应fd上的回调函数ep_poll_callback()被调用</p>
<p>epoll_wait的参数解析（C++）：</p>
<ul>
<li><strong>epollfd</strong>：当前线程的epoll句柄</li>
<li><strong>events</strong>：用来从内核得到事件的集合，<strong>events</strong>中保存了就绪的fd的<strong>事件类型</strong>，如<code>EPOLLIN</code>、<code>EPOLLOUT</code>等，用于epoll进行事件处理时可以判断对应的类型并执行相应的操作</li>
<li><strong>maxevents</strong>：每次epoll_wait最多返回的就绪事件数目</li>
<li><strong>timeout</strong>：epoll_wait的超时时间，单位为毫秒，<code>-1</code>表示<code>一直阻塞</code>，<code>0</code>表示<code>立即返回</code>，<code>&gt;0</code>表示<code>等待指定时间后返回</code></li>
</ul></li>
</ul>
<p>epoll接口的作用为:</p>
<p><img src="/2024/03/04/WebServer%E5%AD%A6%E4%B9%A03%EF%BC%9Asocket%E7%BC%96%E7%A8%8B%E4%B8%8Eepoll%E5%AE%9E%E7%8E%B0I-O%E5%A4%8D%E7%94%A8/epoll_concept.png"></p>
<h2 id="四代码示例">四、代码示例</h2>
<p>实现简单的eopll客户端和服务端（C++）</p>
<p>代码仓库为<a href="https://github.com/AkiraZheng/MyWebServer/tree/Demos_of_Webserver">WebServer相关的一些轮子和Demo</a></p>
<ul>
<li><p>服务端</p>
<p>服务端设置server
socket时,通过<code>setsockopt</code>设置SO_REUSEADDR，允许端口复用。端口复用最常用的用途应该是<strong>防止</strong>服务器重启时之前绑定的端口还未释放或者程序突然退出而<strong>系统没有释放端口</strong>。这种情况下如果设定了端口复用，则新启动的服务器进程可以直接绑定端口。如果没有设定端口复用，绑定会失败，提示ADDR已经在使用中</p>
<p>服务端通过epoll就绪队列中的<code>events[i].data.fd</code>是否等于server
fd来区分是<strong>新的连接</strong>还是<strong>已有连接的fd有数据</strong>到达</p>
<p>同时epoll设置为-1表示阻塞等待就绪事件到来(I/O复用epoll本身是阻塞的)，而epoll中的client
socket fd是非阻塞的，因为采用ET方式，需要防止饿死</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span><span class="comment">// close</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span><span class="comment">// set non-blocking</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span><span class="comment">//create socket</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span><span class="comment">//sockaddr_in</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_EVENTS 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//buffer for read socket message</span></span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//create a tcp socket</span></span><br><span class="line">    <span class="comment">//socket参数解析</span></span><br><span class="line">    <span class="comment">//AF_INET: ipv4,也可以是AF_INET6</span></span><br><span class="line">    <span class="comment">//SOCK_STREAM: 代表流式套接字</span></span><br><span class="line">    <span class="comment">//IPPROTO_TCP: tcp协议，也可以是IPPROTO_UDP，表示选择的传输层协议</span></span><br><span class="line">    <span class="keyword">int</span> socketFd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置socket监听的地址和端口</span></span><br><span class="line">    <span class="comment">//sockaddr_in是netinet/in.h中的结构体，用于表示socket地址</span></span><br><span class="line">    sockaddr_in sockAddr&#123;&#125;;</span><br><span class="line">    sockAddr.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">    sockAddr.sin_port = <span class="built_in">htons</span>(<span class="number">8080</span>);<span class="comment">//端口号</span></span><br><span class="line">    sockAddr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);<span class="comment">//监听主机所有地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定服务端监听的socket套接字</span></span><br><span class="line">    <span class="comment">//通过bind函数将socketFd和sockAddr绑定，绑定不成功将返回-1</span></span><br><span class="line">    <span class="comment">//bind参数解析:</span></span><br><span class="line">    <span class="comment">//socketFd: socket文件描述符,也就是</span></span><br><span class="line">    <span class="comment">//sockAddr: socket需要绑定的地址和端口</span></span><br><span class="line">    <span class="keyword">int</span> flags = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>(socketFd, SOL_SOCKET, SO_REUSEADDR, &amp;flags, <span class="built_in"><span class="keyword">sizeof</span></span>(flags));<span class="comment">//bind前使用setsockopt设置允许端口复用</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">bind</span>(socketFd, (sockaddr*)&amp;sockAddr, <span class="built_in"><span class="keyword">sizeof</span></span>(sockAddr)) == <span class="number">-1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;bind error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//结束主程序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定后，开始监听socket，客户端连接时通过accept函数接收连接，内部实现三次握手</span></span><br><span class="line">    <span class="comment">//第二个参数是backlog：指定在连接队列中允许等待的最大连接数</span></span><br><span class="line">    <span class="comment">//                    但是并不意味着只能连10个，只是同时在等待连接的队列中只能有10个</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">listen</span>(socketFd, <span class="number">10</span>) == <span class="number">-1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;listen error&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;server start, listen on 8080...&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建epoll实例</span></span><br><span class="line">    <span class="comment">//epoll_create的size限定没啥用了，epoll实例的大小是动态调整的，基本上允许不断接入socket客户端</span></span><br><span class="line">    <span class="keyword">int</span> epollFd = <span class="built_in">epoll_create</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将socketFd包装成一个epoll_event对象，加入到epoll监听中</span></span><br><span class="line">    <span class="comment">//epoll_event是&lt;sys/epoll.h&gt;中定义的一个结构体，用于注册事件</span></span><br><span class="line">    <span class="comment">//描述在使用 epoll 监听文件描述符时发生的事件</span></span><br><span class="line">    epoll_event epev&#123;&#125;;</span><br><span class="line">    epev.events = EPOLLIN;<span class="comment">//监听server的读事件</span></span><br><span class="line">    epev.data.fd = socketFd;<span class="comment">//监听的文件描述符:相当于监听的小区楼（server socket)，里面每一个房间都是连接的客户端文件描述符</span></span><br><span class="line">    <span class="built_in">epoll_ctl</span>(epollFd, EPOLL_CTL_ADD, socketFd, &amp;epev);<span class="comment">//将监听的socket对象加入到epoll监听中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//回调事件数组：用于存放epoll_wait返回的事件，也就是最多有MAX_EVENTS个socket事件同时发生进入epoll（蜂巢的大小）</span></span><br><span class="line">    epoll_event events[MAX_EVENTS];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在event loop中，不断的通过死循环监听和响应事件发生（执行epoll_wait等待事件发生）</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//epoll_wait函数用于等待事件发生，函数会阻塞，直到超时或有响应的事件发生，返回发生的事件数量</span></span><br><span class="line">        <span class="comment">//epollFd: epoll实例(相当于小区的蜂巢快递点，当有事件进来时，会通知蜂巢快递点epoll，然后蜂巢快递点再通知小区楼socketFd)</span></span><br><span class="line">        <span class="comment">//events: 用于存放发生的事件</span></span><br><span class="line">        <span class="comment">//MAX_EVENTS: 最多发生的事件数量</span></span><br><span class="line">        <span class="comment">//timeout: 超时时间，-1表示一直等待，0表示立即返回，&gt;0表示等待指定时间</span></span><br><span class="line">        <span class="keyword">int</span> eventCount = <span class="built_in">epoll_wait</span>(epollFd, events, MAX_EVENTS, <span class="number">-1</span>);<span class="comment">//timeout为-1就是阻塞等待</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(eventCount == <span class="number">-1</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;epoll_wait error&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//wait到事件后，遍历所有收到的events并进行处理</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;eventCount; i++)&#123;</span><br><span class="line">            <span class="comment">//判断是不是新的socket客户端连接</span></span><br><span class="line">            <span class="keyword">if</span>(events[i].data.fd == socketFd)&#123;</span><br><span class="line">                <span class="keyword">if</span>(events[i].events &amp; EPOLLIN)&#123;</span><br><span class="line">                    <span class="comment">//接收新的socket客户端连接，clientAddr存放连接进来的客户端的地址信息</span></span><br><span class="line">                    sockaddr_in clientAddr&#123;&#125;;</span><br><span class="line">                    <span class="keyword">socklen_t</span> clientAddrLen = <span class="built_in"><span class="keyword">sizeof</span></span>(clientAddr);</span><br><span class="line">                    <span class="keyword">int</span> clientFd = <span class="built_in">accept</span>(socketFd, (sockaddr*)&amp;clientAddr, &amp;clientAddrLen);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//将新的socket客户端连接加入到epoll监听中</span></span><br><span class="line">                    epev.events = EPOLLIN | EPOLLET;<span class="comment">//监听读事件并设置边缘触发模式</span></span><br><span class="line">                    epev.data.fd = clientFd;<span class="comment">//监听的文件描述符</span></span><br><span class="line">                    <span class="comment">//设置连接的客户端为非阻塞模式，fcntl函数F_GETFL获取客户端fd的状态标志</span></span><br><span class="line">                    <span class="keyword">int</span> flags = <span class="built_in">fcntl</span>(clientFd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span>(flags == <span class="number">-1</span>)&#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;fcntl error&quot;</span> &lt;&lt; endl;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//F_SETFL设置客户端fd为非阻塞模式O_NONBLOCK</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">fcntl</span>(clientFd, F_SETFL, flags | O_NONBLOCK) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;set no block error, fd:&quot;</span> &lt;&lt; clientFd &lt;&lt; endl;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//将新客户端连接加入到epoll监听中</span></span><br><span class="line">                    <span class="built_in">epoll_ctl</span>(epollFd, EPOLL_CTL_ADD, clientFd, &amp;epev);</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;new client connected, fd:&quot;</span> &lt;&lt; clientFd &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//不是server socket的事件响应，而是客户端socket的事件响应</span></span><br><span class="line">                <span class="comment">//判断是不是断开连接和出错EPOLLERR EPOLLHUP</span></span><br><span class="line">                <span class="keyword">if</span>(events[i].events &amp; EPOLLERR  || events[i].events &amp; EPOLLHUP)&#123;</span><br><span class="line">                    <span class="comment">//出现客户端连接错误或断开连接时需要从epoll中移除</span></span><br><span class="line">                    <span class="built_in">epoll_ctl</span>(epollFd, EPOLL_CTL_DEL, events[i].data.fd, <span class="literal">nullptr</span>);</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;client disconnected, fd:&quot;</span> &lt;&lt; events[i].data.fd &lt;&lt; endl;</span><br><span class="line">                    <span class="built_in">close</span>(events[i].data.fd);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(events[i].events &amp; EPOLLIN)&#123;<span class="comment">//客户端可读事件</span></span><br><span class="line">                    <span class="keyword">int</span> len = <span class="built_in">read</span>(events[i].data.fd, buff, <span class="built_in"><span class="keyword">sizeof</span></span>(buff));<span class="comment">//用buff接收客户端发送的消息</span></span><br><span class="line">                    <span class="comment">//如果数据读取错误，关闭对应的客户端连接并从epoll监听中移除</span></span><br><span class="line">                    <span class="keyword">if</span>(len == <span class="number">-1</span>)&#123;</span><br><span class="line">                        <span class="built_in">epoll_ctl</span>(epollFd, EPOLL_CTL_DEL, events[i].data.fd, <span class="literal">nullptr</span>);</span><br><span class="line">                        <span class="built_in">close</span>(events[i].data.fd);</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;read error, close fd:&quot;</span> &lt;&lt; events[i].data.fd &lt;&lt; endl;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//打印客户端发送的消息</span></span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;recv msg from client, fd:&quot;</span> &lt;&lt; events[i].data.fd &lt;&lt; <span class="string">&quot;, msg:&quot;</span> &lt;&lt; buff &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//将接收到的消息再发送给客户端</span></span><br><span class="line">                        <span class="keyword">char</span> sendMess[] = <span class="string">&quot;hello, client&quot;</span>;</span><br><span class="line">                        <span class="built_in">write</span>(events[i].data.fd, sendMess, <span class="built_in"><span class="keyword">sizeof</span></span>(sendMess));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>终端中编译运行效果：</p>
<p><img src="/2024/03/04/WebServer%E5%AD%A6%E4%B9%A03%EF%BC%9Asocket%E7%BC%96%E7%A8%8B%E4%B8%8Eepoll%E5%AE%9E%E7%8E%B0I-O%E5%A4%8D%E7%94%A8/epollDemo_server_run.png"></p></li>
<li><p>客户端</p>
<p>客户端通过socket连接到服务端，然后通过write发送消息，通过read接收消息，Demo设计中for循环模拟10个客户端</p>
<p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现一个客户端程序，连接到服务器，发送数据，接收数据</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> clientsFd[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//创建socket</span></span><br><span class="line">        <span class="keyword">int</span> clientSocketFd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置连接的服务器地址和端口</span></span><br><span class="line">        sockaddr_in sockAddr&#123;&#125;;</span><br><span class="line">        sockAddr.sin_family = AF_INET;</span><br><span class="line">        sockAddr.sin_port = <span class="built_in">htons</span>(<span class="number">8080</span>);</span><br><span class="line">        sockAddr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接服务器</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">connect</span>(clientSocketFd, (sockaddr*)&amp;sockAddr, <span class="built_in"><span class="keyword">sizeof</span></span>(sockAddr)) == <span class="number">-1</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;connect error&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        clientsFd[i] = clientSocketFd;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;client fd:&quot;</span> &lt;&lt; clientsFd[i] &lt;&lt;<span class="string">&quot;connect to server success&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//延迟</span></span><br><span class="line">        <span class="built_in">usleep</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        <span class="keyword">char</span> buff[] = <span class="string">&quot;hello, epoll&quot;</span>;</span><br><span class="line">        <span class="built_in">send</span>(clientsFd[i], buff, <span class="built_in"><span class="keyword">sizeof</span></span>(buff), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        <span class="keyword">char</span> recvBuff[<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">recv</span>(clientsFd[i], recvBuff, <span class="built_in"><span class="keyword">sizeof</span></span>(recvBuff), <span class="number">0</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;recv: &quot;</span> &lt;&lt; recvBuff &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭socket</span></span><br><span class="line">        <span class="built_in">close</span>(clientsFd[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>终端中编译运行效果：</p>
<p><img src="/2024/03/04/WebServer%E5%AD%A6%E4%B9%A03%EF%BC%9Asocket%E7%BC%96%E7%A8%8B%E4%B8%8Eepoll%E5%AE%9E%E7%8E%B0I-O%E5%A4%8D%E7%94%A8/epollDemo_client_run.png"></p></li>
<li><p>比较</p>
<p>通过比较客户端和服务端的fd，我们可以很清晰的看到，当服务端接收到新的客户端fd后，会在服务端中将其记成服务端对应可识别的fd，而不是客户端进程中出现的fd，这样保证了服务端和客户端的通信不会出现混乱</p></li>
</ul>
<h2 id="五总结">五、总结</h2>
<ul>
<li>本文学习了socket普通编程</li>
<li>扩展了I/O复用的概念，以及select、poll、epoll的区别，并具体实现和讲解了epoll的I/O复用</li>
<li>通过简单的epoll服务端和客户端的代码示例，加深了对epoll的理解</li>
</ul>
<p>有了I/O复用和epoll编程基础后，将可以开始着手实现WebServer的event_loop和epoll模块，通过学习两种事件驱动模型（Reactor和Proactor）来实现WebServer的高并发处理。<a href="https://akirazheng.github.io/2024/03/05/WebServer%E5%AD%A6%E4%B9%A04%EF%BC%9A%E5%B9%B6%E5%8F%91%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%BC%8FReactor%E5%92%8CProactor/">WebServer学习4：并发事件驱动模式Reactor和Proactor</a></p>
<p><a href="https://blog.csdn.net/adminpd/article/details/124553590">详解IO多路复用机制——select、poll、epoll的原理和区别</a></p>
]]></content>
      <categories>
        <category>WebServer项目（C++）</category>
      </categories>
  </entry>
  <entry>
    <title>WebServer学习4：并发事件驱动模式Reactor和Proactor</title>
    <url>/2024/03/05/WebServer%E5%AD%A6%E4%B9%A04%EF%BC%9A%E5%B9%B6%E5%8F%91%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%BC%8FReactor%E5%92%8CProactor/</url>
    <content><![CDATA[<h2 id="一并发模式">一、并发模式</h2>
<p>当处理并发客户端的请求时，最直接的想法就是使用多线程来解决，但是线程完成业务逻辑后就销毁，不断地创建销毁会造成很大的性能开销，因此选择优化为采用<strong>线程池来处理业务</strong>，那么线程池该如何高效地处理业务呢?我们需要选择适合地并发模式来实现</p>
<p>我们知道，epoll中监听的是多个fd，epoll_wait等待到的事件可能是读/写/accept客户端/信号/定时等，这些事件都是并发的，我们需要对这些事件进行并发处理</p>
<p>而事件并发处理模式有两种:Reactor和Proactor，下面对这两种并发模式进行介绍</p>
<h2 id="二reactor模式">二、Reactor模式</h2>
<p>Reactor又称为<strong>反应堆</strong>，是一种<strong>事件驱动机制</strong>。Reactor通常使用<strong>同步I/O</strong>(如<code>epoll_wait</code>)实现。</p>
<ul>
<li>同步(阻塞)I/O：当一个I/O操作发生时，程序会阻塞在这个I/O操作上，直到这个I/O操作完成，程序才会继续执行</li>
<li>Reactor将所有要处理的<strong>I/O事件注册到I/O多路复用器上(如epoll)</strong></li>
<li>而主线程/进程阻塞在多路复用器上，也就是同步阻塞在epoll_wait上</li>
<li>I/O多路复用器监听到I/O事件发生后，<strong>根据事件类型将事件分发给工作线程(逻辑单元)处理</strong></li>
</ul>
<p>Reator模式要求<strong>主线程只负责监听是否有事件发生</strong>，当有事件发生时，主线程将事件分发给工作线程(逻辑单元)处理(包括读和写)，也就是将socket可读可写事件放入工作线程的请求队列中等待处理</p>
<h3 id="模式一单reactor单线程">模式一：单Reactor单线程</h3>
<p>这种模型下，通常只有<strong>1个epoll对象</strong>，所有的<strong>客户端连接、读写事件</strong>都在<strong>主线程</strong>中实现（redis这种中间件就是采用这种模式）</p>
<p><img src="/2024/03/05/WebServer%E5%AD%A6%E4%B9%A04%EF%BC%9A%E5%B9%B6%E5%8F%91%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%BC%8FReactor%E5%92%8CProactor/singleReactor.png" width="80%" heigh="80"></p>
<p>而实际上非I/O的业务型操作不应该也放在主线程中，（如图中的decode、compute、encode）应该从Reactor中卸载，放入工作线程中（这种就是模式二采用的方法）</p>
<h3 id="模式二-单reactor-线程池thread-pool多线程">模式二: 单Reactor +
线程池(Thread Pool)（多线程）</h3>
<p>这种模式的特定是，client的accept和read/send都在主线程<code>MainReactor</code>中完成，然后读取客户端数据后，将计算和请求处理等工作交给线程池执行，可以充分利用多核CPU的优势</p>
<p>采用此模式时有可能存在多个线程同时计算同一个连接上的多个请求，算出的结果的次序是不确定的，
所以需要网络框架在设计协议时<strong>带一个id标示</strong>，以便让客户端区分response对应的是哪个request。</p>
<p><img src="/2024/03/05/WebServer%E5%AD%A6%E4%B9%A04%EF%BC%9A%E5%B9%B6%E5%8F%91%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%BC%8FReactor%E5%92%8CProactor/reactor_thread_pool.png" width="80%" heigh="80"></p>
<h3 id="模式三-muduo-络库中所提出的-multi-reactor-并发框架-线程池实现">模式三:
muduo ⽹络库中所提出的 Multi-Reactor 并发框架 + 线程池实现</h3>
<p>Multi-Reactor模式的特点是one loop per thread， 有一个<strong>main
Reactor</strong>负责<code>accept</code>连接，
然后把该连接挂在某个<strong>sub
Reactor</strong>中(可以采用<strong>round-robin</strong>、<strong>随机方法</strong>、<strong>一致性哈希</strong>等实现<strong>负载均衡</strong>)，这样该连接的所有操作都在哪个sub
Reactor所处的线程中完成，每个sub Reactor都处于线程池中的某个线程中</p>
<p>通过<strong>Multi-Reactor +
Pools</strong>的模式结合epoll实现多路复用也要<strong>遵循每个fd的操作只有一个线程完成（一致性哈希可以实现）</strong>，防止出现数据收发顺序问题以及多个线程同时操作一个fd的问题</p>
<p><img src="/2024/03/05/WebServer%E5%AD%A6%E4%B9%A04%EF%BC%9A%E5%B9%B6%E5%8F%91%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%BC%8FReactor%E5%92%8CProactor/multipleReactors+Pools.png"></p>
<h2 id="三proactor模式">三、Proactor模式</h2>
<p>proactor模式中</p>
<ul>
<li><p><strong>主线程</strong>和内核<strong>负责处理读写数据、接受新连接等I/O操作</strong>，主线程读写完后，主线程向工作线程通知并直接发送读取后的结果给工作线程进行处理</p></li>
<li><p><strong>工作线程</strong>仅负责<strong>业务逻辑</strong>，如处理<strong>客户请求</strong>。通常由异步I/O实现</p></li>
</ul>
<p><strong>同步I/O模拟Proactor模式</strong></p>
<p>异步I/O一般采用如<code>aio_read</code>和<code>aio_write</code>等函数来处理读写数据，但本项目中使用同步I/O模拟Proactor事件处理模式</p>
<p>以epoll_wait实现同步I/O模型为例:</p>
<ul>
<li><p>主线程往<strong>epoll内核事件表注册</strong>socket上的读就绪事件。</p></li>
<li><p>主线程调用<strong>epoll_wait等待</strong>socket上有数据可读</p></li>
<li><p>当socket上有数据可读，epoll_wait通知主线程，<strong>主线程从socket循环读取数据，直到没有更多数据可读</strong>，然后将读取到的数据封装成一个请求对象并插入请求队列。</p></li>
<li><p>睡眠在请求队列上<strong>某个工作线程被唤醒</strong>，它获得请求对象并<strong>处理客户请求</strong>，然后往epoll内核事件表中<strong>注册</strong>该socket上的<strong>写就绪事件</strong></p></li>
<li><p>主线程调用<strong>epoll_wait等待socket可写</strong>。</p></li>
<li><p>当socket上有数据可写，epoll_wait通知主线程。<strong>主线程</strong>往socket上<strong>写入服务器处理客户请求的结果</strong>。</p></li>
</ul>
<p><img src="/2024/03/05/WebServer%E5%AD%A6%E4%B9%A04%EF%BC%9A%E5%B9%B6%E5%8F%91%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%BC%8FReactor%E5%92%8CProactor/proactor.png" width="80%" heigh="80"></p>
<p><strong>Reactor与Proactor的区别</strong></p>
<ul>
<li>Reactor模式中，主线程负责监听是否有事件发生，并将事件分发给工作线程处理
<ul>
<li>操作是同步的，严格按照时序执行（因为要严格按照时序，所以数据读写都是在工作线程内跟解析和打包同步执行）</li>
</ul></li>
<li>Proactor模式中，主线程负责处理读写数据、接受新连接等I/O操作，等<strong>处理完事件后</strong>再直接发送读取后的结果给工作线程进行业务处理
<ul>
<li>在I/O操作时是异步的，当I/O操作执行时，线程可以处理其他事情</li>
</ul></li>
</ul>
<blockquote>
<p>参考：<a href="https://mbd.baidu.com/ma/s/xTShUzFr">Reactor和Proactor的区别</a></p>
</blockquote>
<blockquote>
<p>举个实际生活中的例子，Reactor
模式就是快递员在楼下，给你打电话告诉你快递到你家小区了，你需要自己下楼来拿快递。而在
Proactor 模式下，快递员直接将快递送到你家门口，然后通知你。</p>
</blockquote>
<h2 id="四总结">四、总结</h2>
<ul>
<li><strong>reactor</strong>是一种基于<strong>待完成事件</strong>的<strong>同步I/O</strong>模型</li>
<li><strong>proactor</strong>是一种基于<strong>已完成事件</strong>的<strong>异步I/O</strong>模型</li>
</ul>
<p>学完并发模式，我们就可以了解了WebServer项目中，主线程创建epoll监听后，分别对I/O事件如信号、定时、socket接受客户端连接、客户端socket读写事件等的多线程处理模式</p>
<p>接下来就可以完成<strong>半同步半反应堆线程池</strong>的代码和理论学习，因为线程池是实现并发模式的基础，也是项目中进行事件处理的基础：<a href="https://akirazheng.github.io/2024/03/09/WebServer%E5%AD%A6%E4%B9%A05%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E8%AE%BE%E8%AE%A1/">WebServer学习5：线程池与数据库连接池设计</a></p>
<blockquote>
<p>参考：<a href="https://mp.weixin.qq.com/s/EDzFOo3gcivOe_RgipkTkQ">​网络 IO
演变发展过程和模型介绍</a></p>
</blockquote>
]]></content>
      <categories>
        <category>WebServer项目（C++）</category>
      </categories>
  </entry>
  <entry>
    <title>WebServer学习5：线程池与数据库连接池设计</title>
    <url>/2024/03/09/WebServer%E5%AD%A6%E4%B9%A05%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="一线程池设计基础">一、线程池设计基础</h2>
<h3 id="线程池基础">1.1 线程池基础</h3>
<p>关于通用线程池的设计轮子，可以参考本人的博客：<a href="https://akirazheng.github.io/2024/02/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88C++%EF%BC%89/">从0开始实现线程池(C++)</a></p>
<p>相比上面造的轮子，本文进一步将Task类型设置成<strong>模板类</strong>，以适应不同类型的任务。同时将worker的阻塞环节中<strong>条件变量替换为信号量</strong>，以实现对线程池的互斥访问。</p>
<h3 id="半同步半反应堆线程池">1.2 半同步/半反应堆线程池</h3>
<p>并发模式中的同步和异步</p>
<ul>
<li><strong>同步</strong>：指的是<strong>发起一个调用</strong>后，<strong>调用者需要等待结果</strong>，才能继续后续的操作；这种程序完全按照代码的顺序执行</li>
<li><strong>异步</strong>：指的是<strong>发起一个调用</strong>后，<strong>调用者不需要等待结果</strong>，就可以继续后续的操作；异步指的是程序的执行需要由系统事件驱动</li>
</ul>
<p>半同步/半反应堆线程池是一种<strong>同步I/O模拟Proactor事件处理模式</strong>，主线程负责处理读写数据、接受新连接等I/O操作，等<strong>处理完事件后</strong>再直接发送读取后的结果给工作线程进行业务处理。以proactor模式为例，半同步/半反应堆线程池的工作流程如下：</p>
<ul>
<li>主线程中<strong>epoll</strong>充当<strong>异步线程</strong>，负责<strong>处理socket</strong>上读写数据、接受新连接等I/O操作</li>
<li>若有新连接发生，主线程获取该新连接，然后往<strong>epoll</strong>内核事件表注册该socket上的读就绪事件</li>
<li>如果连接socket上<strong>有数据可读</strong>，<strong>主线程从socket循环读取数据</strong>，直到没有更多数据可读，然后<strong>将读取到的数据封装</strong>成一个<strong>请求对象</strong>并插入请求队列</li>
<li>睡眠的工作线程接收到请求对象后，通过竞争获取任务接管权</li>
</ul>
<p>本项目除了采取半同步/半反应堆线程池，还对worker中处理任务允许使用<strong>Reator模式</strong>或<strong>Proactor模式</strong>，Reactor模式需要输入一个state参数，用于判断任务的类型，而Proactor模式则不需要，因此这里Reactor和Proactor模式封装的<strong>添加任务</strong>的函数不同，一个需要输入state参数，一个不需要。(但是任务都是模板类型，也就是<code>http_conn</code>具体类)</p>
<p>本项目的线程池设计和实现流程如下：</p>
<p><img src="/2024/03/09/WebServer%E5%AD%A6%E4%B9%A05%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E8%AE%BE%E8%AE%A1/worker_of_threadpool.png"></p>
<h3 id="主要函数代码实现">1.3 主要函数代码实现</h3>
<p>主要函数包括生产者向任务队列中添加任务<code>append</code>函数、消费者从任务队列中取出任务并执行任务<code>worker</code>工作线程回调函数。</p>
<ul>
<li><code>append</code>函数：生产者向任务队列中添加任务</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向请求队列中添加任务(Reactor模式)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> threadpool&lt;T&gt;::<span class="built_in">append</span>(T *request, <span class="keyword">int</span> state)&#123;</span><br><span class="line">    <span class="comment">//操作工作队列时一定要加锁，因为它被所有线程共享</span></span><br><span class="line">    m_queuelocker.<span class="built_in">lock</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(m_workqueue.<span class="built_in">size</span>() &gt;= m_max_requests)&#123;</span><br><span class="line">        <span class="comment">//请求队列满了</span></span><br><span class="line">        m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request-&gt;m_state = state;<span class="comment">//state 0代表读事件，state 1代表写事件</span></span><br><span class="line">    m_workqueue.<span class="built_in">push_back</span>(request);</span><br><span class="line"></span><br><span class="line">    m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//信号量+1，唤醒一个线程，对应PV操作中的P操作</span></span><br><span class="line">    m_queuestat.<span class="built_in">post</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向请求队列中添加任务(Proactor模式)</span></span><br><span class="line"><span class="comment">//由于Proactor模式下，socketfd上的读写事件都是由主线程来处理的，所以这里只需要将任务添加到请求队列中即可，不需要state参数来判断是什么事件</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">bool</span> threadpool&lt;T&gt;::<span class="built_in">append_p</span>(T *request)</span><br><span class="line">&#123;</span><br><span class="line">    m_queuelocker.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="keyword">if</span> (m_workqueue.<span class="built_in">size</span>() &gt;= m_max_requests)</span><br><span class="line">    &#123;</span><br><span class="line">        m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_workqueue.<span class="built_in">push_back</span>(request);</span><br><span class="line">    m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">    m_queuestat.<span class="built_in">post</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>worker</code>函数：消费者从任务队列中取出任务并执行任务</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工作线程运行函数:worker</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> *threadpool&lt;T&gt;::<span class="built_in">worker</span>(<span class="keyword">void</span> *arg)&#123;</span><br><span class="line">    threadpool *pool = <span class="keyword">static_cast</span>&lt;threadpool *&gt;(arg);</span><br><span class="line">    pool-&gt;<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> pool;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程池的主线程运行函数:保证线程池中的线程一直处于等待任务的状态 &amp;&amp; 从请求队列中取出任务并执行之</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> threadpool&lt;T&gt;::<span class="built_in">run</span>()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//等待线程池的信号量，即是否有任务需要处理（阻塞等待）</span></span><br><span class="line">        m_queuestat.<span class="built_in">wait</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再查看确认是否有任务需要处理，如果没有的话就continue继续while循环</span></span><br><span class="line">        m_queuelocker.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(m_workqueue.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//有任务则取出任务并处理</span></span><br><span class="line">        T *request = m_workqueue.<span class="built_in">front</span>();</span><br><span class="line">        m_workqueue.<span class="built_in">pop_front</span>();</span><br><span class="line">        m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!request)&#123;<span class="comment">//任务为空任务</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据事件处理模型切换：Reactor/Proactor（m_actor_model）</span></span><br><span class="line">        <span class="keyword">if</span>(m_actor_model == <span class="number">1</span>)&#123;<span class="comment">//Reactor模式</span></span><br><span class="line">            <span class="keyword">if</span>(request-&gt;m_state == <span class="number">0</span>)&#123;<span class="comment">//读事件</span></span><br><span class="line">                <span class="keyword">if</span>(request-&gt;<span class="built_in">read_once</span>())&#123;<span class="comment">//读取数据成功</span></span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;<span class="comment">//通知主线程中的dealwithread，表示该任务已交由工作线程处理</span></span><br><span class="line">                    <span class="function">connectionRAII <span class="title">mysqlcon</span><span class="params">(&amp;request-&gt;mysql, m_connPool)</span></span>;<span class="comment">//自动获取数据库连接</span></span><br><span class="line">                    request-&gt;<span class="built_in">process</span>();<span class="comment">//处理请求:解析请求报文，处理业务逻辑，生成响应报文</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">//读取数据失败</span></span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                    request-&gt;timer_flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;<span class="comment">//写事件</span></span><br><span class="line">                <span class="keyword">if</span> (request-&gt;<span class="built_in">write</span>())&#123;<span class="comment">//写数据成功</span></span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">//写数据失败</span></span><br><span class="line">                    request-&gt;improv = <span class="number">1</span>;</span><br><span class="line">                    request-&gt;timer_flag = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//Proactor模式，直接处理请求，不需要判断事件类型</span></span><br><span class="line">            connectionRAII <span class="built_in">mysqlcon</span>(&amp;request-&gt;mysql, m_connPool);<span class="comment">//自动获取数据库连接</span></span><br><span class="line">            request-&gt;<span class="built_in">process</span>();<span class="comment">//处理请求:解析请求报文，处理业务逻辑，生成响应报文</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二封装线程同步需要的信号量和各种锁">二、封装线程同步需要的信号量和各种锁</h2>
<h3 id="信号量">2.1 信号量</h3>
<p>信号量的封装主要是对<code>sem_init</code>、<code>sem_wait</code>、<code>sem_post</code>和<code>sem_destroy</code>函数的封装，以实现对信号量的操作。同时维护一个<code>sem_t</code>信号量变量，用于实现对信号量的操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*封装信号量的类</span></span><br><span class="line"><span class="comment">* 信号量是一个计数器，用于多线程之间的同步</span></span><br><span class="line"><span class="comment">* 每次从连接池获取连接时，需要获取一个信号量许可证(sem_wait)，如果没有可用的许可证，线程将被阻塞，直到有可用的连接。</span></span><br><span class="line"><span class="comment">* 当线程释放连接时，将增加一个信号量许可证(sem_post)，使得其他线程可以获取连接。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sem</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">sem</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化信号量m_sem为进程内线程共享-信号量初始值为0</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sem_init</span>(&amp;m_sem, <span class="number">0</span>, <span class="number">0</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();<span class="comment">//信号量初始化失败，抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sem</span>(<span class="keyword">int</span> num)&#123;</span><br><span class="line">        <span class="comment">//初始化信号量m_sem为进程内线程共享-信号量初始值为num</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sem_init</span>(&amp;m_sem, <span class="number">0</span>, num) != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();<span class="comment">//信号量初始化失败，抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">sem</span>()&#123;</span><br><span class="line">        <span class="built_in">sem_destroy</span>(&amp;m_sem);<span class="comment">//销毁信号量</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wait</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sem_wait</span>(&amp;m_sem) == <span class="number">0</span>;<span class="comment">//等待获取信号量许可证</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">post</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sem_post</span>(&amp;m_sem) == <span class="number">0</span>;<span class="comment">//释放信号量许可证</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">sem_t</span> m_sem;<span class="comment">//信号量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="互斥锁">2.2 互斥锁</h3>
<p>互斥锁的封装主要是对<code>pthread_mutex_init</code>、<code>pthread_mutex_lock</code>、<code>pthread_mutex_unlock</code>和<code>pthread_mutex_destroy</code>函数的封装，以实现对互斥锁的操作。同时维护一个<code>pthread_mutex_t</code>互斥锁变量，用于实现对互斥锁的操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*封装互斥锁的类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">locker</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">locker</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pthread_mutex_init</span>(&amp;m_mutex, <span class="literal">NULL</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();<span class="comment">//互斥锁初始化失败，抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">locker</span>()&#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_destroy</span>(&amp;m_mutex);<span class="comment">//销毁互斥锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_mutex_lock</span>(&amp;m_mutex)==<span class="number">0</span>;<span class="comment">//加锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_mutex_unlock</span>(&amp;m_mutex)==<span class="number">0</span>;<span class="comment">//解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">pthread_mutex_t</span> *<span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;m_mutex;<span class="comment">//获得当前类对象中的互斥锁</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> m_mutex;<span class="comment">//互斥锁</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="条件变量">2.3 条件变量</h3>
<p>条件变量的封装主要是对<code>pthread_cond_init</code>、<code>pthread_cond_wait</code>、<code>pthread_cond_timedwait</code>、<code>pthread_cond_signal</code>和<code>pthread_cond_broadcast</code>函数的封装，以实现对条件变量的操作。同时维护一个<code>pthread_cond_t</code>条件变量变量，用于实现对条件变量的操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*封装条件变量的类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cond</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">cond</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pthread_cond_init</span>(&amp;m_cond, <span class="literal">NULL</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();<span class="comment">//条件变量初始化失败，抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">cond</span>()&#123;</span><br><span class="line">        <span class="built_in">pthread_cond_destroy</span>(&amp;m_cond);<span class="comment">//销毁条件变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wait</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *m_mutex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        ret = <span class="built_in">pthread_cond_wait</span>(&amp;m_cond, m_mutex);<span class="comment">//等待条件变量:阻塞线程</span></span><br><span class="line">        <span class="keyword">return</span> ret == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">timewait</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *m_mutex, struct timespec t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        ret = <span class="built_in">pthread_cond_timedwait</span>(&amp;m_cond, m_mutex, &amp;t);<span class="comment">//等待条件变量:阻塞线程一定时间t</span></span><br><span class="line">        <span class="keyword">return</span> ret == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">signal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pthread_cond_signal</span>(&amp;m_cond)==<span class="number">0</span>;<span class="comment">//唤醒一个等待条件变量的线程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">broadcast</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pthread_cond_broadcast</span>(&amp;m_cond)==<span class="number">0</span>;<span class="comment">//唤醒所有阻塞等待条件变量的线程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">pthread_cond_t</span> m_cond;<span class="comment">//条件变量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="三数据库连接池设计">三、数据库连接池设计</h2>
<p>数据库连接池实际上也是线程池中维护的一个共享资源，每接收一个http请求时<strong>除了分配线程资源外</strong>，当获得线程资源后，线程池的worker中还<strong>需要分配数据库连接资源</strong>。</p>
<p>连接池的功能主要有：<strong>初始化</strong>，<strong>获取连接</strong>、<strong>释放连接</strong>，<strong>销毁连接池</strong>。</p>
<h3 id="连接池中信号量的使用">3.1 连接池中信号量的使用</h3>
<p>为了维护数据库连接池，这里将条件变量替换为<strong>信号量</strong>，以实现对连接池的互斥访问。（条件变量是用于线程间的同步，而信号量可以用于进程间或线程间的同步）</p>
<p>在数据库连接池中，<strong>信号量（Semaphore）通常用于控制对连接资源的并发访问</strong>。连接池是一种重复使用数据库连接的技术，通过维护一组预先创建的连接对象，在需要访问数据库时从池中获取连接，使用完毕后将连接放回池中，以提高数据库访问的性能和效率。</p>
<p>在C++中，信号量可以使用<code>sem_init</code>、<code>sem_wait</code>、<code>sem_post</code>和<code>sem_destroy</code>等函数进行操作：</p>
<ul>
<li><code>int sem_init(sem_t *sem, int pshared, unsigned int value)</code>：初始化信号量
<ul>
<li>sem：指向要初始化的信号量的指针。</li>
<li>pshared：指定信号量的<strong>共享类型</strong>。如果为<code>0</code>，信号量将被<strong>进程内的线程共享</strong>；如果为非零，信号量可以在不同进程间共享。</li>
<li>value：指定信号量的初始值。</li>
</ul></li>
<li><code>int sem_wait(sem_t *sem)</code>：等待信号量，用于<strong>获取一个信号量的许可证</strong>，没有可用许可证时，线程将阻塞。
<ul>
<li>sem：指向要等待的信号量的指针。</li>
</ul></li>
<li><code>int sem_post(sem_t *sem)</code>：释放信号量，用于<strong>释放一个信号量的许可证</strong>。
<ul>
<li>sem：指向要释放的信号量的指针。</li>
<li>如果有其他线程在等待这个信号量，那么其中的一个线程将被唤醒。</li>
<li>释放信号量的许可证后，信号量的值将增加1。</li>
</ul></li>
<li><code>int sem_destroy(sem_t *sem)</code>：销毁信号量。
<ul>
<li>sem：指向要销毁的信号量的指针。</li>
</ul></li>
</ul>
<p>使用信号量<strong>实现多线程争夺连接的同步机制</strong>，这里将信号量初始化为数据库的连接总数。当线程需要获取连接时，<strong>取出连接</strong>它会调用<code>sem_wait</code>函数，如果有可用的连接，线程将获得一个连接并将<strong>信号量的值减1</strong>；如果<strong>没有可用的连接，线程将阻塞等待</strong>，直到有连接被释放。当线程使用完连接后，<strong>释放连接</strong>会调用<code>sem_post</code>函数将信<strong>号量的值加1</strong>。</p>
<p>另外，由于多线程操作连接池，会造成竞争，这里使用<strong>互斥锁</strong>完成同步，具体的同步机制均使用<code>lock.h</code>中封装好的类。这里互斥锁的使用在<strong>一、</strong>中已有说明，不再赘述。</p>
<h3 id="数据库连接池的单例模式">3.2 数据库连接池的单例模式</h3>
<p>数据库连接池是一个全局的资源，因此需要使用<strong>单例模式</strong>来保证程序中只有一个数据库连接池的实例。这里采用<strong>懒汉模式</strong>实现单例模式，由于项目中在程序启动（<code>main.cpp</code>）时就会初始化数据库连接池，因此不需要考虑多线程安全问题，采用最简单的懒汉模式实现单例模式。（24.4.11更正：这里其实是线程安全的，C++11后局部静态变量的初始化是线程安全的）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">connection_pool</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//局部静态变量单例模式</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> connection_pool *<span class="title">GetInstance</span><span class="params">()</span></span>;<span class="comment">//数据库连接需要采用单例模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">connection_pool</span>();</span><br><span class="line">    ~<span class="built_in">connection_pool</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">connection_pool *<span class="title">connection_pool::GetInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//懒汉模式创建，由于只在程序开始时创建一次，所以不需要加锁</span></span><br><span class="line">    <span class="keyword">static</span> connection_pool connPool;</span><br><span class="line">    <span class="keyword">return</span> &amp;connPool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="raii机制封装数据库的连接与释放">3.3
RAII机制封装数据库的连接与释放</h3>
<p>RAII（Resource Acquisition Is
Initialization）是C++的一种资源管理方式，即<strong>资源获取就是初始化</strong>。RAII的核心思想是<strong>将资源的生命周期与对象的生命周期绑定</strong>，通过对象的生命周期来管理资源的生命周期。</p>
<p>在获取连接时，通过<strong>实例化</strong>一个<code>connectionRAII</code>对象会自动调用<code>mysql_real_connect</code>中的<code>GetConnection</code>函数从而获取一个mysql连接；</p>
<p>在释放连接时，通过销毁上面的<code>connectionRAII</code>实例化对象，自动调用<strong>析构函数</strong>执行<code>RealeaseConnection</code>函数对连接进行释放。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*RAII机制，用于自动释放和获取数据库连接（从连接池中获取和释放连接）</span></span><br><span class="line"><span class="comment">* 将数据库连接的获取与释放通过RAII机制封装，避免手动释放。</span></span><br><span class="line"><span class="comment">* RAII机制在HTTP连接处理中使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">connectionRAII</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//双指针接收一个指针的地址，*con指向接收的指针指向的地址</span></span><br><span class="line">	<span class="built_in">connectionRAII</span>(MYSQL **con, connection_pool *connPool);</span><br><span class="line">	~<span class="built_in">connectionRAII</span>();</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	MYSQL *conRAII;</span><br><span class="line">	connection_pool *poolRAII;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*RAII机制，用于自动释放和获取数据库连接*/</span></span><br><span class="line">connectionRAII::<span class="built_in">connectionRAII</span>(MYSQL **SQL, connection_pool *connPool)&#123;</span><br><span class="line">    *SQL = connPool-&gt;<span class="built_in">GetConnection</span>();<span class="comment">//获取数据库连接</span></span><br><span class="line"></span><br><span class="line">    conRAII = *SQL;</span><br><span class="line">    poolRAII = connPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connectionRAII::~<span class="built_in">connectionRAII</span>()&#123;</span><br><span class="line">    poolRAII-&gt;<span class="built_in">RealeaseConnection</span>(conRAII);<span class="comment">//释放数据库连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>从本项目中举例说明<strong>RAII机制</strong>的使用</li>
</ul>
<p>在<code>http_conn.cpp</code>中，我们通过一个<code>initmysql_result</code>函数在整个程序初始化时就先取出当前所有注册过的用户名和密码到一个map中存起来</p>
<p>我们可以看到在这个函数中我们<strong>并没有显示地连接和释放数据库连接</strong>，那么它是怎么实现数据库资源的获取和释放的呢？就是用的我们封装好的<strong>RAII机制函数</strong>。</p>
<p>此时函数中就是通过实例化一个<code>connectionRAII</code>对象，这个对象是函数内的局部变量，所以当这个函数结束时，这个对象就会被销毁，从而调用析构函数，自动释放本次的数据库连接（归还给数据库连接池）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main中初始化WebServer类中的m_connPool时会同时在HTTP类中取出一个数据库连接用于提前将所有注册过的用户信息取出存在map中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_conn::initmysql_result</span><span class="params">(connection_pool *connPool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//先从连接池中取一个连接（RAII机制）</span></span><br><span class="line">    MYSQL *mysql = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="function">connectionRAII <span class="title">mysqlcon</span><span class="params">(&amp;mysql, connPool)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在user表中检索username，passwd数据，浏览器端输入</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">mysql_query</span>(mysql, <span class="string">&quot;SELECT username,passwd FROM user&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// LOG_ERROR(&quot;SELECT error:%s\n&quot;, mysql_error(mysql));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从表中检索完整的结果集</span></span><br><span class="line">    MYSQL_RES *result = <span class="built_in">mysql_store_result</span>(mysql);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回结果集中的列数</span></span><br><span class="line">    <span class="keyword">int</span> num_fields = <span class="built_in">mysql_num_fields</span>(result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回所有字段结构的数组</span></span><br><span class="line">    MYSQL_FIELD *fields = <span class="built_in">mysql_fetch_fields</span>(result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从结果集中获取下一行，将对应的用户名和密码，存入map中</span></span><br><span class="line">    <span class="keyword">while</span> (MYSQL_ROW row = <span class="built_in">mysql_fetch_row</span>(result))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">string <span class="title">temp1</span><span class="params">(row[<span class="number">0</span>])</span></span>;<span class="comment">//key：用户名</span></span><br><span class="line">        <span class="function">string <span class="title">temp2</span><span class="params">(row[<span class="number">1</span>])</span></span>;<span class="comment">//value：密码</span></span><br><span class="line">        users[temp1] = temp2;<span class="comment">//存入map中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四总结">四、总结</h2>
<p>本文主要介绍了线程池的设计和数据库连接池的设计，其中线程池的设计主要是对通用线程池的进一步封装，将Task类型设置成模板类，以适应不同类型的任务。同时将worker的阻塞环节中条件变量替换为信号量，以实现对线程池的互斥访问。</p>
<p>数据库连接池的设计主要是对连接池中信号量的使用和数据库连接池的单例模式的设计。同时，使用RAII机制封装数据库的连接与释放，避免手动释放。</p>
<p>通过本文的学习，对线程池和数据库连接池的设计有了更深入的了解，同时也对C++的RAII机制有了更深入的认识。有了本文的基础，我们可以开始学习<strong>HTTP类</strong>。关于<strong>HTTP类</strong>的实现，可以参考本人的下一篇博客：<a href="https://akirazheng.github.io/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/">WebServer学习6：HTTP连接处理及报文机制</a></p>
]]></content>
      <categories>
        <category>WebServer项目（C++）</category>
      </categories>
  </entry>
  <entry>
    <title>WebServer学习7：定时器控制客户端存活时间</title>
    <url>/2024/03/26/WebServer%E5%AD%A6%E4%B9%A07%EF%BC%9A%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E6%B4%BB%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="一概述本项目中定时器的使用">一、概述本项目中定时器的使用</h2>
<h3 id="定时器的作用">1.1 定时器的作用</h3>
<p>本项目定时器主要用于控制客户端的存活时间，定时删除不活跃的文件描述符。（不活跃的文件描述符指的是，客户端在一定时间内<strong>没有发送请求报文给服务器</strong>，<strong>服务器也没有发送响应报文</strong>，则服务器认为客户端已经断开连接，需要将其从epoll内核事件表中删除和关闭文件描述符，并删除对应的定时器）</p>
<h3 id="定时器处理非活跃连接">1.2 定时器处理非活跃连接</h3>
<p>本项目中定时器处理非活跃连接的实现原理是：</p>
<p><strong>每次有客户端连接到服务器，服务器就为其创建一个定时器，并将其加入到定时器容器中。</strong>
但是实际上，本项目只在主线程中<strong>开启一个真实的定时器</strong>，其他的定时器都是通过<strong>定时器容器</strong>来模拟的。</p>
<p>具体来说，定时器容器是一个<strong>升序链表</strong>，链表中的每个节点对应一个客户端的定时器，每个定时器都有一个超时时间变量（绝对时间），主线程中真实的定时器每隔一段时间（倒计时结束）就会<strong>遍历定时器容器</strong>，检查每个定时器的<strong>超时时间是否小于当前时间</strong>，如果小于当前时间，说明该客户端节点过期了，就会执行定时器节点的回调函数，回调函数中会关闭对应的文件描述符，并将其从epoll内核事件表中删除。</p>
<p>遍历容器的过程如下所示：</p>
<p><img src="/2024/03/26/WebServer%E5%AD%A6%E4%B9%A07%EF%BC%9A%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E6%B4%BB%E6%97%B6%E9%97%B4/timerContainer.png"></p>
<h2 id="二定时器容器的实现">二、定时器容器的实现</h2>
<p>定时器容器其实是一种<strong>数据结构</strong>，不是真实的定时器，它的作用是用于管理所有的定时器节点（处理非活跃连接）。常用的数据结构有<strong>双向升序链表</strong>、<strong>时间轮</strong>、<strong>时间堆（二叉树）</strong>等，本项目中使用的是<strong>双向升序链表</strong>。</p>
<p><strong>函数指针</strong></p>
<p>在定时器的实现中会大量用到函数指针，所以需要先复习一下函数指针的用法。</p>
<p>函数指针：C++中每个函数的<strong>函数名</strong>就是一个<strong>指针</strong>，可以通过函数名获取函数的地址，然后将函数地址赋值给函数指针，通过函数指针调用函数。</p>
<p>函数指针的定义如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">返回数据类型 (<span class="emphasis">* 函数指针名)(函数参数列表);</span></span><br></pre></td></tr></table></figure>
<p>举个例子，定义一个<code>int test(int a)</code>函数，然后定义一个函数指针<code>int (*p)(int)</code>，将<code>test</code>函数的地址赋值给<code>p</code>，然后通过<code>p</code>调用<code>test</code>函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">int</span></span> (*p)(<span class="keyword">int</span>);<span class="comment">//定义函数指针</span></span><br><span class="line">    p = test;<span class="comment">//将test函数的地址赋值给p</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="built_in">p</span>(<span class="number">10</span>);<span class="comment">//通过p调用test函数</span></span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用户节点的定义client_data">2.1 用户节点的定义client_data</h3>
<p>项目中将<strong>客户端连接资源信息</strong>封装在一个<strong>结构体（client_data）</strong>中，包括<strong>客户端socket地址</strong>、<strong>文件描述符</strong>、<strong>定时器类</strong>等信息。然后将所有的<strong>定时器节点</strong>放入一个<strong>双向升序链表</strong>中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前向声明util_timer定时器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">util_timer</span>;</span></span><br><span class="line"><span class="comment">//定时器节点中的用户数据结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">client_data</span>&#123;</span></span><br><span class="line">    sockaddr_in address;</span><br><span class="line">    <span class="keyword">int</span> sockfd;</span><br><span class="line">    util_timer *timer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>用户结构与定时器容器之间的关系：</p>
<p><img src="/2024/03/26/WebServer%E5%AD%A6%E4%B9%A07%EF%BC%9A%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E6%B4%BB%E6%97%B6%E9%97%B4/timerContainerStruct.png"></p>
<h3 id="节点中的定时器节点类util_timer">2.2
节点中的定时器节点类util_timer</h3>
<p>在用户结构体中，有一个<strong>util_timer</strong>类的指针，这个类是<strong>定时器类</strong>，作为定时器容器中的一个节点，用于<strong>管理定时器</strong>。由于定时器容器是双向升序链表，所以定时器类中还有<strong>前向和后向指针</strong>。</p>
<p>定时器类的定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定时器节点：双向升序链表的节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">util_timer</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">util_timer</span>():<span class="built_in">prev</span>(<span class="literal">nullptr</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> expire;<span class="comment">//任务的超时时间，这里使用绝对时间（定时器超时时间）</span></span><br><span class="line">    <span class="built_in"><span class="keyword">void</span></span> (*cb_func)(client_data *);<span class="comment">//任务回调函数：timeout后实现socket和定时器的移除</span></span><br><span class="line">    client_data *user_data;<span class="comment">//回调函数处理的客户数据，由定时器的执行者传递给回调函数</span></span><br><span class="line">    util_timer *prev, *next;<span class="comment">//前向和后向指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由于节点到期后处理的操作是<strong>fd移出epoll</strong>并关闭<strong>socket连接</strong>，所以定时器类中的回调函数<code>cb_func</code>是一个<strong>函数指针</strong>，指向一个<strong>处理函数</strong>，用于处理到期后的操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除epoll中非活动连接的客户端socket、关闭连接</span></span><br><span class="line"><span class="keyword">int</span> *Utils::u_pipefd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> Utils::u_epollfd = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span>;</span><span class="comment">//前向声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cb_func</span><span class="params">(client_data *user_data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//删除主程序epoll中对应客户端的fdSchufa</span></span><br><span class="line">    <span class="built_in">epoll_ctl</span>(Utils::u_epollfd, EPOLL_CTL_DEL, user_data-&gt;sockfd, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">assert</span>(user_data);<span class="comment">//断言，确保user_data不为空，否则直接返回</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭客户端socket连接</span></span><br><span class="line">    <span class="built_in">close</span>(user_data-&gt;sockfd);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定时器容器双向升序链表">2.3 定时器容器（双向升序链表）</h3>
<p>项目中为每个用户连接创建一个<code>util_timer</code>类的定时器节点，并在主程序的<code>Utils</code>实例中维护一个<strong>双向升序链表</strong>（<code>sort_timer_lst</code>），用于管理所有的定时器节点。</p>
<p>跟普通的数据结构一样，双向升序链表也有<strong>插入节点</strong>、<strong>删除节点</strong>、<strong>调整节点</strong>等操作。</p>
<ul>
<li><strong>插入节点</strong>：<code>add_timer</code>函数将新节点插入到链表中，保持链表的升序性
<ul>
<li>如果链表为空，直接作为头-尾节点插入</li>
<li>如果链表不为空，遍历链表，找到合适的位置插入</li>
</ul></li>
<li><strong>删除节点</strong>：<code>del_timer</code>函数将指定节点从链表中删除</li>
<li><strong>调整节点</strong>：<code>adjust_timer</code>函数将指定节点调整到合适的位置
<ul>
<li>当客户端与服务器有数据交互时，需要重启定时器，这时候对应节点的定时器时间会<strong>往后延迟过期时间</strong>，所以节点在链表中的位置也需要往后调整</li>
<li>当被调整的目标节点在<strong>链表尾部</strong>，或者定时时间仍然<strong>小于下一个节点</strong>的定时时间时，<strong>不用调整</strong></li>
<li>否则，将目标节点从链表中删除，<strong>重新插入</strong>到链表中(<code>add_timer</code>函数)</li>
</ul></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定时器容器：双向升序链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sort_timer_lst</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">sort_timer_lst</span>();</span><br><span class="line">    ~<span class="built_in">sort_timer_lst</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_timer</span><span class="params">(util_timer *timer)</span></span>;<span class="comment">//添加定时器</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjust_timer</span><span class="params">(util_timer *timer)</span></span>;<span class="comment">//通过递归调整定时器节点位置</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del_timer</span><span class="params">(util_timer *timer)</span></span>;<span class="comment">//删除定时器节点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tick</span><span class="params">()</span></span>;<span class="comment">//SIGALRM信号每次被触发就在信号处理函数中执行一次tick函数，以处理链表上到期的任务</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add_timer</span><span class="params">(util_timer *timer, util_timer *lst_head)</span></span>;<span class="comment">//添加新用户的定时器节点timer（while找到合适的位置插入）</span></span><br><span class="line"></span><br><span class="line">    util_timer *head;</span><br><span class="line">    util_timer *tail;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加定时器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_timer_lst::add_timer</span><span class="params">(util_timer *timer)</span></span>&#123;</span><br><span class="line">    <span class="comment">//空定时器不加入容器中</span></span><br><span class="line">    <span class="keyword">if</span>(!timer) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//head为空，当前定时器设为头节点(当前定时器为唯一节点)</span></span><br><span class="line">    <span class="keyword">if</span>(!head)&#123;</span><br><span class="line">        head = tail = timer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前定时器的超时时间 &lt; 头节点的超时时间，插入头节点（实现升序）</span></span><br><span class="line">    <span class="keyword">if</span>(timer-&gt;expire &lt; head-&gt;expire)&#123;</span><br><span class="line">        timer-&gt;next = head;</span><br><span class="line">        head-&gt;prev = timer;</span><br><span class="line">        head = timer;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其它情况需要遍历链表（add_timer函数实现while搜索，找到合适的位置插入）</span></span><br><span class="line">    <span class="built_in">add_timer</span>(timer, head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_timer_lst::add_timer</span><span class="params">(util_timer *timer, util_timer *lst_head)</span></span>&#123;</span><br><span class="line">    util_timer *prev = lst_head;</span><br><span class="line">    util_timer *tmp = prev-&gt;next;<span class="comment">//头节点已经被判断过了，所以从头节点的下一个节点开始判断</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到链表中第一个比timer大的节点位置，插入到该节点之前</span></span><br><span class="line">    <span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">        <span class="comment">//1. 找到了</span></span><br><span class="line">        <span class="keyword">if</span>(timer-&gt;expire &lt; tmp-&gt;expire)&#123;</span><br><span class="line">            <span class="comment">// 插入节点</span></span><br><span class="line">            prev-&gt;next = timer;</span><br><span class="line">            timer-&gt;next = tmp;</span><br><span class="line">            tmp-&gt;prev = timer;</span><br><span class="line">            timer-&gt;prev = prev;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//插入完成，退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 没找到，更新当前节点和prev节点</span></span><br><span class="line">        prev = tmp;</span><br><span class="line">        tmp = tmp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历后没找到，说明timer的超时时间最大，插入到链表尾部</span></span><br><span class="line">    <span class="keyword">if</span>(!tmp)&#123;<span class="comment">//tmp为nullptr</span></span><br><span class="line">        prev-&gt;next = timer;</span><br><span class="line">        timer-&gt;prev = prev;</span><br><span class="line">        timer-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        tail = timer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除定时器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_timer_lst::del_timer</span><span class="params">(util_timer *timer)</span></span>&#123;</span><br><span class="line">    <span class="comment">//空节点直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(!timer) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链表中只有一个定时器节点</span></span><br><span class="line">    <span class="keyword">if</span>((timer == head) &amp;&amp; (timer == tail))&#123;</span><br><span class="line">        head = <span class="literal">nullptr</span>;</span><br><span class="line">        tail = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">delete</span> timer;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被删除的定时器是头节点</span></span><br><span class="line">    <span class="keyword">if</span>(timer == head)&#123;</span><br><span class="line">        head = head-&gt;next;<span class="comment">//头节点后移</span></span><br><span class="line">        head-&gt;prev = <span class="literal">nullptr</span>;<span class="comment">//新头节点的前向指针置空</span></span><br><span class="line">        <span class="keyword">delete</span> timer;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被删除的定时器是尾节点</span></span><br><span class="line">    <span class="keyword">if</span>(timer == tail)&#123;</span><br><span class="line">        tail = tail-&gt;prev;<span class="comment">//尾节点前移</span></span><br><span class="line">        tail-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//新尾节点的后向指针置空</span></span><br><span class="line">        <span class="keyword">delete</span> timer;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//其它情况正常移除节点即可</span></span><br><span class="line">    timer-&gt;prev-&gt;next = timer-&gt;next;</span><br><span class="line">    timer-&gt;next-&gt;prev = timer-&gt;prev;</span><br><span class="line">    <span class="keyword">delete</span> timer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整定时器：当定时器的超时时间延长时(socket有新的收发消息行为)，调整定时器在链表中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_timer_lst::adjust_timer</span><span class="params">(util_timer *timer)</span></span>&#123;</span><br><span class="line">    <span class="comment">//ps: 调整时间只会延长，所以只需要向后调整（向前调整不会发生）;且timer已经在链表中</span></span><br><span class="line"></span><br><span class="line">    util_timer *tmp = timer-&gt;next;<span class="comment">//当前节点只会往后调or原地不动</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 空节点直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(!timer) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 已经是尾节点 or 超时时间仍然小于下一个节点的超时时间，不需要调整</span></span><br><span class="line">    <span class="keyword">if</span>(!tmp || (timer-&gt;expire &lt; tmp-&gt;expire)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 被调整的节点是头节点：将timer从链表中取出，重新插入</span></span><br><span class="line">    <span class="keyword">if</span>(timer == head)&#123;</span><br><span class="line">        <span class="comment">//将timer从链表中取出并更新头节点</span></span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        head-&gt;prev = <span class="literal">nullptr</span>;</span><br><span class="line">        timer-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重新插入：只能往后调整，所以从新头节点开始找</span></span><br><span class="line">        <span class="built_in">add_timer</span>(timer, head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 其它情况：将timer从链表中取出，从timer的下一个节点开始找合适的位置插入</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//将timer从链表中取出</span></span><br><span class="line">        timer-&gt;prev-&gt;next = timer-&gt;next;</span><br><span class="line">        timer-&gt;next-&gt;prev = timer-&gt;prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重新插入：只能往后调整，所以从timer的下一个节点开始找</span></span><br><span class="line">        <span class="built_in">add_timer</span>(timer, timer-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三定时实现与信号通信流程">三、定时实现与信号通信流程</h2>
<p>项目中实现定时器到时中断后跟主程序的通信是通过<strong>信号</strong>和<strong>管道</strong>实现的。</p>
<h3 id="管道的创建">3.1 管道的创建</h3>
<p>管道（pipe）是一种<strong>半双工通信方式</strong>，传输方式固定只能从<strong>写端</strong>传到<strong>读端</strong>，可以实现<strong>父子进程之间</strong>的通信。在本项目中，<strong>主线程</strong>（<code>epoll</code>监听）和<strong>信号处理函数</strong>（<code>sig_handler</code>）之间的通信是通过管道实现的。</p>
<p>管道也是一种文件描述符，所以本项目创建一个长度为2的<code>int</code>型数组，用于存放管道的读写文件描述符。在C++中通过<code>socketpair</code>函数创建管道。</p>
<p>其中，<code>pipefd[0]</code>是<strong>读端</strong>，<code>pipefd[1]</code>是<strong>写端</strong>。<strong>读端</strong>加入到主线程的<code>epoll</code>监听中，<strong>写端</strong>在信号处理函数中写入数据。当程序中唯一的定时器到时后，会触发<code>SIGALRM</code>信号并自动触发信号处理函数<code>sig_handler</code>，信号处理函数中向管道的<strong>写端</strong>写入数据，主线程中的<code>epoll</code>监听到<strong>读端</strong>有数据，就会对定时器容器进行遍历，处理到期的定时器。</p>
<p><img src="/2024/03/26/WebServer%E5%AD%A6%E4%B9%A07%EF%BC%9A%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E6%B4%BB%E6%97%B6%E9%97%B4/timerSignalProcess.png"></p>
<h4 id="socketpair函数创建管道">3.1.1 socketpair函数创建管道</h4>
<p>在Linux中，使用<code>socketpair</code>函数创建一对<strong>无名套接字</strong>，并将套接字的文件描述符存放在<code>int</code>型数组中。函数原型如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socketpair</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol, <span class="keyword">int</span> sv[<span class="number">2</span>])</span></span>;</span><br><span class="line"><span class="comment">//ret = socketpair(PF_UNIX, SOCK_STREAM, 0, m_pipefd);</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>domain</code>：协议族，可以是<code>PF_UNIX</code>（UNIX域协议族）或<code>PF_INET</code>（IPv4协议族）</li>
<li><code>type</code>：套接字类型，可以是<code>SOCK_STREAM</code>（字节流TCP套接字）或<code>SOCK_DGRAM</code>（数据报UDP套接字）</li>
<li><code>protocol</code>：协议类型，只能为0</li>
<li><code>sv[2]</code>：存放套接字文件描述符的数组（<code>sv[0]</code>是读端，<code>sv[1]</code>是写端；对应本项目中的<code>pipefd[2]</code>）</li>
<li>返回值<code>ret</code>：成功返回0，失败返回-1</li>
</ul>
<p>本项目中前面学过的<code>epoll</code>实现中，已经在<code>Utils</code>工具类中封装了关于<code>epoll</code>添加文件描述符的函数<code>addfd</code>以及设置文件描述符阻塞方式的函数<code>setnonblocking</code>，所以通过<code>socketpair</code>创建管道后，将<strong>读端</strong>加入到<code>epoll</code>监听中直接调用该函数即可。</p>
<p>将管道文件描述符设置为<strong>非阻塞</strong>，是为了避免管道套接字缓冲区写满了，阻塞导致<strong>异步</strong>执行的信号处理函数<code>sig_handler</code>执行时间过长影响主线程的正常工作。</p>
<p>在<code>webserver.cpp</code>中创建管道的代码如下(<code>eventListen</code>函数)：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过socketpair创建全双工管道,管道也是一种文件描述符</span></span><br><span class="line"><span class="comment">//管道作用:可以通过管道在程序中实现进程间通信</span></span><br><span class="line">ret = <span class="built_in">socketpair</span>(PF_UNIX, SOCK_STREAM, <span class="number">0</span>, m_pipefd);<span class="comment">//创建全双工管道读端m_pipefd[0]和写端m_pipefd[1]：写端是定时器向epoll通知事件的，epoll监听读端</span></span><br><span class="line"><span class="built_in">assert</span>(ret != <span class="number">-1</span>);</span><br><span class="line">utils.<span class="built_in">setnonblocking</span>(m_pipefd[<span class="number">1</span>]);<span class="comment">//设置写端非阻塞</span></span><br><span class="line">utils.<span class="built_in">addfd</span>(m_epollfd, m_pipefd[<span class="number">0</span>], <span class="literal">false</span>, <span class="number">0</span>);<span class="comment">//将读端加入主线程epoll监听</span></span><br></pre></td></tr></table></figure>
<h4 id="管道中传递的信号值">3.1.2 管道中传递的信号值</h4>
<p>项目中管道中传递的数据是<strong>信号值</strong>，即<code>SIGALRM</code>和<code>SIGTERM</code>信号的值。其中，<code>SIGALRM</code>信号代表定时器到时，<code>SIGTERM</code>信号代表服务器关闭（用户在终端执行了<code>Ctrl+C</code>）。</p>
<p>这两个信号在库函数中有定义，可以直接使用。<code>SIGALRM</code>的值是14，<code>SIGTERM</code>的值是15。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGALRM 14  <span class="comment">//由alarm系统调用产生timer时钟信号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGTERM 15  <span class="comment">//终端发送的终止信号</span></span></span><br></pre></td></tr></table></figure>
<h3 id="信号通信流程">3.2 信号通信流程</h3>
<p>在Linux中，信号是一种<strong>异步通知机制</strong>，用于通知进程发生了某种事件。信号是由<strong>内核</strong>或其他进程发送给目标进程的，目标进程在接收到信号后会<strong>中断当前的正常流程</strong>，执行信号处理函数。</p>
<p>需要先将本项目中关注的两种信号<code>SIGALRM</code>和<code>SIGTERM</code>的<strong>信号处理函数</strong><code>sig_handler</code>注册到系统中，然后在信号处理函数中实现对应的功能。</p>
<p>注册函数：项目中在<code>lst_timer.cpp</code>中定义了信号处理函数<code>sig_handler</code>的实现，其中信号处理函数<code>sig_handler</code>只简单地向管道的<strong>写端</strong>写入信号值。后续的操作交由主线程去处理，这样能保证异步处理不耗时的工作，防止影响主线程。</p>
<h4 id="addsig函数注册绑定信号-信号处理函数">3.2.1
addsig函数：注册绑定信号-信号处理函数</h4>
<p>C++中信号注册主要通过<code>sigaction</code>结构体对信号属性进行封装设置，然后通过<code>sigaction()</code>函数注册信号处理函数。</p>
<p><code>sigaction</code>结构体定义如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> &#123;</span></span><br><span class="line">    <span class="built_in"><span class="keyword">void</span></span> (*sa_handler)(<span class="keyword">int</span>); <span class="comment">//信号处理函数，当收到信号时，执行sa_handler函数</span></span><br><span class="line">    <span class="built_in"><span class="keyword">void</span></span> (*sa_sigaction)(<span class="keyword">int</span>, <span class="keyword">siginfo_t</span> *, <span class="keyword">void</span> *); <span class="comment">//信号处理函数，与 sa_handler 互斥</span></span><br><span class="line">    <span class="keyword">sigset_t</span> sa_mask; <span class="comment">//在信号处理函数执行期间需要阻塞的信号集合</span></span><br><span class="line">    <span class="keyword">int</span> sa_flags; <span class="comment">//指定信号处理的行为，触发sa_handler信号处理函数时会被自动传入sa_handler函数中</span></span><br><span class="line">    <span class="built_in"><span class="keyword">void</span></span> (*sa_restorer)(<span class="keyword">void</span>); <span class="comment">//已经废弃</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中，结构体中的信号处理函数<code>sa_handler</code>就是后面还会讲到的<code>sig_handler</code>函数。</p>
<p><code>sa_mask</code>是一个信号集合，用于在信号处理函数执行期间<strong>阻塞</strong>的信号，防止信号处理函数执行过程中被其他信号打断。</p>
<p><code>sigaction</code>函数原型如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaction</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">const</span> struct sigaction *act, struct sigaction *oldact)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>signum</code>：注册的信号值，即<code>SIGALRM</code>和<code>SIGTERM</code></li>
<li><code>act</code>：新的信号处理方式（属性），即<code>sigaction</code>结构体</li>
<li><code>oldact</code>：旧的信号处理方式（属性），用于保存之前的信号处理方式，如果不关心可以传入<code>nullptr</code></li>
</ul>
<p>因此本项目实现的<code>addsig</code>信号注册函数如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加绑定信号函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Utils::addsig</span><span class="params">(<span class="keyword">int</span> sig, <span class="keyword">void</span>(handle)(<span class="keyword">int</span>), <span class="keyword">bool</span> restart)</span></span>&#123;</span><br><span class="line">    <span class="comment">//sigaction结构体：用于设置和处理信号处理程序的结构体</span></span><br><span class="line">    <span class="comment">/*struct sigaction &#123;</span></span><br><span class="line"><span class="comment">        void (*sa_handler)(int); //信号处理函数，当收到信号时，执行sa_handler函数</span></span><br><span class="line"><span class="comment">        void (*sa_sigaction)(int, siginfo_t *, void *); //信号处理函数，与 sa_handler 互斥</span></span><br><span class="line"><span class="comment">        sigset_t sa_mask; //在信号处理函数执行期间需要阻塞的信号集合</span></span><br><span class="line"><span class="comment">        int sa_flags; //指定信号处理的行为，触发sa_handler信号处理函数时会被自动传入sa_handler函数中</span></span><br><span class="line"><span class="comment">        void (*sa_restorer)(void); //已经废弃</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建sigaction结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sa</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;sa, <span class="string">&#x27;\0&#x27;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(sa));</span><br><span class="line">    sa.sa_handler = handle;<span class="comment">//设置信号处理函数</span></span><br><span class="line">    <span class="keyword">if</span>(restart)&#123;</span><br><span class="line">        <span class="comment">//SA_RESTART：如果信号中断了进程的某个系统调用，系统调用就会自动重启</span></span><br><span class="line">        sa.sa_flags |= SA_RESTART;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sigfillset</span>(&amp;sa.sa_mask);<span class="comment">//添加到默认信号集sa_mask中，处理当前默认信号集sa_mask时阻塞其它信号集，以确保信号处理程序的执行不会被其他信号中断</span></span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">sigaction</span>(sig, &amp;sa, <span class="literal">nullptr</span>) != <span class="number">-1</span>);<span class="comment">//注册信号处理函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="sig_handler函数信号处理函数">3.2.2
sig_handler函数：信号处理函数</h4>
<p>当<strong>内核</strong>检测到<strong>信号发生</strong>时，检测<strong>signal位图信息</strong>（也就是前面注册过的），然后通知<strong>用户态</strong>调用对应的<strong>信号处理函数</strong>。</p>
<p>具体流程如下：</p>
<p><img src="/2024/03/26/WebServer%E5%AD%A6%E4%B9%A07%EF%BC%9A%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E6%B4%BB%E6%97%B6%E9%97%B4/signalProcess.png"></p>
<p>由上图可知，Linux下信号采用异步机制，信号处理函数和当前进程是两条不同的执行路线。</p>
<p>在注册时我们选择了屏蔽方式，所以为了确保信号不会被屏蔽太久，本项目中信号处理函数仅仅通过管道发送信号值，不处理信号对应的逻辑（由主程序处理），缩短异步执行时间，减少对主程序的影响。</p>
<ul>
<li>内核的工作
<ul>
<li>内核<strong>检测和接收</strong>信号，同时向<strong>用户进程</strong>发送一个中断，使其进入内核态</li>
<li>当信号处理函数执行完毕后，还会<strong>返回内核态</strong>，检查是否还有其它信号未处理</li>
</ul></li>
<li>用户态的工作
<ul>
<li>用户进程<strong>接收</strong>内核的中断</li>
<li>进入<strong>信号处理函数</strong>，执行信号处理函数的逻辑</li>
<li>所有的信号处理完毕后，<strong>返回用户态</strong>，继续执行用户进程的正常流程（恢复到中断前运行的位置）</li>
</ul></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//信号处理函数：处理信号SIGALRM-SIGTERM</span></span><br><span class="line"><span class="comment">//通过管道通知主循环有SIGALRM or SIGTERM信号需要处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Utils::sig_handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span>&#123;</span><br><span class="line">    <span class="comment">//保留原来的errno，在函数最后恢复，以保证函数的可重入性</span></span><br><span class="line">    <span class="keyword">int</span> save_errno = errno;</span><br><span class="line">    <span class="keyword">int</span> msg = sig;</span><br><span class="line">    <span class="built_in">send</span>(u_pipefd[<span class="number">1</span>], (<span class="keyword">char</span> *)&amp;msg, <span class="number">1</span>, <span class="number">0</span>);<span class="comment">//通过管道的写端来通知主循环，有信号需要处理（传给主循环epoll监听的管道读端）</span></span><br><span class="line">    errno = save_errno;<span class="comment">//恢复原来的errno</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="主程序中注册信号">3.2.3 主程序中注册信号</h4>
<p>在<code>webserver.cpp</code>中的<code>eventListen</code>函数中，注册了两个信号<code>SIGALRM</code>和<code>SIGTERM</code>，并绑定了信号处理函数<code>sig_handler</code>。</p>
<p>另外，我们除了<code>SIGALRM</code>和<code>SIGTERM</code>信号外，还注册了<code>SIGPIPE</code>信号，将其处理方式设置为<code>SIG_IGN</code>，即忽略<code>SIGPIPE</code>信号。<code>SIGPIPE</code>信号是在<strong>读取已关闭的管道</strong>时产生的，如果不处理<code>SIGPIPE</code>信号，当读取已关闭的管道时会导致程序退出。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定不同信号（SIGPIPE-SIGALRM-SIGTERM）的信号处理函数（忽略 or sig_handler发送sig标识）</span></span><br><span class="line">utils.<span class="built_in">addsig</span>(SIGPIPE, SIG_IGN);</span><br><span class="line">utils.<span class="built_in">addsig</span>(SIGALRM, utils.sig_handler, <span class="literal">false</span>);</span><br><span class="line">utils.<span class="built_in">addsig</span>(SIGTERM, utils.sig_handler, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>同时在<code>eventListen</code>函数中开启唯一的定时器，通过<code>alarm</code>函数设置定时器的超时时间，当定时器到时后会发送注册过的<code>SIGALRM</code>信号后，触发信号处理函数<code>sig_handler</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动定时器，每TIMESLOT秒发送SIGALRM信号（整个程序中只有一个真实的定时器，定时器容器中的是存储超时的绝对时间来与这个唯一的timeout处理进行比较）</span></span><br><span class="line"><span class="built_in">alarm</span>(TIMESLOT);</span><br></pre></td></tr></table></figure>
<h2 id="四完整的定时器使用流程主循环中">四、完整的定时器使用流程（主循环中）</h2>
<p>首先，服务端开启时，创建一个定时器容器，并创建一个全双工管道，将管道的读端加入到<code>epoll</code>监听中。注册两个信号<code>SIGALRM</code>和<code>SIGTERM</code>，并绑定信号处理函数<code>sig_handler</code>。</p>
<p>然后，开启唯一的定时器，通过<code>alarm</code>函数设置唯一真实定时器的超时时间，当定时器到时后会发送注册过的<code>SIGALRM</code>信号后，触发信号处理函数<code>sig_handler</code>将信号值写入管道发送给主线程，由主线程决定执行什么操作。</p>
<p>之后，主线程epoll管道读端监听到有管道数据，会调用<code>dealwithsignal</code>函数解析信号值，根据信号值的不同重置<code>timeout</code>or<code>stop_server</code>标识符（处理定时器操作or关闭服务器）。</p>
<p>最后，根据用户的连接请求具体地实现定时器使用：</p>
<ul>
<li>当客户端与服务器连接时（连接事件），为其创建一个用户结构（结构体中包含定时器节点，并将定时器节点加入到定时器容器中）</li>
<li>当客户端与服务器有数据交互时(读/写事件)，需要重置该定时器节点，调整定时器在链表中的位置</li>
<li>当定时器到时后，处理定时信号，将<code>timeout</code>标志设置为<code>true</code>，在主线程中遍历定时器容器，处理删除到期的定时器节点</li>
</ul>
<p>除了<code>SIGALRM</code>信号外，我们还注册了<code>SIGTERM</code>信号，这里顺便讲一下，当管道读端接收到<code>SIGTERM</code>信号时，主线程会将<code>stop_server</code>标志设置为<code>true</code>，退出<code>eventLoop</code>的<code>while</code>循环，关闭服务器。</p>
<p><img src="/2024/03/26/WebServer%E5%AD%A6%E4%B9%A07%EF%BC%9A%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E6%B4%BB%E6%97%B6%E9%97%B4/dealwithsignal.png"></p>
<p><strong>主线程循环中epoll监听到管道读端有数据</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主循环:epoll_wait阻塞监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WebServer::eventLoop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> timeout = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">bool</span> stop_server = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!stop_server)&#123;</span><br><span class="line">        <span class="comment">//epoll_wait设置为-1,也就是阻塞监听事件</span></span><br><span class="line">        <span class="comment">//当有事件发生时,epoll_wait返回事件个数number,且事件存在events数组中</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="built_in">epoll_wait</span>(m_epollfd, events, MAX_EVENT_NUMBER, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历events数组,处理就绪事件</span></span><br><span class="line">        <span class="keyword">if</span>(number &lt; <span class="number">0</span> &amp;&amp; errno != EINTR)&#123;</span><br><span class="line">            <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;epoll failure&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sockfd = events[i].data.fd;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//管道读端有事件发生:信号处理，通过dealwithsignal从epoll管道读端读取信号，并解析对应的信号（SIGALRM-SIGTERM）</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((sockfd == m_pipefd[<span class="number">0</span>]) &amp;&amp; (events[i].events &amp; EPOLLIN))&#123;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="built_in">dealwithsignal</span>(timeout, stop_server);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">false</span> == flag)</span><br><span class="line">                    <span class="built_in">LOG_ERROR</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;dealclientdata failure&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理定时器事件:timer tick定时中断,执行timer_handler处理链表上到期的节点</span></span><br><span class="line">        <span class="keyword">if</span> (timeout)</span><br><span class="line">        &#123;</span><br><span class="line">            utils.<span class="built_in">timer_handler</span>();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">LOG_INFO</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;timer tick&quot;</span>);</span><br><span class="line"></span><br><span class="line">            timeout = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>针对timeout标志的处理</strong></p>
<p>定时器到时后，调用<code>timer_handler</code>函数处理链表上到期的节点，处理完后重开定时器。</p>
<p>具体实现如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主函数发现定时器超时，调用该函数查找超时定时器并处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Utils::timer_handler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_timer_lst.<span class="built_in">tick</span>();<span class="comment">//定时器容器中查找并处理超时定时器</span></span><br><span class="line">    <span class="built_in">alarm</span>(m_TIMESLOT);<span class="comment">//重新定时，以不断触发SIGALRM信号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>tick</code>函数是定时器容器中的一个函数，用于处理链表上到期的节点。由于容器是升序的，所以当找到第一个未到期的节点时，就可以结束遍历。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SIGALRM信号每次被触发，主循环管道读端监测出对应的超时信号后就会调用timer_handler进而调用定时器容器中通过tick函数查找并处理超时定时器</span></span><br><span class="line"><span class="comment">// 处理链表上到期的任务(定时器timeout回调函数删除socket和定时器)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_timer_lst::tick</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">time_t</span> cur = <span class="built_in">time</span>(<span class="literal">NULL</span>);<span class="comment">//当前定时器到时的绝对时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环定时器容器，比较定时器的超时时间和当前时间（都是绝对时间）</span></span><br><span class="line">    util_timer *tmp = head;</span><br><span class="line">    <span class="keyword">while</span> (tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur &lt; tmp-&gt;expire)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于定时器是升序链表，所以未找到cur &lt; tmp-&gt;expire前，前面的节点都是超时的，得删除节点并关闭连接</span></span><br><span class="line">        <span class="comment">// （通过回调函数cb_func处理，cb_func不删除定时器节点）</span></span><br><span class="line">        tmp-&gt;<span class="built_in">cb_func</span>(tmp-&gt;user_data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除超时节点并更新tmp和head</span></span><br><span class="line">        head = tmp-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (head)</span><br><span class="line">        &#123;</span><br><span class="line">            head-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">        tmp = head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于需要删除的非活跃连接，执行定时器节点中的回调函数<code>cb_func</code>，在回调函数中关闭对应的文件描述符，并将其从epoll内核事件表中删除。执行完回调函数后就可以
在容器中<code>delete</code>删除该定时器节点了。</p>
<h2 id="五总结">五、总结</h2>
<p>本文完成了Webserver项目中通过定时器实现了对<strong>非活跃连接的客户端</strong>的处理，主要知识点有<strong>管道</strong>、<strong>信号机制</strong>、<strong>定时器容器</strong>等。</p>
<p>完成了定时器，项目基本已经完善了，但是为了<strong>对服务器运行状态进行监控维护</strong>，最后还需要添加<strong>日志系统</strong>，下一篇文章将会讲解日志系统的实现。具体内容请看下一篇博客<a href="https://akirazheng.github.io/2024/03/27/WebServer%E5%AD%A6%E4%B9%A08%EF%BC%9A%E9%80%9A%E7%94%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/">WebServer学习8：通用日志系统的设计</a></p>
]]></content>
      <categories>
        <category>WebServer项目（C++）</category>
      </categories>
  </entry>
  <entry>
    <title>WebServer学习9：WebBench压力测试</title>
    <url>/2024/03/27/WebServer%E5%AD%A6%E4%B9%A09%EF%BC%9AWebBench%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="一webbench简介">一、WebBench简介</h2>
<p>WebBench是一个在Linux下使用的网站压力测试工具，它使用<code>fork()</code>实现多进程并发，每个进程都是一个客户端，可以模拟多个客户端访问Web服务器，可以用来测试Web服务器的性能，测试Web服务器能够支持多少用户同时访问。</p>
<p>WebBench是由<a href="https://www.lionbridge.com/">Lionbridge</a>开发的开源网站压测工具，除了能测试静态页面外，还可以测试动态页面，如PHP、JSP、ASP等。同时还支持SSL安全网站的测试。</p>
<p><strong>webbench压测原理</strong></p>
<ul>
<li>⾸先在主进程中 fork
出多个⼦进程，每个<strong>子进程</strong>在用户要求的时间内对目标网站(Web)<strong>循环发出实际访问请求</strong></li>
<li>子进程通过<strong>管道(pipe)写端</strong>向父进程传递请求访问完毕后记录到的总信息，⽗进程做最终的统计结果</li>
<li>待时间到后所有子进程结束，<strong>父进程统计</strong>并给用户显示<strong>最后的测试结果</strong>，然后退出</li>
<li>webbench
最多可以模拟<strong>3万</strong>个并发连接去测试⽹站的负载能⼒。</li>
</ul>
<h2 id="二webbench使用">二、WebBench使用</h2>
<p>WebBench的标准测试可以向我们展示服务器的两项内容：<strong>每秒钟的请求数</strong>和<strong>每秒钟的传输速度</strong>。</p>
<h3 id="webbench下载安装">1. WebBench下载安装</h3>
<p><a href="http://home.tiscali.cz/~cz210552/webbench">WebBench的官方主页</a></p>
<p><a href="http://www.ha97.com/webbench-1.5.tar.gz">WebBench工具的下载地址</a></p>
<p>Linux下的下载安装步骤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.ha97.com/webbench-1.5.tar.gz</span><br><span class="line">tar -zxvf webbench-1.5.tar.gz</span><br><span class="line">cd webbench-1.5</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>在本人的WebServer项目中已经将WebBench的源码放在了<code>/MyWebServer/WebBench_test/webbench-1.5</code>目录下，已经编译过了，可以直接使用，不需要重新在官网下载安装。</p>
<h3 id="webbench使用">2. WebBench使用</h3>
<h4 id="启动webserver服务器">2.1 启动WebServer服务器</h4>
<p>首先确保webserver项目已经通过<code>make</code>编译成可执行文件了，然后在<code>/MyWebServer</code>项目的根目录下以关闭日志的形式启动WebServer服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./server -c 0</span><br></pre></td></tr></table></figure>
<p><img src="/2024/03/27/WebServer%E5%AD%A6%E4%B9%A09%EF%BC%9AWebBench%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/webBench_runserver.png"></p>
<h4 id="使用webbench进行压力测试">2.2 使用WebBench进行压力测试</h4>
<p>启动了服务器后，在<code>/MyWebServer/WebBench_test/webbench-1.5</code>的目录下查看<code>webbench</code>的使用方式和版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./webbench -h</span><br><span class="line">./webbench -V</span><br></pre></td></tr></table></figure>
<p><img src="/2024/03/27/WebServer%E5%AD%A6%E4%B9%A09%EF%BC%9AWebBench%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/webBench_help.png"></p>
<p><img src="/2024/03/27/WebServer%E5%AD%A6%E4%B9%A09%EF%BC%9AWebBench%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/webBench_version.png"></p>
<p>使用WebBench进行压力测试，例如对本项目中，WebServer服务器的IP地址为<code>http://127.0.0.1:9006/</code>进行压力测试，测试时间为<code>5</code>秒，模拟<code>4000</code>个客户端并发访问。</p>
<p><strong>注意：</strong>根据webBench的源码，输入的URL地址必须以<code>http://</code>开头，且要以<code>/</code>结尾，否则会报错。</p>
<blockquote>
<p>-t 5：表示测试时间为5秒</p>
<p>-c 4000：表示模拟4000个客户端并发访问</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./webbench -c 4000 -t 5 http://127.0.0.1:9006/</span><br></pre></td></tr></table></figure>
<p><img src="/2024/03/27/WebServer%E5%AD%A6%E4%B9%A09%EF%BC%9AWebBench%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/webBench_test4000.png"></p>
<p><strong>结果分析：</strong></p>
<p>从结果上来看，每秒钟响应请求数：24525
pages/min，每秒钟传输数据量20794612 bytes/sec.</p>
<blockquote>
<p>并发连接总数：4000</p>
<p>服务器压测访问时间：5s</p>
<p>响应请求：24525 pages/min</p>
<p>传输速度：20794612 bytes/sec</p>
<p>共发送82965个请求，所有访问请求都成功了，说明未超负荷</p>
<p>测试结果QPS计算：QPS=N/T=82965/5=16593（请求数量/压测时间），QPS大概为<strong>1.66万</strong></p>
</blockquote>
<p>由于服务器配置只有<code>4核4G</code>，所以在<code>4000</code>个并发连接下，服务器的QPS大概为<strong>1.66万</strong>，破了<strong>万级QPS</strong>，如果服务器配置更高，那么QPS会更高。</p>
<h4 id="webbench受限原因分析">2.3 WebBench受限原因分析</h4>
<p>然而，当我尝试将并发连接数增加到10000时，webBench会报错，提示<code>problems forking worker no.4552</code>，所以我尝试将并发连接数减少到<code>4552</code>是可以正常测试的，但是并发连接数超过<code>4552</code>就会报错。说明肯定有某个地方收到了数量限制。那么我们继续来看一下到底是什么原因导致的。</p>
<p><img src="/2024/03/27/WebServer%E5%AD%A6%E4%B9%A09%EF%BC%9AWebBench%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/webBench_test10000.png"></p>
<p>根据报错提醒可以初步断定是<code>fork()</code>函数的问题，也就是进程数量受Linux系统资源限制，因此测试不到上万的并发连接，最多只能测试到<code>4552</code>个并发连接。</p>
<p><code>fork()</code>函数的限制是由<code>ulimit -a</code>命令查看的，其中<code>max user processes</code>表示用户最大进程数，<code>open files</code>表示用户最大打开文件数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ulimit -a</span><br></pre></td></tr></table></figure>
<p><img src="/2024/03/27/WebServer%E5%AD%A6%E4%B9%A09%EF%BC%9AWebBench%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/webBench_testlimit1.png"></p>
<p>可以看到<code>max user processes</code>的值是<code>15183</code>，<code>open files</code>的值是<code>1024</code>，既然<code>max user processes</code>可以达到<code>15183</code>，那么为什么会失败呢？</p>
<p>使用<code>ps -ef | grep server</code>命令查看当前进程数，发现<code>server</code>进程数已经达到了<code>15183</code>，也就是说<code>server</code>进程数已经达到了系统的最大进程数限制，所以无法再创建新的进程了。</p>
<p>使用<code>ulimit -u 2048</code>和<code>ulimit -n 2048</code>修改系统配置后依然无法解决问题，暂时先不深究了，后续有时间再研究。</p>
<h2 id="三总结">三、总结</h2>
<p>实现服务器压测后，可以看到在<code>4000</code>个并发连接下，硬件配置为<code>4核4G</code>的服务器，本项目HTTP服务器的QPS大概为<strong>1.66万</strong>，如果服务器配置更高，那么QPS会更高。但是由于<code>fork()</code>函数的限制，最多只能测试到<code>4552</code>个并发连接，无法测试到上万的并发连接。</p>
<p>完成了WebBench的压力测试后，WebServer项目的学习也就告一段落了，后续会继续准备学习<strong>基于raft的并发KV存储系统</strong>，敬请期待。</p>
]]></content>
      <categories>
        <category>WebServer项目（C++）</category>
      </categories>
  </entry>
  <entry>
    <title>WebServer学习8：通用日志系统的设计</title>
    <url>/2024/03/27/WebServer%E5%AD%A6%E4%B9%A08%EF%BC%9A%E9%80%9A%E7%94%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="一两种日志系统类型">一、两种日志系统类型</h2>
<h3 id="同步日志系统">1.1 同步日志系统</h3>
<p>同步日志系统是指日志写入和日志输出是同步的，即写入日志后，立即输出到日志文件中。（本项目中配置文件默认为同步日志）</p>
<p>由于同步日志中日志写入函数跟工作函数是串行的，所以涉及到文件IO操作，如果单条日志内容较大时，会导致工作函数阻塞，影响工作效率。</p>
<h3 id="异步日志系统">1.2 异步日志系统</h3>
<p>异步日志系统是指日志写入和日志输出是异步的，即写入日志后，不立即输出到日志文件中，而是先写入到一个<strong>队列</strong>中，然后由另一个线程（日志线程）负责将缓冲区中的日志内容输出到日志文件中。也就是说工作线程和日志线程是并行的，工作线程作为<strong>生产者</strong>只负责将日志信息传到<strong>队列</strong>中就结束了，剩下的操作交由日志线程作为<strong>消费者</strong>全权处理。</p>
<p>由于异步日志中单独开辟了一个线程来处理日志输出，所以这里需要有一些关于线程的基础知识，比如线程的创建、线程的同步（互斥锁&amp;条件变量）、线程的销毁等。具体这部分基础知识可以先学习本人的另一篇博客：<a href="https://akirazheng.github.io/2024/02/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88C++%EF%BC%89/">从0开始实现线程池(C++)</a>。</p>
<p>在上面推荐的博客中，我们了解到生产者-消费者模型，异步日志系统就是一个典型的生产者-消费者模型。</p>
<ul>
<li><strong>生产者</strong>：主线程 &amp;&amp;
线程池中的工作线程，将日志信息写入到队列中</li>
<li><strong>消费者</strong>：日志线程，从队列中取出日志信息，输出到日志文件中</li>
</ul>
<p><img src="/2024/03/27/WebServer%E5%AD%A6%E4%B9%A08%EF%BC%9A%E9%80%9A%E7%94%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/producter-consumer.png"></p>
<h2 id="二单例模式">二、单例模式</h2>
<p>单例模式是一种常见的设计模式，它保证单例类<strong>只有一个实例</strong>，并提供一个全局访问点。</p>
<p>实现思路：</p>
<ul>
<li><strong>私有化</strong>它的<strong>构造函数</strong>，以防止外界创建单例类的对象；</li>
<li>使用<strong>类的私有静态指针变量</strong>指向类的唯一实例，并用一个公有的静态方法获取该实例。</li>
</ul>
<p>实现单例模式有两种方式：</p>
<ul>
<li><strong>饿汉模式</strong>：迫不及待地，在程序启动或单例类被加载的时候就创建单例对象；
<ul>
<li>由于在程序启动时就创建单例对象，所以是线程安全的</li>
</ul></li>
<li><strong>懒汉模式</strong>：懒得理你，只有在第一次调用获取单例对象的方法时才创建单例对象；
<ul>
<li>由于多线程中可能会有多个线程同时<strong>第一次</strong>调用获取单例对象的方法，所以在首次调用中需要确保线程安全</li>
<li>实现线程安全：<strong>加锁</strong>、<strong>双重检查锁</strong>。</li>
</ul></li>
</ul>
<p>关于单例模式的详细内容，可以参考本人的另一篇博客：<a href="https://akirazheng.github.io/2024/01/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">设计模式1：单例模式(C++)</a>。</p>
<p>在单例模式的博客中，我们需要重点关注C++11后，局部静态变量可以实现无锁保证线性安全，所以在实现日志系统时，我们可以使用局部静态变量来实现单例模式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//日志采用单例模式-懒汉模式，需要考虑线程安全</span></span><br><span class="line">    <span class="comment">//C++11之后，静态局部变量的初始化是线程安全的，所以可以直接使用静态局部变量，不需要加锁</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Log *<span class="title">get_instance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">static</span> Log instance;<span class="comment">//局部静态变量，只会初始化一次</span></span><br><span class="line">        <span class="keyword">return</span> &amp;instance;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//单例模式-私有构造函数</span></span><br><span class="line">    <span class="built_in">Log</span>();</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Log</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="三阻塞队列">三、阻塞队列</h2>
<p>如果选择<strong>异步日志系统</strong>，那么就需要使用<strong>阻塞队列</strong>来实现生产者-消费者模型。</p>
<ul>
<li>对于<strong>生产者</strong>来说，写日志到队列中如果队列已经满了，那么直接返回写入失败，不会阻塞（因为生产者是主线程和线程池中的工作线程，不能阻塞，队列满时写入日志就会丢失一条日志，所以队列尽可能设置大一点）</li>
<li>但是对于<strong>消费者</strong>来说，如果队列为空，那么消费者线程就会阻塞，直到队列中有新的数据再继续消费（也就是说队列执行<code>pop</code>操作时，如果队列为空，日志线程就会一直阻塞在<code>pop</code>操作）</li>
</ul>
<p>所以我们实现阻塞队列的思想就是：</p>
<ul>
<li><strong>消费者</strong>读取队列<code>pop</code>操作：如果队列为空，就一直阻塞，直到队列中有新的数据再继续消费</li>
<li><strong>生产者</strong>写入队列<code>push</code>操作（失败）：如果队列满了，直接返回写入失败</li>
<li><strong>生产者</strong>写入队列<code>push</code>操作（成功）：如果队列不为空，就唤醒消费者线程（日志线程），日志线程会结束<code>pop</code>阻塞，从队列中取出日志信息，输出到日志文件中</li>
</ul>
<p>在实现阻塞队列时，我们需要考虑线程安全问题，所以需要使用<strong>互斥锁</strong>和<strong>条件变量</strong>来保证线程安全。</p>
<p>我们前面已经在<strong>线程池</strong>的设计中封装了<strong>互斥锁</strong>和<strong>条件变量</strong>，所以可以直接使用封装后的<code>locker</code>。</p>
<p>在C++中，阻塞队列可以很方便地使用<code>std::queue</code>来实现，在本项目中，我们尝试通过<strong>循环数组</strong>来模拟实现一个<strong>阻塞队列</strong>（先进先出）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">m_back = (m_back + <span class="number">1</span>) % m_max_size; <span class="comment">//循环数组</span></span><br><span class="line">m_front = (m_front + <span class="number">1</span>) % m_max_size; <span class="comment">//循环数组</span></span><br></pre></td></tr></table></figure>
<p>循环数组的概念使我们在<code>push</code>时其实是向右循环移动<strong>队尾指针</strong>并覆盖这个位置上原有的数据；在<code>pop</code>时其实是向右循环移动<strong>队首指针</strong>并覆盖这个位置上原有的数据。（先进先出）</p>
<p>阻塞队列的实现主要包含<strong>入队push</strong>、<strong>出队pop</strong>、<strong>清空clear</strong>三个操作，以及<strong>队列是否为空</strong>和<strong>队列是否已满</strong>的判断。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 利用循环数组实现队列效果（也可以直接用std::queue）：m_back = (m_back + 1) % m_max_size; </span></span><br><span class="line"><span class="comment">* 为了线程安全，进行队列操作时需要加互斥锁</span></span><br><span class="line"><span class="comment">* 为了实现队列的阻塞功能，需要使用条件变量：</span></span><br><span class="line"><span class="comment">*   阻塞队列中，各个线程生产者负责往阻塞队列中`push`日志消息，消费者线程（日志线程）负责从阻塞队列中`pop`日志消息并写入日志文件</span></span><br><span class="line"><span class="comment">*   因此日志线程的`worker`函数中需要不断地从阻塞队列中取出日志消息并写入日志文件。</span></span><br><span class="line"><span class="comment">*       也就是`worker`函数作为消费者`pop`队列中的数据时，遇到队列为空时需要通过条件变量阻塞等待，</span></span><br><span class="line"><span class="comment">*       直到生产者线程往队列中`push`数据后唤醒日志线程，继续`pop`队列中的数据写进日志文件缓冲区中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BLOCK_QUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCK_QUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;../lock/locker.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">block_queue</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数：初始化创建队列</span></span><br><span class="line">    <span class="built_in">block_queue</span>(<span class="keyword">int</span> max_size = <span class="number">1000</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(max_size &lt;= <span class="number">0</span>)<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        m_max_size = max_size;</span><br><span class="line">        m_array = <span class="keyword">new</span> T[m_max_size];</span><br><span class="line">        m_size = <span class="number">0</span>;</span><br><span class="line">        m_front = <span class="number">-1</span>;</span><br><span class="line">        m_back = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空队列：数组数据内容是可以覆盖的，所以循环数组的清空只需要将队头和队尾指针置为-1即可</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();<span class="comment">//队列操作需要加锁</span></span><br><span class="line">        m_size = <span class="number">0</span>;</span><br><span class="line">        m_front = <span class="number">-1</span>;</span><br><span class="line">        m_back = <span class="number">-1</span>;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数：释放队列资源</span></span><br><span class="line">    ~<span class="built_in">block_queue</span>()&#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(m_array != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span>[] m_array;</span><br><span class="line">        &#125;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">full</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(m_size &gt;= m_max_size)&#123;</span><br><span class="line">            m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(m_size == <span class="number">0</span>)&#123;</span><br><span class="line">            m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队首</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">front</span><span class="params">(T &amp;value)</span></span>&#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(m_size == <span class="number">0</span>)&#123;</span><br><span class="line">            m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        value = m_array[m_front];</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队尾</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">back</span><span class="params">(T &amp;value)</span></span>&#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(m_size == <span class="number">0</span>)&#123;</span><br><span class="line">            m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        value = m_array[m_back];</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队列当前大小</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmpSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        tmpSize = m_size;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tmpSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队列最大容量</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max_size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmpMaxSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        tmpMaxSize = m_max_size;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> tmpMaxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往队列中添加元素：生产者</span></span><br><span class="line">    <span class="comment">//需要唤醒阻塞的消费者线程（日志线程）</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T &amp;item)</span></span>&#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 队列满时，写入日志失败，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(m_size &gt;= m_max_size)&#123;</span><br><span class="line">            m_cond.<span class="built_in">broadcast</span>();<span class="comment">//唤醒日志线程，使其尽快将队列中的日志写入缓冲区，腾出队列空间</span></span><br><span class="line">            m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 队列不满时，将日志写入队列，写入成功，返回true</span></span><br><span class="line">        m_back = (m_back + <span class="number">1</span>) % m_max_size;<span class="comment">//循环数组实现队列</span></span><br><span class="line">        m_array[m_back] = item;</span><br><span class="line"></span><br><span class="line">        m_size++;</span><br><span class="line"></span><br><span class="line">        m_cond.<span class="built_in">broadcast</span>();<span class="comment">//唤醒日志线程，通知其队列中有日志需要写入缓冲区</span></span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从队列中取出元素：消费者</span></span><br><span class="line">    <span class="comment">//为了实现阻塞日志队列，消费者线程在队列为空时需要阻塞等待</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(T &amp;item)</span></span>&#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 队列为空时，阻塞消费线程（日志线程），等待生产者往队列中push数据从而唤醒消费者线程</span></span><br><span class="line">        <span class="keyword">while</span> (m_size &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!m_cond.<span class="built_in">wait</span>(m_mutex.<span class="built_in">get</span>()))&#123;</span><br><span class="line">                m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//阻塞等待失败，返回false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 队列不为空或阻塞结束时，从队列中取出日志，取出成功，返回true</span></span><br><span class="line">        m_front = (m_front + <span class="number">1</span>) % m_max_size;<span class="comment">//循环数组实现队列</span></span><br><span class="line">        item = m_array[m_front];</span><br><span class="line">        m_size--;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从队列中取出元素：消费者(增加阻塞超时处理-虽然本项目中未使用)</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">pop</span><span class="params">(T &amp;item, <span class="keyword">int</span> ms_timeout)</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">t</span> =</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//超时时间&#123;秒，纳秒&#125;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">now</span> =</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;<span class="comment">//当前时间</span></span><br><span class="line">        <span class="built_in">gettimeofday</span>(&amp;now, <span class="literal">NULL</span>);<span class="comment">//获取当前时间</span></span><br><span class="line"></span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="comment">//1. 队列为空时，阻塞消费线程（日志线程）一定时间</span></span><br><span class="line">        <span class="keyword">if</span>(m_size &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//绝对超时时间：当前时间+超时时间</span></span><br><span class="line">            t.tv_sec = now.tv_sec + ms_timeout / <span class="number">1000</span>;</span><br><span class="line">            t.tv_nsec = (ms_timeout % <span class="number">1000</span>) * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//等待条件变量：阻塞等待一定时间</span></span><br><span class="line">            <span class="keyword">if</span>(!(m_cond.<span class="built_in">timewait</span>(m_mutex.<span class="built_in">get</span>(), t)))&#123;</span><br><span class="line">                m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//阻塞等待失败，返回false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 阻塞一段时间后队列任为空，返回false</span></span><br><span class="line">        <span class="keyword">if</span> (m_size &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 队列不为空或阻塞结束时，从队列中取出日志，取出成功，返回true</span></span><br><span class="line">        m_front = (m_front + <span class="number">1</span>) % m_max_size;<span class="comment">//循环数组实现队列</span></span><br><span class="line">        item = m_array[m_front];</span><br><span class="line">        m_size--;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    locker m_mutex; <span class="comment">//互斥锁：线程安全</span></span><br><span class="line">    cond m_cond;    <span class="comment">//条件变量：实现阻塞队列</span></span><br><span class="line"></span><br><span class="line">    T *m_array;     <span class="comment">//循环数组实现队列</span></span><br><span class="line">    <span class="keyword">int</span> m_size;     <span class="comment">//队列当前容量</span></span><br><span class="line">    <span class="keyword">int</span> m_max_size; <span class="comment">//队列最大容量</span></span><br><span class="line">    <span class="keyword">int</span> m_front;    <span class="comment">//队头</span></span><br><span class="line">    <span class="keyword">int</span> m_back;     <span class="comment">//队尾</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>其中重点关注<code>pop</code>操作，当判断队列满时，在<code>pop()</code>函数中会调用<code>m_cond.wait(m_mutex.get())</code>函数使日志线程阻塞在当前的<code>pop</code>函数中，等待生产者线程往队列中成功<code>push</code>数据从而唤醒消费者线程（生产者添加数据后，通过<code>m_cond.broadcast()</code>唤醒消费者线程）。</p>
<h2 id="四日志读写的基础api">四、日志读写的基础API</h2>
<h3 id="fputs函数">4.1 fputs函数</h3>
<p>fputs函数是C/C++的一个标准库函数，用于将字符串写入到指定的文件流中。对于打开的文件流，fputs函数会将字符串写入到文件流的当前位置，然后将文件流的当前位置后移，以便下次写入。</p>
<p><img src="/2024/03/27/WebServer%E5%AD%A6%E4%B9%A08%EF%BC%9A%E9%80%9A%E7%94%A8%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/fputs_fflush.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, FILE *stream)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>str：要写入的字符串（经过自定义格式化处理的日志信息）</li>
<li>stream：文件流指针（日志文件指针）</li>
</ul>
<h3 id="fflush函数">4.2 fflush函数</h3>
<p>fflush函数是C/C++的一个标准库函数，用于刷新流的缓冲区。对于输出流，fflush函数会将缓冲区的内容立即写入到文件中。</p>
<p>fputs函数写入文件时，会先写入到缓冲区，当缓冲区满了或者调用fflush函数时，才会将缓冲区的内容写入到文件中。所以为了避免日志信息丢失，需要在每次写入日志后调用fflush函数，强制将缓冲区的内容写入到文件中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fflush</span><span class="params">(FILE *stream)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="五日志类实现同步异步">五、日志类实现（同步+异步）</h2>
<h3 id="日志类的初始化">5.1 日志类的初始化</h3>
<p>日志类的初始化可以分为同步初始化和异步初始化，同步和异步的判断由传入的<strong>阻塞队列大小</strong>决定。</p>
<ul>
<li><strong>同步初始化</strong>：阻塞队列大小<strong>为0</strong></li>
<li><strong>异步初始化</strong>：阻塞队列大小<strong>大于0</strong></li>
</ul>
<p>日志初始化的内容为：</p>
<ul>
<li>初始化日志方式（同步/异步），异步初始化需要创建<strong>日志线程</strong>以及<strong>阻塞队列</strong></li>
<li>初始化日志文件路径、日志文件名、日志最大行数、日志缓冲区大小</li>
<li>根据解析的日志文件路径和日志文件名，<strong>创建/打开</strong>日志文件</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据同步和异步的不同初始化日志（异步需要初始化阻塞队列、初始化互斥锁、初始化阻塞队列）</span></span><br><span class="line"><span class="comment">//实现参数初始化、根据当前时间创建or打开日志文件</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Log::init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file_name, <span class="keyword">int</span> close_log, <span class="keyword">int</span> log_buf_size, <span class="keyword">int</span> split_lines, <span class="keyword">int</span> max_queue_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. 如果max_queue_size&gt;0，则表示选择的方式是异步写日志，需要初始化阻塞队列、初始化互斥锁、初始化阻塞队列</span></span><br><span class="line">    <span class="keyword">if</span>(max_queue_size &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">        m_is_async = <span class="literal">true</span>;<span class="comment">//异步</span></span><br><span class="line">        m_log_queue = <span class="keyword">new</span> block_queue&lt;string&gt;(max_queue_size);<span class="comment">//初始化阻塞队列</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//异步写日志需要创建单独的日志线程，回调函数为flush_log_thread实现pop阻塞队列中的日志消息并写入日志文件</span></span><br><span class="line">        <span class="keyword">pthread_t</span> tid;</span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">NULL</span>, flush_log_thread, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 初始化参数，包括缓冲区大小、日志文件行数上限、关闭日志、日志文件名</span></span><br><span class="line">    m_close_log = close_log;</span><br><span class="line">    m_log_buf_size = log_buf_size;</span><br><span class="line">    m_buf = <span class="keyword">new</span> <span class="keyword">char</span>[m_log_buf_size];</span><br><span class="line">    <span class="built_in">memset</span>(m_buf, <span class="string">&#x27;\0&#x27;</span>, m_log_buf_size);</span><br><span class="line">    m_split_lines = split_lines;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 根据当前时间创建or打开日志文件</span></span><br><span class="line">    <span class="comment">//3.1 解析文件路径</span></span><br><span class="line">    <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="keyword">time_t</span> t = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">sys_tm</span> =</span> <span class="built_in">localtime</span>(&amp;t);<span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">my_tm</span> =</span> *sys_tm;</span><br><span class="line">    <span class="comment">//解析路径</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p = <span class="built_in">strrchr</span>(file_name, <span class="string">&#x27;/&#x27;</span>);<span class="comment">//为了判断文件名是否传入了路径</span></span><br><span class="line">    <span class="comment">//格式化解析的  路径_时间_文件名 通过fopen打开或创建文件</span></span><br><span class="line">    <span class="keyword">char</span> log_full_name[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//路径+时间+文件名(存储完整的路径名)</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">//a. 未传入路径，直接将 时间+文件名 拼接</span></span><br><span class="line">        <span class="comment">//eg文件名: ServerLog</span></span><br><span class="line">        <span class="built_in">snprintf</span>(log_full_name, <span class="number">255</span>, <span class="string">&quot;%d_%02d_%02d_%s&quot;</span>, my_tm.tm_year+<span class="number">1900</span>, my_tm.tm_mon+<span class="number">1</span>, my_tm.tm_mday, file_name);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//b. 传入了路径，解析路径，将路径+时间+文件名拼接</span></span><br><span class="line">        <span class="comment">//eg文件名: /MyWebServer/ServerLog</span></span><br><span class="line">        <span class="built_in">strcpy</span>(log_name, p + <span class="number">1</span>);<span class="comment">//p + 1取出文件名</span></span><br><span class="line">        <span class="built_in">strncpy</span>(dir_name, file_name, p - file_name + <span class="number">1</span>);<span class="comment">//将dir路径与文件名包含的路径进行拼接</span></span><br><span class="line">        <span class="built_in">snprintf</span>(log_full_name, <span class="number">255</span>, <span class="string">&quot;%s%d_%02d_%02d_%s&quot;</span>, dir_name, my_tm.tm_year + <span class="number">1900</span>, my_tm.tm_mon + <span class="number">1</span>, my_tm.tm_mday, log_name);</span><br><span class="line">    &#125;</span><br><span class="line">    m_today = my_tm.tm_mday;<span class="comment">//记录当前日期</span></span><br><span class="line">    <span class="comment">//3.2 打开or创建文件</span></span><br><span class="line">    m_fp = <span class="built_in">fopen</span>(log_full_name, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(m_fp == <span class="literal">NULL</span>)&#123;<span class="comment">//打开失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="日志的等级">5.2 日志的等级</h3>
<p>日志的等级分为<strong>INFO</strong>、<strong>DEBUG</strong>、<strong>WARN</strong>、<strong>ERROR</strong>四个等级。</p>
<ul>
<li><strong>INFO</strong>：普通信息，报告系统正常工作的信息，当前执行的流程和收发信息等</li>
<li><strong>DEBUG</strong>：调试信息，报告系统调试信息，用于调试程序，在开发和测试阶段使用</li>
<li><strong>WARN</strong>：警告信息，报告系统警告信息，表明一个可能的问题，不影响程序的正常运行，同样是调试开发时使用</li>
<li><strong>ERROR</strong>和<strong>Fatal</strong>：错误信息，报告系统错误信息，表明一个严重的问题，程序可能无法继续运行</li>
</ul>
<p>日志等级的设置可以通过<strong>宏定义</strong>来实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_DEBUG(format, ...) <span class="meta-keyword">if</span>(0 == m_close_log) &#123;Log::get_instance()-&gt;write_log(0, format, ##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_INFO(format, ...) <span class="meta-keyword">if</span>(0 == m_close_log) &#123;Log::get_instance()-&gt;write_log(1, format, ##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_WARN(format, ...) <span class="meta-keyword">if</span>(0 == m_close_log) &#123;Log::get_instance()-&gt;write_log(2, format, ##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_ERROR(format, ...) <span class="meta-keyword">if</span>(0 == m_close_log) &#123;Log::get_instance()-&gt;write_log(3, format, ##__VA_ARGS__); Log::get_instance()-&gt;flush();&#125;</span></span><br></pre></td></tr></table></figure>
<p>在生产者通过宏定义调用日志写入函数时，需要传入<strong>日志等级</strong>、<strong>日志内容format</strong>、<strong>可变参数</strong>。调用宏定义日志函数后，依此执行<code>write_log</code>函数实现写入（同步直接<code>fputs</code>写入，异步<code>push</code>进阻塞队列）和<code>flush</code>函数。</p>
<p>其中<strong>日志内容format</strong>和<strong>可变参数</strong>使用<code>vsnprintf</code>函数实现格式化解析输出</p>
<h3 id="日志的写入write_log函数">5.3 日志的写入write_log函数</h3>
<p>日志类中通过<code>write_log</code>函数实现对生产者传入的<strong>日志等级、日志内容</strong>进行格式化解析和封装。</p>
<h4 id="可变参数的格式化解析vsnprintf函数">5.3.1
可变参数的格式化解析<code>vsnprintf</code>函数</h4>
<p>c++中的可变参数格式化解析可以使用<code>vsnprintf</code>函数实现</p>
<p><code>vsnprintf</code>函数原型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsnprintf</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">size_t</span> size, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_list ap)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>str：存储格式化后的字符串（日志主体内容）</li>
<li>size：存储格式化后的字符串的大小（手动分配的）</li>
<li>format：格式化字符串（日志内容），类似printf函数的格式化字符串</li>
<li>ap：可变参数列表</li>
</ul>
<p>如<code>LOG_INFO("%s%d", "listen the port ", m_port);</code>中的<code>"%s%d"</code>代表<code>format</code>，<code>"listen the port "</code>和<code>m_port</code>是可变参数</p>
<h4 id="日志内容格式化输出">5.3.2 日志内容格式化输出</h4>
<p>本项目中的日志按照<strong>日期 时间 日志等级
日志内容</strong>的格式输出，同时日志文件具有<strong>行数限制</strong>和<strong>按天分文件</strong>的特性。因此在写入日志前：</p>
<ul>
<li>需要判断<strong>当前日期是否改变</strong>
<ul>
<li>如果日期改变，需要关闭当前日志文件，重新根据当前日期创建新的日志文件</li>
</ul></li>
<li>需要判断<strong>当前日志行数是否达到上限</strong>
<ul>
<li>如果日志行数达到上限，需要关闭当前日志文件，在<strong>当前日期的文件名基础上加上行数后缀，重新创建新的日志文件</strong></li>
</ul></li>
</ul>
<p>完成格式化内容处理后，再根据<strong>同步/异步</strong>的不同，进行日志内容的写入操作。从这里也可以看出，<strong>异步日志</strong>中，添加到<strong>阻塞队列</strong>中的日志内容是<strong>格式化后的字符串</strong>，所以在日志线程中取出后直接调用<code>fputs()</code>写入到日志文件中即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//write_log由define宏定义的宏函数自动调用的</span></span><br><span class="line"><span class="comment">//生产者向阻塞队列中写入日志消息，解析日志消息类型，并将缓冲区强制刷新到日志文件</span></span><br><span class="line"><span class="comment">//传入可变参数列表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Log::write_log</span><span class="params">(<span class="keyword">int</span> level, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//解析选择的日志级别（level）</span></span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存储日志级别</span></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (level)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">strcpy</span>(s, <span class="string">&quot;[debug]:&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">strcpy</span>(s, <span class="string">&quot;[info]:&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">strcpy</span>(s, <span class="string">&quot;[warn]:&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">strcpy</span>(s, <span class="string">&quot;[erro]:&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">strcpy</span>(s, <span class="string">&quot;[info]:&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前时间，用于判断是否到第二天了，需要创建新的日志文件</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">now</span> =</span> &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">gettimeofday</span>(&amp;now, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">time_t</span> t = now.tv_sec;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">sys_tm</span> =</span> <span class="built_in">localtime</span>(&amp;t);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">my_tm</span> =</span> *sys_tm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 写入日志前的处理：更新日志文件名</span></span><br><span class="line">    <span class="comment">//1.1 判断当前行数是否达到最大行数，或者是否到了第二天</span></span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    m_count++;<span class="comment">//行数+1</span></span><br><span class="line">    <span class="keyword">if</span> (m_today != my_tm.tm_mday || m_count % m_split_lines == <span class="number">0</span>) <span class="comment">//everyday log</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> new_log[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">fflush</span>(m_fp);<span class="comment">//先强制将缓冲区的内容写入文件，避免日志丢失</span></span><br><span class="line">        <span class="built_in">fclose</span>(m_fp);</span><br><span class="line">        <span class="keyword">char</span> tail[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//时间戳</span></span><br><span class="line">       </span><br><span class="line">        <span class="built_in">snprintf</span>(tail, <span class="number">16</span>, <span class="string">&quot;%d_%02d_%02d_&quot;</span>, my_tm.tm_year + <span class="number">1900</span>, my_tm.tm_mon + <span class="number">1</span>, my_tm.tm_mday);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//a. 到第二天了，需要创建新的日志文件</span></span><br><span class="line">        <span class="keyword">if</span> (m_today != my_tm.tm_mday)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">snprintf</span>(new_log, <span class="number">255</span>, <span class="string">&quot;%s%s%s&quot;</span>, dir_name, tail, log_name);</span><br><span class="line">            m_today = my_tm.tm_mday;</span><br><span class="line">            m_count = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//b. 行数达到最大行数，需要创建新的日志文件</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">snprintf</span>(new_log, <span class="number">255</span>, <span class="string">&quot;%s%s%s.%lld&quot;</span>, dir_name, tail, log_name, m_count / m_split_lines);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建打开新的日志文件</span></span><br><span class="line">        m_fp = <span class="built_in">fopen</span>(new_log, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 解析日志消息内容</span></span><br><span class="line">    <span class="comment">//2.1 格式化解析可变参数列表</span></span><br><span class="line">    va_list valst;</span><br><span class="line">    <span class="built_in">va_start</span>(valst, format);</span><br><span class="line"></span><br><span class="line">    string log_str;</span><br><span class="line">    m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">    <span class="comment">//写入的具体时间内容格式</span></span><br><span class="line">    <span class="comment">//eg: 2024-03-11 17:46:21.755040 [info]:</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">snprintf</span>(m_buf, <span class="number">48</span>, <span class="string">&quot;%d-%02d-%02d %02d:%02d:%02d.%06ld %s &quot;</span>,</span><br><span class="line">                     my_tm.tm_year + <span class="number">1900</span>, my_tm.tm_mon + <span class="number">1</span>, my_tm.tm_mday,</span><br><span class="line">                     my_tm.tm_hour, my_tm.tm_min, my_tm.tm_sec, now.tv_usec, s);</span><br><span class="line">    <span class="comment">//写入的具体内容：可变参数列表的内容</span></span><br><span class="line">    <span class="comment">//eg: 2024-03-11 17:46:21.755040 [info]: hello world</span></span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">vsnprintf</span>(m_buf + n, m_log_buf_size - n - <span class="number">1</span>, format, valst);</span><br><span class="line">    m_buf[n + m] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    m_buf[n + m + <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    log_str = m_buf;</span><br><span class="line"></span><br><span class="line">    m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 将日志消息写入阻塞队列（异步）or直接写入日志文件（同步）</span></span><br><span class="line">    <span class="keyword">if</span> (m_is_async &amp;&amp; !m_log_queue-&gt;<span class="built_in">full</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//异步写日志，将日志消息写入阻塞队列</span></span><br><span class="line">        m_log_queue-&gt;<span class="built_in">push</span>(log_str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//同步写日志，直接将日志消息写入文件</span></span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="built_in">fputs</span>(log_str.<span class="built_in">c_str</span>(), m_fp);</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">va_end</span>(valst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="日志的刷新flush函数">5.4 日志的刷新flush函数</h3>
<p>日志类中通过<code>flush</code>函数实现对日志文件的刷新操作，即将缓冲区的内容强制写入到文件中。保证有新的日志到达后，先将当前缓冲区的内容写入到文件中，避免日志丢失。</p>
<h3 id="异步日志中线程的实现">5.5 异步日志中线程的实现</h3>
<p>异步日志在初始化时创建了一个<strong>日志线程</strong>，该线程的工作函数是<code>flush_log_thread</code>，主要负责从阻塞队列中取出日志消息并写入到日志文件中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异步写日志需要创建单独的日志线程，回调函数为flush_log_thread实现pop阻塞队列中的日志消息并写入日志文件</span></span><br><span class="line"><span class="keyword">pthread_t</span> tid;</span><br><span class="line"><span class="built_in">pthread_create</span>(&amp;tid, <span class="literal">NULL</span>, flush_log_thread, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>
<p><strong>关于<code>flush_log_thread</code>函数的实现</strong></p>
<p>异步日志的工作线程函数<code>flush_log_thread</code>是一个静态函数，会调用日志类的<code>async_write_log</code>函数，实现从阻塞队列中取出日志消息并写入到日志文件中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异步方式中 日志线程的工作函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">flush_log_thread</span><span class="params">(<span class="keyword">void</span> *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Log::<span class="built_in">get_instance</span>()-&gt;<span class="built_in">async_write_log</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>关于<code>async_write_log</code>函数的实现</strong></p>
<p>异步日志的工作线程函数中，<code>async_write_log</code>会不断地从阻塞队列中取出日志消息并写入到日志文件中。根据前面实现的<strong>阻塞队列</strong>的特性，如果队列为空，那么日志线程会阻塞在<code>pop</code>操作中</p>
<p>所以日志工作线程的<code>while</code>循环执行<code>pop</code>操作时，如果队列为空，会一直阻塞在<code>while</code>语句中，直到队列中生产者添加新的日志消息，唤醒日志线程，继续<code>pop</code>操作，并进入<code>while</code>循环里面的执行语句中</p>
<p>此时获得的日志字符串已经是格式化过的了（阻塞队列中的消息全是格式化后再由生产者<code>push</code>进去的），所以直接调用<code>fputs</code>函数写入到日志文件中即可。</p>
<p>当阻塞队列中的日志消息全部写入到日志文件中后，日志线程会继续阻塞在<code>pop</code>操作中，等待生产者线程继续往队列中<code>push</code>新的日志消息。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异步日志写入(从阻塞队列中取出日志消息并写入日志文件)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">async_write_log</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string single_log;<span class="comment">//存储从pop中取出的单条日志</span></span><br><span class="line">    <span class="keyword">while</span> (m_log_queue-&gt;<span class="built_in">pop</span>(single_log))&#123;</span><br><span class="line">        <span class="comment">//结束消费者阻塞后，将日志写入文件缓冲区（还需要配合fflush将缓冲区内容写入文件）</span></span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="built_in">fputs</span>(single_log.<span class="built_in">c_str</span>(), m_fp);</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="六总结">六、总结</h2>
<p>至此我们已经完成了一个通用的日志系统的设计和实现，包含了<strong>同步日志</strong>和<strong>异步日志</strong>两种方式。相当于造了个轮子，以后可以直接拿来使用。</p>
<p>本文关键的知识点为<strong>线程安全</strong>、<strong>生产者-消费者模型</strong>、<strong>单例模式</strong>、<strong>阻塞队列</strong>、<strong>日志格式化解析和封装</strong>等。</p>
<p>到目前为止，WebServer的功能基本实现了，通过<code>Makefile</code>文件执行<code>make</code>命令编译生成可执行文件<code>server</code>，通过<code>./server</code>命令运行服务器，即可在浏览器中访问<code>http://localhost:9006</code>查看效果。同时完整项目在<a href="https://github.com/AkiraZheng/MyWebServer">GitHub</a>上。</p>
<p>在WebServer项目的实现中，我们最后还需要通过Web性能压测工具<code>WebBench</code>对服务器进行压力测试，以验证服务器的性能和稳定性。具体压测的内容和结果可以参考本人的另一篇博客：<a href="https://akirazheng.github.io/2024/03/27/WebServer%E5%AD%A6%E4%B9%A09%EF%BC%9AWebBench%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/">WebServer项目实战9：WebBench压力测试</a>。</p>
]]></content>
      <categories>
        <category>WebServer项目（C++）</category>
      </categories>
  </entry>
  <entry>
    <title>WebServer学习6：HTTP连接处理及报文机制</title>
    <url>/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="一从http用户类在主线程epoll监听中的初始化说起">一、从HTTP用户类在主线程epoll监听中的初始化说起</h2>
<h3 id="webserver.cpp文件中的http用户初始化">1.1
<code>WebServer.cpp</code>文件中的HTTP用户初始化</h3>
<p>回到<code>WebServer.cpp</code>类中的<code>eventLoop</code>函数，我们可以看到在<code>epoll</code>监听的主线程中，当处理<strong>新的客户端连接事件</strong>时，会在处理新连接的<code>dealclientdata</code>函数中，通过<code>timer</code>函数同时<strong>初始化一个http
user</strong>和一个定时器。</p>
<h3 id="http_conn.cpp文件中的http用户初始化函数的实现">1.2
<code>http_conn.cpp</code>文件中的HTTP用户初始化函数的实现</h3>
<p>在<code>http_conn.cpp</code>文件中对新用户连接的初始化</p>
<ul>
<li>包括类中一些如数据库信息、数据读取模式等变量、以及一些HTTP处理中间变量的初始化</li>
<li>同时还包括对主函数中的<code>epoll</code>监听该客户端<code>socketfd的初始化</code></li>
</ul>
<h4 id="对http_conn类中的变量初始化">对http_conn类中的变量初始化</h4>
<p>这里的初始化包括传参的<code>init</code>函数和无参重载的<code>init</code>函数，其中传参的<code>init</code>函数主要是对客户端连接信息的初始化，而无参重载的<code>init</code>函数主要是对类中功能实现的一些中间变量的初始化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化客户端连接中http_conn的一些用户状态参数，这个函数是在主线程（epoll）中收到用户的连接处理accept时调用的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_conn::init</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> sockaddr_in &amp;addr, <span class="keyword">char</span> *root, <span class="keyword">int</span> TRIGMode,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="keyword">int</span> close_log, string user, string passwd, string sqlname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_sockfd = sockfd;</span><br><span class="line">    m_address = addr;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">addfd</span>(m_epollfd, sockfd, <span class="literal">true</span>, m_TRIGMode);<span class="comment">//将sockfd注册到epoll中</span></span><br><span class="line">    m_user_count++;<span class="comment">//客户端连接数+1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//当浏览器出现连接重置时，可能是网站根目录出错或http响应格式出错或者访问的文件中内容完全为空</span></span><br><span class="line">    doc_root = root;</span><br><span class="line">    m_TRIGMode = TRTGMide;</span><br><span class="line">    m_close_log = close_log;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据库的用户名、密码、数据库名</span></span><br><span class="line">    <span class="built_in">strcpy</span>(sql_user, user.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcpy</span>(sql_passwd, passwd.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="built_in">strcpy</span>(sql_name, sqlname.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化http_conn类中剩下的一些参数为默认值</span></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化http_conn类中剩下的一些参数为默认值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_conn::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mysql = <span class="literal">NULL</span>;</span><br><span class="line">    bytes_to_send = <span class="number">0</span>;</span><br><span class="line">    bytes_have_send = <span class="number">0</span>;</span><br><span class="line">    m_check_state = CHECK_STATE_REQUESTLINE;<span class="comment">//根据报文的结构，主状态机初始状态应该是解析请求行，也就是CHECK_STATE_REQUESTLINE</span></span><br><span class="line">    m_linger = <span class="literal">false</span>;</span><br><span class="line">    m_method = GET;</span><br><span class="line">    m_url = <span class="number">0</span>;</span><br><span class="line">    m_version = <span class="number">0</span>;</span><br><span class="line">    m_content_length = <span class="number">0</span>;</span><br><span class="line">    m_host = <span class="number">0</span>;</span><br><span class="line">    m_start_line = <span class="number">0</span>;</span><br><span class="line">    m_checked_idx = <span class="number">0</span>;</span><br><span class="line">    m_read_idx = <span class="number">0</span>;</span><br><span class="line">    m_write_idx = <span class="number">0</span>;</span><br><span class="line">    cgi = <span class="number">0</span>;</span><br><span class="line">    m_state = <span class="number">0</span>;</span><br><span class="line">    timer_flag = <span class="number">0</span>;</span><br><span class="line">    improv = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化清空缓冲区</span></span><br><span class="line">    <span class="built_in">memset</span>(m_read_buf, <span class="string">&#x27;\0&#x27;</span>, READ_BUFFER_SIZE);</span><br><span class="line">    <span class="built_in">memset</span>(m_write_buf, <span class="string">&#x27;\0&#x27;</span>, WRITE_BUFFER_SIZE);</span><br><span class="line">    <span class="built_in">memset</span>(m_real_file, <span class="string">&#x27;\0&#x27;</span>, FILENAME_LEN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="对主函数中的epoll监听该客户端socketfd的初始化">对主函数中的<code>epoll</code>监听该客户端<code>socketfd的初始化</code></h4>
<p>我们看到传参的<code>init</code>函数还执行了<code>addfd</code>函数，这个函数就是处理主线程中<code>epoll</code>监听的<code>socketfd</code>的初始化</p>
<p>这里涉及的几个epoll相关函数其实跟之前在<code>timer</code>类中的几个相关函数是<strong>一样的代码</strong>，只是为了区分epoll中对serverfd的初始化监听和对clientfd的初始化监听，所以这里将这几个函数又单独封装在了<code>http_conn</code>类中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册事件到epool中进行监听，这里其实跟util.cpp中的addfd实现是一样的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addfd</span><span class="params">(<span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd, <span class="keyword">bool</span> one_shot, <span class="keyword">int</span> TRIGMode)</span></span>&#123;</span><br><span class="line">    <span class="comment">//注册fd及其相关的events事件到epoll中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建事件:注册fd文件描述符</span></span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给fd注册对应的epoll监听事件</span></span><br><span class="line">    <span class="keyword">if</span>(TRIGMode == <span class="number">1</span>)</span><br><span class="line">        <span class="comment">//注册ET模式</span></span><br><span class="line">        event.events = EPOLLIN | EPOLLET | EPOLLRDHUP;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//注册LT模式</span></span><br><span class="line">        event.events = EPOLLIN | EPOLLRDHUP;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册EPOLLONESHOT事件:设置fd是否只加内特一次</span></span><br><span class="line">    <span class="keyword">if</span>(one_shot)</span><br><span class="line">        event.events |= EPOLLONESHOT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册fd到epoll中:epoll_ctl函数增fd</span></span><br><span class="line">    <span class="built_in">epoll_ctl</span>(epollfd, EPOLL_CTL_ADD, fd, &amp;event);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置fd为非阻塞(ET模式下必须设置非阻塞,包括listenfd和connfd)</span></span><br><span class="line">    <span class="built_in">setnonblocking</span>(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置客户端socketfd为非阻塞，这里也跟util.cpp中的setnonblocking实现是一样的</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setnonblocking</span><span class="params">(<span class="keyword">int</span> fd)</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用 fcntl 函数来设置文件描述符的属性</span></span><br><span class="line">    <span class="keyword">int</span> old_option = <span class="built_in">fcntl</span>(fd, F_GETFL);</span><br><span class="line">    <span class="keyword">int</span> new_option = old_option | O_NONBLOCK;</span><br><span class="line">    <span class="built_in">fcntl</span>(fd, F_SETFL, new_option);</span><br><span class="line">    <span class="keyword">return</span> old_option;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二通过reactor和proactor两种事件处理模式理解http的读事件处理">二、通过Reactor和Proactor两种事件处理模式理解HTTP的读事件处理</h2>
<h3 id="read_once函数处理socketfd的读事件">1.
read_once()函数处理socketfd的读事件</h3>
<p>根据上一节的学习，我们已经知道，Reactor模式会在<strong>工作线程</strong><code>worker</code>中取出任务并执行<code>read_once()</code></p>
<p>而Proactor模式会在<strong>主线程</strong><code>epoll</code>监听到客户端socketfd读事件后，直接在主线程执行<code>read_once()</code></p>
<p>那么这个<code>read_once()</code>函数到底为何方神圣？</p>
<p><code>read_once()</code>函数封装在<code>http_conn</code>类中，实现了epoll两种触发模式的读事件。</p>
<p><strong>LT模式</strong></p>
<p>LT模式下不需要一次性读取完，会分多次读取，所以每次读的时候用<code>if</code>执行就行，不需要循环执行recv函数</p>
<p><strong>ET模式</strong></p>
<p>ET模式下需要一次性读取完，所以需要<code>while</code>执行recv函数，直到读完为止</p>
<p>最终读取的数据都会存放在当前用户实例化http_conn类的<code>m_read_buf</code>中，然后用<code>m_read_idx</code>变量标记读取的数据的长度（m_read_idx个bytes）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// epoll监测到客户端sockfd有读事件时，调用read_once循环读取数据到buffer中，直到无数据可读或者对方关闭连接</span></span><br><span class="line"><span class="comment">// 在reactor模式下，该函数是在工作线程中调用的，在proactor模式下，该函数是在主线程中调用的</span></span><br><span class="line"><span class="comment">// 非阻塞ET工作模式下，需要一次性将数据读完</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::read_once</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_read_idx &gt;= READ_BUFFER_SIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bytes_read = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据读到m_read_buf + m_read_idx位置开始的内存中（存在读缓冲区m_read_buf中）</span></span><br><span class="line">    <span class="comment">//LT方式读取数据：epoll_wait会多次通知读数据，直到读完，所以这里不用while循环</span></span><br><span class="line">    <span class="keyword">if</span>(m_TRIGMode == <span class="number">0</span>)&#123;</span><br><span class="line">        bytes_read = <span class="built_in">recv</span>(m_sockfd, m_read_buf + m_read_idx, READ_BUFFER_SIZE - m_read_idx, <span class="number">0</span>);<span class="comment">//bytes_read代表收到的字节数,char型的buff一位也代表一个字节</span></span><br><span class="line">        m_read_idx += bytes_read;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(bytes_read &lt;= <span class="number">0</span>)&#123;<span class="comment">//读取失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ET方式读取数据：epoll_wait只通知一次读数据，所以这里要用while循环读完</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            bytes_read = <span class="built_in">recv</span>(m_sockfd, m_read_buf + m_read_idx, READ_BUFFER_SIZE - m_read_idx, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(bytes_read == <span class="number">-1</span>)&#123;<span class="comment">//接收失败</span></span><br><span class="line">                <span class="keyword">if</span>(errno == EAGAIN || errno == EWOULDBLOCK)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//接收结束</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(bytes_read == <span class="number">0</span>)&#123;<span class="comment">//对方关闭连接</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            m_read_idx += bytes_read;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//ET读完所有数据返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="process函数进行报文解析和处理">2.
process()函数进行报文解析和处理</h3>
<p><code>process()</code>函数同样封装在<code>http_conn</code>类中</p>
<p>无论是Reactor模式还是Proactor模式，<code>process()</code>函数都是在工作线程中执行的，它的作用是对<code>read_once()</code>函数读取到的报文进行解析和处理。</p>
<p>Reactor模式下是<strong>工作线程</strong>中取出任务并执行socket读操作（<code>read_once()</code>）后再执行<code>process()</code>函数进行报文解析和处理。</p>
<p>而Proactor模式下<strong>工作线程</strong>直接执行<code>process()</code>函数进行报文解析和处理。（因为主线程已经完成了<code>read_once()</code>的操作）</p>
<ul>
<li><code>process()</code>函数主要先处理客户端的<strong>请求报文</strong>，如果请求报文还没有读完，那么就继续将clientfd注册为<strong>可读事件</strong>，等待下一次读取。</li>
<li>成功解析处理完请求报文后，根据请求报文打包<strong>响应报文</strong>，然后将clientfd注册为<strong>可写事件</strong>，等待下一次写入。</li>
</ul>
<p>所以<code>process()</code>函数除了涉及报文的处理外，还需要涉及到<strong>epoll</strong>的<strong>重置事件监听模式</strong>和<strong>删除描述符</strong>操作。</p>
<ul>
<li><code>process()</code>函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进行报文解析处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_conn::process</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//解析请求报文</span></span><br><span class="line">    HTTP_CODE read_ret = <span class="built_in">process_read</span>();<span class="comment">//http客户端刚进来肯定是先读取解析请求报文</span></span><br><span class="line">    <span class="keyword">if</span> (read_ret == NO_REQUEST)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modfd</span>(m_epollfd, m_sockfd, EPOLLIN, m_TRIGMode);<span class="comment">//NO_REQUEST是数据没读完，还需要继续读取，重新注册读事件（EPOLLIN）</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成响应报文</span></span><br><span class="line">    <span class="keyword">bool</span> write_ret = <span class="built_in">process_write</span>(read_ret);</span><br><span class="line">    <span class="keyword">if</span> (!write_ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">close_conn</span>();<span class="comment">//报文生成失败，关闭连接</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">modfd</span>(m_epollfd, m_sockfd, EPOLLOUT, m_TRIGMode);<span class="comment">//报文生成成功，注册写事件（EPOLLOUT），发送响应报文</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>epoll</code>重置事件监听模式和删除描述符与关闭客户端连接操作</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将事件重置为EPOLLONESHOT（ONESHOT模式只监听一次事件就会从epoll中删除）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modfd</span><span class="params">(<span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd, <span class="keyword">int</span> ev, <span class="keyword">int</span> TRIGMode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == TRIGMode)</span><br><span class="line">        event.events = ev | EPOLLET | EPOLLONESHOT | EPOLLRDHUP;<span class="comment">//ET模式下，EPOLLONESHOT是必须的</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        event.events = ev | EPOLLONESHOT | EPOLLRDHUP;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">epoll_ctl</span>(epollfd, EPOLL_CTL_MOD, fd, &amp;event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从epoll中删除fd（一般是close_conn中把对应的socketfd从epoll中删除）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removefd</span><span class="params">(<span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd)</span></span>&#123;</span><br><span class="line">    <span class="built_in">epoll_ctl</span>(epollfd, EPOLL_CTL_DEL, fd, <span class="number">0</span>);<span class="comment">//关闭socket前先从epoll中移除</span></span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> http_conn::m_user_count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> http_conn::m_epollfd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_conn::close_conn</span><span class="params">(<span class="keyword">bool</span> real_close)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(real_close &amp;&amp; (m_sockfd != <span class="number">-1</span>))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;close %d\n&quot;</span>, m_sockfd);</span><br><span class="line">        <span class="built_in">removefd</span>(m_epollfd, m_sockfd);</span><br><span class="line">        m_sockfd = <span class="number">-1</span>;</span><br><span class="line">        m_user_count--;<span class="comment">//关闭一个连接，将客户总量减一</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三http报文的主从状态机解析模式">三、HTTP报文的主从状态机解析模式</h2>
<h3 id="主从状态机模式">3.1 主从状态机模式</h3>
<p><strong>从状态机</strong>主要是将<code>read_once</code>读取到的数据通过识别到的<code>\r\n</code>结束符进行分割，取出一行数据交给<strong>主状态机</strong>进行处理。</p>
<p>状态机的实现过程如下图所示：</p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/State_machine.png"></p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/State_machine2.png"></p>
<ul>
<li><strong>从状态机</strong>有三种状态表示读取一行的状态
<ul>
<li><code>LINE_OK</code>：读取到一个完整的行</li>
<li><code>LINE_BAD</code>：行读取出错（缺少<code>\r</code>或<code>\n</code>）</li>
<li><code>LINE_OPEN</code>：行数据尚且不完整，如LT模式下还需要继续不断读取</li>
</ul></li>
<li><strong>主状态机</strong>有三种状态表示解析报文的状态
<ul>
<li><code>CHECK_STATE_REQUESTLINE</code>：解析请求行（<code>init</code>初始化一个客户user时就会默认初始化为这个状态）</li>
<li><code>CHECK_STATE_HEADER</code>：解析头部字段</li>
<li><code>CHECK_STATE_CONTENT</code>：解析请求内容（POST有消息体，GET无）</li>
</ul></li>
</ul>
<h3 id="http报文格式">3.2 HTTP报文格式</h3>
<p>HTTP报文格式中的<strong>请求行、请求头、请求数据（消息主体）</strong>分别对应了<strong>主状态机</strong>中的<strong>三种解析状态</strong>。</p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/HTTP_Frame.png"></p>
<h3 id="从状态机的实现逻辑">3.3 从状态机的实现逻辑</h3>
<p>从状态机的实现逻辑主要是通过<code>http_conn</code>类中的<code>parse_line</code>函数实现的，这个函数的作用是通过识别到的<code>\r\n</code>作为一行数据的结束符进行分割，取出一行数据交给<strong>主状态机</strong>进行处理。</p>
<p>多一个<code>LINE_OPEN</code>状态是因为在LT模式下，需要不断读取数据，直到读取到一个完整的行。（也就是当前处理的buffer有可能不是完整的，需要持续解析）</p>
<p>具体实现逻辑细节可以看代码注释</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从状态机，用于一行一行解析出客户端发送请求的报文，并将解读行的状态作为返回值</span></span><br><span class="line"><span class="comment">//主状态机负责对该行数据进行解析，主状态机内部调用从状态机，从状态机驱动主状态机。</span></span><br><span class="line"><span class="comment">//注意，由于报文中的content没有固定的行结束标志，所以content的解析不在从状态机中进行，而是在主状态机中进行</span></span><br><span class="line"><span class="comment">//状态1：LINE_OK表示读完了完整的一行（读到了行结束符\r\n）</span></span><br><span class="line"><span class="comment">//状态2：LINE_BAD表示读取的行格式有误（结束符只读到了\r或\n，而不是\r + \n）</span></span><br><span class="line"><span class="comment">//状态3：LINE_OPEN表示LT模式下还没接收完完整的buffer，还需等待继续recv到buffer后再次触发解析数据包</span></span><br><span class="line"><span class="function">http_conn::LINE_STATUS <span class="title">http_conn::parse_line</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="comment">//循环当前buffer中已读取到的数据</span></span><br><span class="line">    <span class="comment">//如果是ET模式，则客户端发送的数据包是已经全部读完了的，buffer是完整的</span></span><br><span class="line">    <span class="comment">//如果是LT模式，则客户端发送的数据包是分批次读取的，buffer是不完整的，所以需要LINE_OPEN状态来等待下一次读取</span></span><br><span class="line">    <span class="keyword">for</span>(;m_checked_idx &lt; m_read_idx; ++m_checked_idx)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*m_checked_idx:    当前已确认（取出）的字符位置</span></span><br><span class="line"><span class="comment">          temp:             当前读取到的m_checked_idx处的字符</span></span><br><span class="line"><span class="comment">          m_read_idx:       读缓冲区中的数据长度（已经接收的socket的数据总长度）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        temp = m_read_buf[m_checked_idx];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 读到一个完整行的倒数第二个字符\r</span></span><br><span class="line">        <span class="keyword">if</span>(temp == <span class="string">&#x27;\r&#x27;</span>)&#123;</span><br><span class="line">            <span class="comment">//如果已经把buffer中已经接收的数据读完了，但是此时buffer中的数据还不完整，那么就返回LINE_OPEN状态，等待下一次读取</span></span><br><span class="line">            <span class="keyword">if</span>((m_checked_idx + <span class="number">1</span>) == m_read_idx)&#123;<span class="comment">//m_read_idx是个数，所以这里index得+1</span></span><br><span class="line">                <span class="keyword">return</span> LINE_OPEN;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果读到了完整的行，也几乎是判断出了下一个字符为&#x27;\n&#x27;就返回LINE_OK</span></span><br><span class="line">            <span class="comment">//LINE_OK状态在主状态机中是可以进行行解析的状态</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(m_read_buf[m_checked_idx + <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">                m_read_buf[m_checked_idx++] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//&#x27;\r&#x27;换成&#x27;\0&#x27;</span></span><br><span class="line">                m_read_buf[m_checked_idx++] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//&#x27;\n&#x27;换成&#x27;\0&#x27;，m_checked_idx更新为下一行的起始位置</span></span><br><span class="line">                <span class="keyword">return</span> LINE_OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果读到的行格式有误，即buffer明明还没结束，但是读不到&#x27;\n&#x27;了，则返回LINE_BAD状态</span></span><br><span class="line">            <span class="keyword">return</span> LINE_BAD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 读到一个完整行的最后一个字符\n</span></span><br><span class="line">        <span class="comment">//情况1：正常来说对于完整的数据而言，&#x27;\n&#x27;应该已经被上面的if语句处理了，但是还存在第一种情况是LT下数据是还没读完整的</span></span><br><span class="line">        <span class="comment">//      也就是对于上面的if中，已经读到了m_read_idx了，返回LINE_OPEN，等接着继续读到socket数据再触发当前函数时，就会从&#x27;\n&#x27;开始判断</span></span><br><span class="line">        <span class="comment">//情况2：当前数据是坏数据，没有配套的&#x27;\r&#x27;+ &#x27;\n&#x27;，所以返回LINE_BAD</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m_checked_idx &gt; <span class="number">1</span> &amp;&amp; m_read_buf[m_checked_idx - <span class="number">1</span>] == <span class="string">&#x27;\r&#x27;</span>)&#123;</span><br><span class="line">                m_read_buf[m_checked_idx - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//&#x27;\r&#x27;换成&#x27;\0&#x27;</span></span><br><span class="line">                m_read_buf[m_checked_idx++] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//&#x27;\n&#x27;换成&#x27;\0&#x27;，m_checked_idx更新为下一行的起始位置</span></span><br><span class="line">                <span class="keyword">return</span> LINE_OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果上一个字符不是&#x27;\r&#x27;，则说明数据包格式有误，返回LINE_BAD</span></span><br><span class="line">            <span class="keyword">return</span> LINE_BAD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> LINE_OPEN;<span class="comment">//读完了buffer中的数据，但是数据包可能还没读完，需要等待下一次读取</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="主状态机的实现逻辑">3.4 主状态机的实现逻辑</h3>
<p>主状态机的实现逻辑主要是通过<code>http_conn</code>类中的<code>process_read</code>函数实现的，这个函数的作用是对<code>parse_line</code>函数读取到的一行数据进行下一步处理，处理是根据<strong>从状态机的读取状态</strong>配合<strong>主状态机的解析状态</strong>进行的。</p>
<p>其中如果是单纯的GET请求，那么只需要解析请求行和请求头，而不需要解析请求内容，我们使用从状态机的<code>((line_status = parse_line()) == LINE_OK)</code>进行判断就行，每读完完整一行就主状态机进行一次解析（请求行or请求头）。</p>
<p>但是为了保证客户用户名和密码的安全，我们还需要对POST请求的请求内容进行解析，这时候我们就需要使用主状态机的<code>m_check_state == CHECK_STATE_CONTENT</code>进行判断，这个状态是在解析请求头的时候就已经确定了的。当主状态机状态转为<code>CHECK_STATE_CONTENT</code>时，此时就不需要再进入从状态机的<code>parse_line</code>函数进行读取了，因为消息体没有固定的行结束标志(<code>\r\n</code>)，所以我们直接在主状态机中进行解析，根据<code>m_read_idx</code>读完剩下的数据就行。</p>
<p>同时为了主状态机处理完完整的HTTP报文后能退出<code>while</code>循环，我们在解析完content后将<code>line_status</code>重置为<code>LINE_OPEN</code>代表结束。（这里由于进入content解析状态前，<code>line_status</code>还会保持上一个状态的<code>LINE_OK</code>，所以不会影响主状态机进入content的解析）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主状态机，用于处理解析读取到的报文</span></span><br><span class="line"><span class="comment">//状态1：CHECK_STATE_REQUESTLINE（进行请求行的解析--从状态机中获取数据位置）</span></span><br><span class="line"><span class="comment">//状态2：CHECK_STATE_HEADER（进行请求头的解析--从状态机中获取数据位置）</span></span><br><span class="line"><span class="comment">//状态3：CHECK_STATE_CONTENT（进行请求内容的解析--主状态机中读取buffer剩下的所有数据）</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::process_read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LINE_STATUS line_status = LINE_OK;  <span class="comment">//初始化当前从状态机的行处理状态</span></span><br><span class="line">    HTTP_CODE ret = NO_REQUEST;         <span class="comment">//初始化当前HTTP请求的处理结果</span></span><br><span class="line">    <span class="keyword">char</span> *text = <span class="number">0</span>;                     <span class="comment">//存储主状态机当前正在解析的行数据（字符串）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//主状态机解析状态通过从状态机来驱动：LINE_OK说明主状态机可以开始解析了</span></span><br><span class="line">    <span class="comment">//1. 如果是GET请求，那么其实只需要parse_line()函数就能保证解析完整个请求报文</span></span><br><span class="line">    <span class="comment">//2. 但是由于POST请求的content没有固定的行结束标志，所以content的解析不在从状态机中进行，而是在主状态机中进行</span></span><br><span class="line">    <span class="comment">//   当主状态机由CHECK_STATE_HEADER转移到CHECK_STATE_CONTENT时，我们将主状态机继续循环的判断改为m_check_state == CHECK_STATE_CONTENT，表示content部分不进入从状态机解析</span></span><br><span class="line">    <span class="comment">//   同时为了保证解析完content后能退出循环，我们在解析完content后将line_status = LINE_OPEN</span></span><br><span class="line">    <span class="comment">//   这里由于进入content解析状态前，line_status还会保持上一个状态的LINE_OK，所以不会影响主状态机进入content的解析</span></span><br><span class="line">    <span class="keyword">while</span>((m_check_state == CHECK_STATE_CONTENT &amp;&amp; line_status == LINE_OK) || ((line_status = <span class="built_in">parse_line</span>()) == LINE_OK))&#123;</span><br><span class="line">        text = <span class="built_in">get_line</span>();</span><br><span class="line">        m_start_line = m_checked_idx;<span class="comment">//更新为下一行的起始位置，方便下次调用get_line获取当前行的字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// LOG_INFO(&quot;%s&quot;, text);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//主状态机根据当前状态机状态进行报文解析</span></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(m_check_state)&#123;</span><br><span class="line">        <span class="comment">//1. 解析请求行</span></span><br><span class="line">        <span class="keyword">case</span> CHECK_STATE_REQUESTLINE:</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="built_in">parse_request_line</span>(text);</span><br><span class="line">            <span class="keyword">if</span>(ret == BAD_REQUEST)&#123;</span><br><span class="line">                <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 解析请求头</span></span><br><span class="line">        <span class="keyword">case</span> CHECK_STATE_HEADER:</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="built_in">parse_headers</span>(text);</span><br><span class="line">            <span class="keyword">if</span>(ret == BAD_REQUEST)&#123;</span><br><span class="line">                <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//------------------------------</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ret == GET_REQUEST)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">do_request</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 解析请求内容</span></span><br><span class="line">        <span class="keyword">case</span> CHECK_STATE_CONTENT:</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="built_in">parse_content</span>(text);</span><br><span class="line">            <span class="comment">//------------------------------</span></span><br><span class="line">            <span class="keyword">if</span>(ret == GET_REQUEST)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">do_request</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            line_status = LINE_OPEN;<span class="comment">//从状态机状态转为允许继续读取数据</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> INTERNAL_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;<span class="comment">//表示socket还需要继续读取数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四主状态机三部分的解析逻辑">四、主状态机三部分的解析逻辑</h2>
<h3 id="解析请求行">4.1 解析请求行</h3>
<p>解析请求行的逻辑主要是通过<code>http_conn</code>类中的<code>parse_request_line</code>函数实现的，这个函数的作用是对请求行进行解析，解析出请求方法、请求URL、HTTP版本号。其中请求行的格式举例如下所示：</p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/request_line.jpg"></p>
<p>由于请求头只有一行，所以我们只需要解析一次结束后，就将主状态机的状态从<code>CHECK_STATE_REQUESTLINE</code>转为<code>CHECK_STATE_HEADER</code>。</p>
<p>其中获取的<code>URL</code>在本项目中共有8种情况，分别是：</p>
<ul>
<li><code>/</code>：主页，即<code>judge.html</code>，<strong>（GET）</strong></li>
<li><code>/0</code>：注册页面，即<code>register.html</code>，<strong>（POST）</strong></li>
<li><code>/1</code>：登录页面，即<code>log.html</code>，<strong>（POST）</strong></li>
<li><code>/2CGISQL.cgi</code>：登录检验，<strong>（POST）</strong>
<ul>
<li>成功：跳转到<code>welcome.html</code></li>
<li>失败：跳转到<code>logError.html</code>(action跟<code>log.html</code>相同，都为<code>2CGISQL.cgi</code>)</li>
</ul></li>
<li><code>/3CGISQL.cgi</code>：注册检验，<strong>（POST）</strong>
<ul>
<li>成功：跳转到<code>log.html</code></li>
<li>失败：跳转到<code>registerError.html</code>(action跟<code>register.html</code>相同，都为<code>3CGISQL.cgi</code>)</li>
</ul></li>
<li><code>/5</code>：跳转到<code>picture.html</code>图片请求页面，<strong>（POST）</strong></li>
<li><code>/6</code>：跳转到<code>video.html</code>视频请求页面，<strong>（POST）</strong></li>
<li><code>/7</code>：跳转到<code>fans.html</code>关注页面，<strong>（POST）</strong></li>
</ul>
<p>在请求头我们只对<code>/</code>进行处理，剩下的交给<code>do_request</code>函数统一进行处理和响应。(也就是只处理最开始的主界面)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理主状态机状态1：解析请求行，获得GET/POST方法、url、http版本号</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_request_line</span><span class="params">(<span class="keyword">char</span> *text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*请求行格式举例：GET / HTTP/1.1</span></span><br><span class="line"><span class="comment">      请求行的格式：| 请求方法 | \t | URL | \t | HTTP版本号 | \r | \n |</span></span><br><span class="line"><span class="comment">      经过parse_line()函数处理后\r\n被替换成\0\0，所以这里可以直接用字符串函数来处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取URL：资源在服务端中的路径</span></span><br><span class="line">    m_url = <span class="built_in">strpbrk</span>(text, <span class="string">&quot; \t&quot;</span>);<span class="comment">//m_url:指向请求报文中的URL的index</span></span><br><span class="line">    <span class="keyword">if</span> (!m_url)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    *m_url++ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取method：请求方法，本项目中只支持GET和POST</span></span><br><span class="line">    <span class="keyword">char</span> *method = text;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcasecmp</span>(method, <span class="string">&quot;GET&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        m_method = GET;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcasecmp</span>(method, <span class="string">&quot;POST&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_method = POST;</span><br><span class="line">        cgi = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 获取http版本号：http版本号只支持HTTP/1.1</span></span><br><span class="line">    m_url += <span class="built_in">strspn</span>(m_url, <span class="string">&quot; \t&quot;</span>);</span><br><span class="line">    m_version = <span class="built_in">strpbrk</span>(m_url, <span class="string">&quot; \t&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!m_version)</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    *m_version++ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    m_version += <span class="built_in">strspn</span>(m_version, <span class="string">&quot; \t&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcasecmp</span>(m_version, <span class="string">&quot;HTTP/1.1&quot;</span>) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncasecmp</span>(m_url, <span class="string">&quot;http://&quot;</span>, <span class="number">7</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_url += <span class="number">7</span>;</span><br><span class="line">        m_url = <span class="built_in">strchr</span>(m_url, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncasecmp</span>(m_url, <span class="string">&quot;https://&quot;</span>, <span class="number">8</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_url += <span class="number">8</span>;</span><br><span class="line">        m_url = <span class="built_in">strchr</span>(m_url, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 解析URL资源</span></span><br><span class="line">    <span class="comment">// 当URL为/时，显示初始欢迎界面&quot;judge.html&quot;</span></span><br><span class="line">    <span class="comment">// 剩下的其它URL资源的解析在do_request()函数中进行同一实现</span></span><br><span class="line">    <span class="keyword">if</span> (!m_url || m_url[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(m_url) == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">strcat</span>(m_url, <span class="string">&quot;judge.html&quot;</span>);<span class="comment">//将url追加到字符串中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 请求行解析完毕，主状态机由CHECK_STATE_REQUESTLINE转移到CHECK_STATE_HEADER，解析请求头</span></span><br><span class="line">    m_check_state = CHECK_STATE_HEADER;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;<span class="comment">//当前只解析完了请求行，还没解析完完整HTTP报文，所以返回NO_REQUEST</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们再来讲一下HTTP是怎么实现将URL封装在报文中的。</p>
<p>我们知道，静态http页面实际上是通过<code>.html</code>文件来实现的，浏览器可以解析显示对应的html文件。我们在设计<code>.html</code>文件时，会通过html的<code>form</code>标签来实现用户表单的提交，这个表单提交的<code>action</code>属性就是<strong>请求行</strong>的<code>URL</code>，<code>method</code>属性就是请求行的<code>method</code>（GET/POST）。</p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/url_action.png"></p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/judge.png"></p>
<h3 id="解析请求头">4.2 解析请求头</h3>
<p>解析请求头的逻辑是通过<code>http_conn</code>类中的<code>parse_headers</code>函数实现的，这个函数的作用是对请求头进行解析，解析出<strong>请求头的字段和值</strong>。其中请求头的格式举例如下所示：</p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/headers.jpg"></p>
<p>其中本项目只对<code>Connection</code>、<code>Content-Length</code>、<code>Host</code>三个字段进行处理，剩下的字段直接跳过</p>
<ul>
<li><code>Connection</code>：判断是长连接还是短连接，有两个可能值<code>keep-alive</code>或<code>close</code>
<ul>
<li>HTTP/1.1默认是长连接，所以一般收到的都是<code>keep-alive</code></li>
</ul></li>
<li><code>Content-Length</code>：请求内容的长度，用于判断主状态机是否需要转移到<strong>消息主体解析状态</strong>
<ul>
<li>如果是<strong>GET请求</strong>，那么<strong>请求内容长度为0</strong>，主状态机不需要转移到<code>CHECK_STATE_CONTENT</code>状态，直接执行<code>do_request</code>响应报文就行</li>
<li>如果是<strong>POST请求</strong>，那么<strong>请求内容长度不为0</strong>，主状态机需要被触发转移到<code>CHECK_STATE_CONTENT</code>状态，<strong>结束主状态机中请求头的解析状态</strong>，转为解析请求内容获取请求内容中的数据（用户名和密码）</li>
</ul></li>
<li><code>Host</code>：请求的主机名，用于判断请求的资源是哪个主机的
<ul>
<li>本项目中只有一个主机（采用回环IP<code>127.0.0.1</code>），所以不需要判断</li>
</ul></li>
</ul>
<p>其中代码中要注意<code>m_linger</code>变量是用于<strong>返回响应报文时</strong>添加对应的<code>Connection</code>字段的值的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理主状态机状态2：解析请求头，获取Connection字段、Content-Length字段、Host字段</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_headers</span><span class="params">(<span class="keyword">char</span> *text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*请求行格式举例：Connection:keep-alive</span></span><br><span class="line"><span class="comment">      请求行的格式：| 头部字段名 | : |   | \t | \r | \n |</span></span><br><span class="line"><span class="comment">      经过parse_line()函数处理后\r\n被替换成\0\0，所以这里可以直接用字符串函数来处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 遇到空行| \r | \n |，表示头部字段解析完毕</span></span><br><span class="line">    <span class="keyword">if</span>(text[<span class="number">0</span>] == <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//空行后通过头部字段中的Content-Length字段判断请求报文是否包含消息体（GET命令中Content-Length为0，POST非0）</span></span><br><span class="line">        <span class="keyword">if</span>(m_content_length != <span class="number">0</span>)&#123;</span><br><span class="line">            m_check_state = CHECK_STATE_CONTENT;<span class="comment">//消息体不为空，POST请求，主状态机还需要转移到CHECK_STATE_CONTENT，解析请求内容</span></span><br><span class="line">            <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> GET_REQUEST;<span class="comment">//GET请求，主状态机解析完毕，返回GET_REQUEST</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2. 解析Connection字段，判断是keep-alive还是close</span></span><br><span class="line">    <span class="comment">//  HTTP/1.1默认是持久连接(keep-alive)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncasecmp</span>(text, <span class="string">&quot;Connection:&quot;</span>, <span class="number">11</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        text += <span class="number">11</span>;</span><br><span class="line">        text += <span class="built_in">strspn</span>(text, <span class="string">&quot; \t&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcasecmp</span>(text, <span class="string">&quot;keep-alive&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_linger = <span class="literal">true</span>;<span class="comment">//用于返回响应报文时添加对应的Connection字段的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 解析Content-Length字段，获取消息体的长度（主要是用于判断主状态机是否需要转为CHECK_STATE_CONTENT状态）</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncasecmp</span>(text, <span class="string">&quot;Content-length:&quot;</span>, <span class="number">15</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        text += <span class="number">15</span>;</span><br><span class="line">        text += <span class="built_in">strspn</span>(text, <span class="string">&quot; \t&quot;</span>);</span><br><span class="line">        m_content_length = <span class="built_in">atol</span>(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4. 解析Host字段，获取请求的主机名</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncasecmp</span>(text, <span class="string">&quot;Host:&quot;</span>, <span class="number">5</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        text += <span class="number">5</span>;</span><br><span class="line">        text += <span class="built_in">strspn</span>(text, <span class="string">&quot; \t&quot;</span>);</span><br><span class="line">        m_host = text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//其它字段本项目不解析，直接跳过</span></span><br><span class="line">        <span class="comment">// LOG_INFO(&quot;oop!unknow header: %s&quot;, text);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析请求内容">4.3 解析请求内容</h3>
<p>请求内容的解析比较简单，只要根据<code>Content-Length</code>字段的值判断是否已经读完了完整的HTTP消息体，然后将消息体内容存放在<code>m_string</code>中用于后面<code>do_request</code>的账号密码处理即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理主状态机状态3：解析请求内容，获取POST请求中的消息体</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_content</span><span class="params">(<span class="keyword">char</span> *text)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断http请求的消息体是否被完整读入</span></span><br><span class="line">    <span class="keyword">if</span> (m_read_idx &gt;= (m_content_length + m_checked_idx))</span><br><span class="line">    &#123;</span><br><span class="line">        text[m_content_length] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="comment">//POST请求中最后为输入的用户名和密码</span></span><br><span class="line">        m_string = text;<span class="comment">//m_string用于存储POST请求中的消息体</span></span><br><span class="line">        <span class="keyword">return</span> GET_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息体还没读完，继续读</span></span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五报文响应">五、报文响应</h2>
<h3 id="do_request函数解析请求资源路径">5.1
<code>do_request</code>函数解析请求资源路径</h3>
<p>由于<code>do_request</code>需要对用户名和密码进行处理，本项目为了减少对数据库的频繁访问，在<code>main.cpp</code>初始化程序时就将数据库中的所有用户名和密码都读取出来，存放在<code>users</code>map表中，若需要比对则直接跳过<code>users.find()</code>匹配查询即可</p>
<p>在<code>do_request</code>中需要将<code>WebServer</code>类中初始化的<code>root</code>路径和<code>http_conn</code>类中解析的<code>URL</code>路径拼接起来，形成完整的<code>m_real_file</code>资源路径，然后根据资源路径的不同进行不同的处理。</p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/url_page_source.png"></p>
<p>从<a href="###4.1-解析请求行">4.1
解析请求行</a>中可知，本项目请求资源路径的响应共有8种情况。</p>
<p>其中对于<strong>注册</strong>，需要先判断用户名是否已存在，之后再申请从<strong>数据库池</strong>中获取一个<strong>新的数据库连接</strong>执行<strong>插入</strong>操作实现注册</p>
<p>对于<strong>登录</strong>，需要<strong>验证用户名和密码</strong>，直接<code>users.find()</code>匹配查询即可</p>
<p>对于<strong>其它资源请求</strong>，直接根据报文的<code>m_url</code>将资源路径存入<code>m_real_file</code>中即可</p>
<p>简化的<code>do_request</code>代码执行流程图如下所示：</p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/do_request.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析完整的HTTP请求后，解析请求的URL进行处理并返回响应报文</span></span><br><span class="line"><span class="comment">//m_real_file:完成处理后拼接的响应资源在服务端中的完整路径</span></span><br><span class="line"><span class="comment">//m_string   :POST请求中在parse_content()中解析出的消息体（包含用户名和密码）</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::do_request</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1. 将m_real_file初始化为项目的根目录（WebServer类中初始化过的root）</span></span><br><span class="line">    <span class="built_in">strcpy</span>(m_real_file, doc_root);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(doc_root);</span><br><span class="line">    <span class="comment">//printf(&quot;m_url:%s\n&quot;, m_url);</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p = <span class="built_in">strrchr</span>(m_url, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 处理登录/注册请求（消息体中都会有用户名和密码）</span></span><br><span class="line">    <span class="comment">//处理cgi：POST请求会将cgi置为1</span></span><br><span class="line">    <span class="keyword">if</span> (cgi == <span class="number">1</span> &amp;&amp; (*(p + <span class="number">1</span>) == <span class="string">&#x27;2&#x27;</span> || *(p + <span class="number">1</span>) == <span class="string">&#x27;3&#x27;</span>))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据标志判断是登录检测还是注册检测（flag为&quot;2&quot;是登录，为&quot;3&quot;是注册）</span></span><br><span class="line">        <span class="keyword">char</span> flag = m_url[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> *m_url_real = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>) * <span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(m_url_real, m_url + <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file + len, m_url_real, FILENAME_LEN - len - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.1 将用户名和密码提取出来</span></span><br><span class="line">        <span class="comment">//存于报文的消息体中：user=akira&amp;password=akira</span></span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">100</span>], password[<span class="number">100</span>];</span><br><span class="line">        <span class="comment">//a. 通过识别连接符 &amp; 确定用户名</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">5</span>; m_string[i] != <span class="string">&#x27;&amp;&#x27;</span>; ++i)</span><br><span class="line">            name[i - <span class="number">5</span>] = m_string[i];</span><br><span class="line">        name[i - <span class="number">5</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="comment">//b. 确定密码</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = i + <span class="number">10</span>; m_string[i] != <span class="string">&#x27;\0&#x27;</span>; ++i, ++j)</span><br><span class="line">            password[j] = m_string[i];</span><br><span class="line">        password[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 处理注册请求</span></span><br><span class="line">        <span class="keyword">if</span> (*(p + <span class="number">1</span>) == <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//构造sql INSERT语句（插入）</span></span><br><span class="line">            <span class="keyword">char</span> *sql_insert = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>) * <span class="number">200</span>);</span><br><span class="line">            <span class="built_in">strcpy</span>(sql_insert, <span class="string">&quot;INSERT INTO user(username, passwd) VALUES(&quot;</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(sql_insert, <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(sql_insert, name);</span><br><span class="line">            <span class="built_in">strcat</span>(sql_insert, <span class="string">&quot;&#x27;, &#x27;&quot;</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(sql_insert, password);</span><br><span class="line">            <span class="built_in">strcat</span>(sql_insert, <span class="string">&quot;&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//首先查看数据库中是否已有重复的用户名：map中查找</span></span><br><span class="line">            <span class="comment">//没有重名的，进行增加数据</span></span><br><span class="line">            <span class="keyword">if</span> (users.<span class="built_in">find</span>(name) == users.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                m_lock.<span class="built_in">lock</span>();</span><br><span class="line">                <span class="keyword">int</span> res = <span class="built_in">mysql_query</span>(mysql, sql_insert);</span><br><span class="line">                users.<span class="built_in">insert</span>(pair&lt;string, string&gt;(name, password));</span><br><span class="line">                m_lock.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!res)</span><br><span class="line">                    <span class="comment">//注册成功，跳转到登录页面</span></span><br><span class="line">                    <span class="built_in">strcpy</span>(m_url, <span class="string">&quot;/log.html&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="comment">//注册失败，跳转到错误页面</span></span><br><span class="line">                    <span class="built_in">strcpy</span>(m_url, <span class="string">&quot;/registerError.html&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//注册失败，跳转到错误页面(用户名重复)</span></span><br><span class="line">                <span class="built_in">strcpy</span>(m_url, <span class="string">&quot;/registerError.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 处理登录请求</span></span><br><span class="line">        <span class="comment">//若浏览器端输入的用户名和密码在map表中可以查找到，返回1，否则返回0</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*(p + <span class="number">1</span>) == <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (users.<span class="built_in">find</span>(name) != users.<span class="built_in">end</span>() &amp;&amp; users[name] == password)</span><br><span class="line">                <span class="built_in">strcpy</span>(m_url, <span class="string">&quot;/welcome.html&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">strcpy</span>(m_url, <span class="string">&quot;/logError.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 处理跳转到注册界面的请求</span></span><br><span class="line">    <span class="keyword">if</span> (*(p + <span class="number">1</span>) == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> *m_url_real = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>) * <span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real, <span class="string">&quot;/register.html&quot;</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file + len, m_url_real, <span class="built_in">strlen</span>(m_url_real));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 处理跳转到登录界面的请求</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*(p + <span class="number">1</span>) == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> *m_url_real = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>) * <span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real, <span class="string">&quot;/log.html&quot;</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file + len, m_url_real, <span class="built_in">strlen</span>(m_url_real));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 处理图片资源请求</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*(p + <span class="number">1</span>) == <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> *m_url_real = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>) * <span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real, <span class="string">&quot;/picture.html&quot;</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file + len, m_url_real, <span class="built_in">strlen</span>(m_url_real));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6. 处理视频资源请求</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*(p + <span class="number">1</span>) == <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> *m_url_real = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>) * <span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real, <span class="string">&quot;/video.html&quot;</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file + len, m_url_real, <span class="built_in">strlen</span>(m_url_real));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 处理关注界面的请求</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*(p + <span class="number">1</span>) == <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> *m_url_real = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>) * <span class="number">200</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(m_url_real, <span class="string">&quot;/fans.html&quot;</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file + len, m_url_real, <span class="built_in">strlen</span>(m_url_real));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(m_url_real);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">strncpy</span>(m_real_file + len, m_url, FILENAME_LEN - len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断该路径的文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stat</span>(m_real_file, &amp;m_file_stat) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> NO_RESOURCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件的权限是否可读</span></span><br><span class="line">    <span class="keyword">if</span> (!(m_file_stat.st_mode &amp; S_IROTH))</span><br><span class="line">        <span class="keyword">return</span> FORBIDDEN_REQUEST;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断请求的资源是文件夹还是文件（文件夹返回BAD_REQUEST，不可响应）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">S_ISDIR</span>(m_file_stat.st_mode))</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过mmap将资源文件映射到内存中，提高文件的访问速度</span></span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(m_real_file, O_RDONLY);</span><br><span class="line">    m_file_address = (<span class="keyword">char</span> *)<span class="built_in">mmap</span>(<span class="number">0</span>, m_file_stat.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">    <span class="keyword">return</span> FILE_REQUEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>do_request</code>函数中的<code>mmap</code>函数是将资源文件映射到内存中，提高文件的访问速度，这样就不需要每次请求都去读取文件，而是直接从内存中读取，提高了文件的访问速度。关于mmap的介绍将在下面进行报文响应打包时详细说明</p>
<h3 id="打包响应报文">5.2 打包响应报文</h3>
<h4 id="请求报文处理的8种结果">5.2.1 请求报文处理的8种结果</h4>
<ul>
<li>NO_REQUEST
<ul>
<li>请求不完整，需要继续读取请求报文数据</li>
<li>跳转主线程继续监测读事件</li>
</ul></li>
<li>GET_REQUEST
<ul>
<li>获得了完整的HTTP请求</li>
<li>调用do_request完成请求资源映射</li>
</ul></li>
<li>NO_RESOURCE
<ul>
<li>请求资源不存在</li>
<li>跳转process_write完成响应报文</li>
</ul></li>
<li>BAD_REQUEST
<ul>
<li>HTTP请求报文有语法错误或请求资源为目录</li>
<li>跳转process_write完成响应报文</li>
</ul></li>
<li>FORBIDDEN_REQUEST
<ul>
<li>请求资源禁止访问，没有读取权限</li>
<li>跳转process_write完成响应报文</li>
</ul></li>
<li>FILE_REQUEST
<ul>
<li>请求资源可以正常访问</li>
<li>跳转process_write完成响应报文</li>
</ul></li>
<li>INTERNAL_ERROR
<ul>
<li>服务器内部错误，该结果在主状态机逻辑switch的default下，一般不会触发</li>
</ul></li>
</ul>
<p>使用<code>process_write</code>函数进行响应报文打包时，将会根据这8种结果封装<strong>不同的格式化字符串到报文</strong>中</p>
<h4 id="http_conn类中的process_write函数">5.2.2
<code>http_conn</code>类中的<code>process_write</code>函数</h4>
<p>工作线程中<code>process_write</code>根据<code>do_request</code>的请求解析结果（8种状态），通过<strong>5个相关函数</strong>逐个进行响应报文的打包，最后在工作线程中将http_conn用户对应的socketfd注册到epoll中，监听写事件，等待下一次写事件触发，完成响应报文的发送。</p>
<p>通过<code>iovec</code>结构体将多个非连续的内存区域组合在一起（以便在epoll写事件触发时，一次性的I/O操作将内存数据writev写入socketfd中发送给客户端）。</p>
<ul>
<li><code>iovec</code>结构体中的<code>iov_base</code>指向内存区域的起始地址</li>
<li><code>iov_len</code>指明内存区域的长度</li>
</ul>
<p>本项目中，<code>iovec</code>结构体的<code>m_iv</code>数组中存放了两个<code>iovec</code>结构体，分别指向<code>m_write_buf</code>和<code>m_file_address</code></p>
<ul>
<li>如果请求报文处理结果是<code>FILE_REQUEST</code>状态，代表请求的文件资源是可以正常访问的，所以会把响应资源<code>m_file_address</code>也添加到<code>m_iv</code>数组中作为响应报文的<strong>响应体</strong></li>
<li>如果请求报文处理结果是<code>GET_REQUEST</code>状态，代表请求的文件资源是空的，生成一个空的html文件（ok_string）返回</li>
<li>如果请求报文处理结果是其它状态，只申请一个buff的iovec，将<code>m_write_buf</code>添加到<code>m_iv</code>数组中，报文<strong>响应体</strong>调用<code>add_content</code>函数直接添加<strong>格式化的字符串</strong>到<code>m_write_buf</code>中，不需要第二个<code>iovec</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//报文打包状态机：根据服务器处理HTTP请求的结果和状态ret，打包相应的HTTP响应报文</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::process_write</span><span class="params">(HTTP_CODE ret)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//1. 服务器内部错误：500</span></span><br><span class="line">    <span class="comment">//在主状态机switch-case出现的错误，一般不会触发</span></span><br><span class="line">    <span class="keyword">case</span> INTERNAL_ERROR:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add_status_line</span>(<span class="number">500</span>, error_500_title);</span><br><span class="line">        <span class="built_in">add_headers</span>(<span class="built_in">strlen</span>(error_500_form));</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">add_content</span>(error_500_form))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2. 请求报文语法有错/请求的资源不是文件，是文件夹：404</span></span><br><span class="line">    <span class="keyword">case</span> BAD_REQUEST:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add_status_line</span>(<span class="number">404</span>, error_404_title);</span><br><span class="line">        <span class="built_in">add_headers</span>(<span class="built_in">strlen</span>(error_404_form));</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">add_content</span>(error_404_form))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 请求资源没有访问权限：403</span></span><br><span class="line">    <span class="keyword">case</span> FORBIDDEN_REQUEST:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add_status_line</span>(<span class="number">403</span>, error_403_title);</span><br><span class="line">        <span class="built_in">add_headers</span>(<span class="built_in">strlen</span>(error_403_form));</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">add_content</span>(error_403_form))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4. 请求资源可以正常访问：200</span></span><br><span class="line">    <span class="keyword">case</span> FILE_REQUEST:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add_status_line</span>(<span class="number">200</span>, ok_200_title);</span><br><span class="line">        <span class="keyword">if</span> (m_file_stat.st_size != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add_headers</span>(m_file_stat.st_size);<span class="comment">//文件字节数，用于Content-Length字段</span></span><br><span class="line">            <span class="comment">// iovec 结构体将多个非连续的内存区域组合在一起，进行一次性的 I/O 操作</span></span><br><span class="line">            <span class="comment">//FILE_REQUEST状态代表请求的文件资源是可以正常访问的，所以需要多申请一个文件资源的iovec</span></span><br><span class="line">            m_iv[<span class="number">0</span>].iov_base = m_write_buf;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_len = m_write_idx;</span><br><span class="line">            m_iv[<span class="number">1</span>].iov_base = m_file_address;</span><br><span class="line">            m_iv[<span class="number">1</span>].iov_len = m_file_stat.st_size;</span><br><span class="line">            m_iv_count = <span class="number">2</span>;</span><br><span class="line">            bytes_to_send = m_write_idx + m_file_stat.st_size;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//请求的文件资源是空的，生成一个空的html文件（ok_string）返回</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *ok_string = <span class="string">&quot;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">            <span class="built_in">add_headers</span>(<span class="built_in">strlen</span>(ok_string));</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">add_content</span>(ok_string))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求资源异常的，只申请一个buff的iovec</span></span><br><span class="line">    m_iv[<span class="number">0</span>].iov_base = m_write_buf;</span><br><span class="line">    m_iv[<span class="number">0</span>].iov_len = m_write_idx;</span><br><span class="line">    m_iv_count = <span class="number">1</span>;</span><br><span class="line">    bytes_to_send = m_write_idx;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实现process_write的各行报文打包函数">5.2.3
实现<code>process_write</code>的各行报文打包函数</h4>
<ul>
<li><code>add_response</code>：更新<code>m_write_idx</code>指针和缓冲区<code>m_write_buf</code>中的内容，将字符串写入缓冲区
<ul>
<li>采用<strong>可变参函数</strong>，向缓冲区写入格式化字符串</li>
<li>用<code>va_list</code> <code>va_start</code>
<code>va_end</code>来实现变参的列表处理</li>
<li>用<code>vsprintf</code>将格式化的字符串写入缓冲区（<code>m_write_buf</code>）中</li>
</ul></li>
<li><code>add_status_line</code>：添加<strong>状态行</strong>，即HTTP版本号、状态码、状态码描述
<ul>
<li>举例：<code>HTTP/1.1 200 OK\r\n</code></li>
</ul></li>
<li><code>add_headers</code>：添加<strong>消息报头和空行</strong>
<ul>
<li><code>Content-Length</code>字段：Content-Length: 78443</li>
<li><code>Connection</code>字段：Connection: keep-alive</li>
<li>空行：</li>
</ul></li>
<li><code>add_content</code>：添加<strong>响应体</strong>
<ul>
<li>将<code>content</code>中的内容添加到<code>m_write_buf</code>中</li>
</ul></li>
</ul>
<p>其中，<strong>状态行</strong>下的<strong>状态码</strong>有以下几种：</p>
<ul>
<li>200：请求成功</li>
<li>400：请求报文语法有错</li>
<li>403：禁止访问</li>
<li>404：请求资源不存在</li>
<li>500：服务器内部错误</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *ok_200_title = <span class="string">&quot;OK&quot;</span>;<span class="comment">//状态码200表示请求成功，只有这个状态码才是正常状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *error_400_title = <span class="string">&quot;Bad Request&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *error_403_title = <span class="string">&quot;Forbidden&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *error_404_title = <span class="string">&quot;Not Found&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *error_500_title = <span class="string">&quot;Internal Error&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>响应体</strong>的内容有以下几种（只针对请求处理错误的情况，请求资源可访问的情况会返回对应的文件资源而不是这种格式化字符串）：</p>
<ul>
<li>error_400_form：请求报文语法有错</li>
<li>error_403_form：禁止访问</li>
<li>error_404_form：请求资源不存在</li>
<li>error_500_form：服务器内部错误</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *error_400_form = <span class="string">&quot;Your request has bad syntax or is inherently impossible to staisfy.\n&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *error_403_form = <span class="string">&quot;You do not have permission to get file form this server.\n&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *error_404_form = <span class="string">&quot;The requested file was not found on this server.\n&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *error_500_form = <span class="string">&quot;There was an unusual problem serving the request file.\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>1. add_response</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新m_write_idx指针和缓冲区m_write_buf中的内容：将数据写入缓冲区</span></span><br><span class="line"><span class="comment">//采用可变参函数，向缓冲区写入格式化字符串</span></span><br><span class="line"><span class="comment">//用va_list va_start va_end来实现变参的列表处理</span></span><br><span class="line"><span class="comment">//用vsprintf将格式化的字符串写入缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_response</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//已些入的数据m_write_idx指针越界，缓冲区m_write_buf不允许再写入了</span></span><br><span class="line">    <span class="keyword">if</span> (m_write_idx &gt;= WRITE_BUFFER_SIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可变参数列表接收，通过vsnprintf函数格式化写入缓冲区</span></span><br><span class="line">    va_list arg_list;</span><br><span class="line">    <span class="built_in">va_start</span>(arg_list, format);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">vsnprintf</span>(m_write_buf + m_write_idx, WRITE_BUFFER_SIZE - <span class="number">1</span> - m_write_idx, format, arg_list);</span><br><span class="line">    <span class="comment">//格式化的字符串长度超过缓冲区剩余长度，写入失败</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt;= (WRITE_BUFFER_SIZE - <span class="number">1</span> - m_write_idx))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">va_end</span>(arg_list);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//格式化字符串写入缓冲区成功，更新m_write_idx指针</span></span><br><span class="line">    m_write_idx += len;</span><br><span class="line">    <span class="built_in">va_end</span>(arg_list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LOG_INFO(&quot;request:%s&quot;, m_write_buf);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. add_status_line</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1. 添加状态行：HTTP/1.1 200 OK</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_status_line</span><span class="params">(<span class="keyword">int</span> status, <span class="keyword">const</span> <span class="keyword">char</span> *title)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;%s %d %s\r\n&quot;</span>, <span class="string">&quot;HTTP/1.1&quot;</span>, status, title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. add_headers</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2. 添加消息报头和空行</span></span><br><span class="line"><span class="comment">// Content-Length字段：Content-Length: 78443</span></span><br><span class="line"><span class="comment">// Connection字段：Connection: keep-alive</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_headers</span><span class="params">(<span class="keyword">int</span> content_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_content_length</span>(content_len) &amp;&amp; <span class="built_in">add_linger</span>() &amp;&amp;</span><br><span class="line">           <span class="built_in">add_blank_line</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_content_length</span><span class="params">(<span class="keyword">int</span> content_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;Content-Length:%d\r\n&quot;</span>, content_len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// bool http_conn::add_content_type()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     return add_response(&quot;Content-Type:%s\r\n&quot;, &quot;text/html&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_linger</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;Connection:%s\r\n&quot;</span>, (m_linger == <span class="literal">true</span>) ? <span class="string">&quot;keep-alive&quot;</span> : <span class="string">&quot;close&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_blank_line</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;%s&quot;</span>, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4. add_content</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3. 添加响应体：文件资源无法访问的才需要调用这个函数，其他情况都是通过mmap映射到内存中的</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_content</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *content)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;%s&quot;</span>, content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注册epoll写事件发送响应报文">5.3
注册epoll写事件发送响应报文</h3>
<p>服务器工作线程在<code>process_write</code>函数中完成<strong>解析请求报文process_read</strong>、<strong>生成响应报文process_write</strong>一系列操作后，在<code>process</code>函数中将http_conn用户对应的socketfd注册到epoll中，监听写事件，等待下一次写事件触发，写事件触发后，调用<code>http_conn</code>类中的<code>write</code>函数，最终将报文发送给客户端。（<strong>Reactor模式</strong>下<code>write</code>函数在工作线程中执行的,<strong>Proactor模式</strong>下<code>write</code>函数在主线程中执行的）</p>
<p>在发送完报文后，如果HTTP的连接属于长连接，那么就继续监听读事件，等待下一次读事件触发；如果HTTP的连接属于短连接，在webserver类或者工作线程中结束write后会调用deal_timer中timer的cb_func函数关闭客户端连接</p>
<p><strong><code>write</code>函数：将缓冲区中的数据通过epoll事件监听发送给客户端</strong></p>
<p>该函数具体逻辑如下：</p>
<p>在生成响应报文时初始化<code>byte_to_send</code>，包括头部信息和文件数据大小。通过<strong><code>writev</code>函数循环发送响应报文数据</strong>，根据返回值更新byte_have_send和iovec结构体的指针和长度，并判断响应报文整体是否发送成功。</p>
<ul>
<li>若writev单次发送成功，更新byte_to_send和byte_have_send的大小，若响应报文整体发送成功,则取消mmap映射,并判断是否是长连接.
<ul>
<li>长连接重置http类实例，注册读事件，不关闭连接，</li>
<li>短连接直接关闭连接</li>
</ul></li>
<li>若writev单次发送不成功，判断是否是写缓冲区满了。
<ul>
<li>若不是因为缓冲区满了而失败，<strong>取消mmap映射</strong></li>
<li>若eagain则满了，更新iovec结构体的指针和长度，并注册写事件，等待下一次写事件触发（当写缓冲区从不可写变为可写，触发epollout），因此在此期间无法立即接收到同一用户的下一请求，但可以保证连接的完整性。</li>
</ul></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向socketfd写数据：</span></span><br><span class="line"><span class="comment">// Reactor模式下，工作线程调用users[sockfd].write函数向客户端发送响应报文</span></span><br><span class="line"><span class="comment">// Proactor模式下，主线程调用users[sockfd].write函数向客户端发送响应报文，不经过工作线程处理</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::write</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有数据需要发送，将sockfd从epoll中注册写事件（EPOLLOUT）改为读事件（EPOLLIN）继续监听</span></span><br><span class="line">    <span class="keyword">if</span> (bytes_to_send == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modfd</span>(m_epollfd, m_sockfd, EPOLLIN, m_TRIGMode);</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将响应报文发送给客户端</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = <span class="built_in">writev</span>(m_sockfd, m_iv, m_iv_count);<span class="comment">//将多个缓冲区iovec的数据一次性写入（发送）I/O描述符（m_sockfd）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送失败：eagain满了暂时不可用 or 其他情况（取消映射）</span></span><br><span class="line">        <span class="keyword">if</span> (temp &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//I/O缓冲区暂时满了，将sockfd再次注册写事件（EPOLLOUT）继续等待下一次写事件继续发送</span></span><br><span class="line">            <span class="keyword">if</span> (errno == EAGAIN)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">modfd</span>(m_epollfd, m_sockfd, EPOLLOUT, m_TRIGMode);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//未知原因发送失败，取消响应资源文件的映射</span></span><br><span class="line">            <span class="built_in">unmap</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//writev负责将缓冲区iovec数据写入I/O描述符，但是不会对已发送的数据进行删除，所以需要更新缓冲区iovec已发送的数据长度</span></span><br><span class="line">        bytes_have_send += temp;</span><br><span class="line">        bytes_to_send -= temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一个缓冲区m_write_buf已全部发送完</span></span><br><span class="line">        <span class="keyword">if</span> (bytes_have_send &gt;= m_iv[<span class="number">0</span>].iov_len)</span><br><span class="line">        &#123;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_len = <span class="number">0</span>;</span><br><span class="line">            m_iv[<span class="number">1</span>].iov_base = m_file_address + (bytes_have_send - m_write_idx);</span><br><span class="line">            m_iv[<span class="number">1</span>].iov_len = bytes_to_send;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第一个缓冲区m_write_buf还没发送完，更新m_iv[0]后继续发送</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_base = m_write_buf + bytes_have_send;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_len = m_iv[<span class="number">0</span>].iov_len - bytes_have_send;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//缓冲区全部发送完毕，取消响应资源文件的映射并重新将sockfd注册为读事件（EPOLLIN）</span></span><br><span class="line">        <span class="keyword">if</span> (bytes_to_send &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">unmap</span>();</span><br><span class="line">            <span class="built_in">modfd</span>(m_epollfd, m_sockfd, EPOLLIN, m_TRIGMode);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//保持长连接，重新初始化http_conn类中的一些参数</span></span><br><span class="line">            <span class="keyword">if</span> (m_linger)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">init</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//短连接return false，在webserver类或者工作线程中结束write后会调用deal_timer中timer的cb_func函数关闭连接</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="六浅聊一下mmap延申的内存映射问题">六、浅聊一下mmap延申的内存映射问题</h2>
<p>经过最后epoll监听写事件，我们的完整客户端请求-响应流程就结束了。但是在响应报文生成的过程中，我们提到了<code>mmap</code>，这里我们简单聊一下<code>mmap</code>。</p>
<p><code>mmap</code>是一种内存映射文件的方法，它可以将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中的一段地址的一一对应关系。这样，进程就可以采用指针的方式读写文件，而且可以实现进程间的文件共享。说到这，我们就先得来了解一下什么是<strong>虚拟内存</strong>，什么是<strong>物理内存和驻留内存</strong>。</p>
<p><code>mmap</code>的操作流程如下所示：</p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/PageTableProcess.png" width="70%"></p>
<p>如图所示，使用<code>mmap</code>与普通的通过<strong>中断+系统调用</strong>进行I/O文件阻塞读写的区别在于，<code>mmap</code>是通过<strong>内存映射</strong>的方式将文件通过<strong>映射到虚拟内存</strong>中，然后通过<strong>页表</strong>将虚拟内存<strong>映射到物理内存</strong>中，这样可以不经过<strong>用户态和内核态的切换</strong>，直接通过<strong>指针</strong>访问文件，提高了I/O的效率。</p>
<h3 id="虚拟内存vs物理内存和驻留内存">6.1
虚拟内存vs物理内存和驻留内存</h3>
<p><strong>虚拟内存</strong></p>
<p>虚拟内存是操作系统为了对进程地址进行管理而设计的<strong>逻辑上的内存空间</strong>，比如我们编写一个C++程序，采用g++<strong>编译</strong>的时候编译器处理各种指针、变量等采用的就是<strong>虚拟内存</strong>，因为此时程序还未运行，不可能直接访问物理内存。虚拟内存是<strong>连续的</strong>，是<strong>逻辑上的</strong>，是<strong>抽象的</strong>，是<strong>不受物理内存大小限制</strong>的。</p>
<p>所以程序运行过程中用到的指令、代码、数据都必须存在于虚拟内存中。虚拟内存的存在解放了物理内存的大小限制。</p>
<p><strong>物理内存</strong></p>
<p>物理内存是指实实在在的<strong>RAM内存上的空间</strong>，虚拟内存中的程序在物理机器上运行时，通过<strong>页映射表</strong>将虚拟内存中的地址映射到物理内存中的地址，从而真正实现程序运行。</p>
<p>虚拟内存向物理内存的映射是<strong>按需映射</strong>的，因为虚拟内存很大，可能有一部分程序在运行中根本不需要访问到，所以映射时只会讲访问到的部分映射到物理内存中。当需要访问另一部分程序时再将其映射到物理内存中（在<strong>触发缺页中断</strong>时利用<strong>分页技术</strong>将实际的物理内存分配给虚拟内存），所以一个程序运行时在虚拟内存中是<strong>碎片化</strong>存在的（不连续）。</p>
<p><strong>驻留内存</strong></p>
<p>驻留内存是指<strong>已经映射到物理内存中的虚拟内存</strong>，是实实在在<strong>存在于物理内存</strong>中的。</p>
<h3 id="图解三种内存的关联">6.2 图解三种内存的关联</h3>
<p>以下面的图为例，<strong>灰色</strong>代表运行程序中未被访问的部分（没被映射到物理内存中）；<strong>彩色</strong>代表运行程序中被访问的部分在虚拟内存和物理内存中的映射关系。</p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/mmap_virtual_physical_space.png"></p>
<p>通过上图可以直观感受到一个程序在<strong>虚拟内存</strong>上是<strong>连续</strong>的，运行时在物理内存是<strong>按需映射</strong>后<strong>碎片化</strong>存在的。也可以得到<strong>虚拟内空间大只能表示程序运行过程中可访问的空间比较大，不代表物理内存空间占用也大</strong>的结果。</p>
<p>但是我们可以发现一个很奇怪的现象，为什么程序A中的A4和程序B中的B4<strong>映射到了同一块物理内存中</strong>呢？其实这就涉及<strong>内存共享</strong>的概念，也就是说程序A和程序B中的一部分数据或代码是共享的，这样可以节省物理内存的使用。</p>
<h3 id="内存共享">6.3 内存共享</h3>
<p>程序共享内存主要存在于以下几种情况</p>
<ul>
<li><p><strong>共享库</strong>：多个程序使用相同的库，操作系统可以把这些库加载到内存中的一块区域，这样只用维护一块内存空间</p></li>
<li><p><strong>父子进程</strong>：父子进程之间可以通过<strong>共享内存</strong>进行通信，这样可以减少进程间通信的开销，使他们共同读写一块内存区域</p></li>
<li><p><strong>内存映射文件</strong>：操作系统可以将文件映射到进程的虚拟内存中，本项目中使用的<code>mmap</code>就是这种方式，将文件映射到进程的虚拟内存中，这样可以减少文件拷贝到内存的开销，提高I/O读取效率</p>
<ul>
<li>进程A和进程B都映射了区域C，当A第一次读取C时通过缺页从磁盘复制文件页到内存中；但当B再读C的相同页面时，虽然也会产生缺页异常，但是不再需要从磁盘中复制文件过来，而可直接使用已经保存在内存中的文件数据。</li>
</ul></li>
</ul>
<h3 id="从c的角度深入理解内存映射">6.4 从C++的角度深入理解内存映射</h3>
<h4 id="c内存分区">6.4.1 C++内存分区</h4>
<p>C++的代码存于虚拟内存中，C++内存主要分为<strong>栈区</strong>、<strong>堆区</strong>、<strong>全局/静态区</strong>、<strong>常量区</strong>和<strong>代码区</strong>五个区。</p>
<ul>
<li><strong>栈区</strong>：由编译器自动分配释放，存放<strong>函数的实参值</strong>、<strong>局部变量</strong>的值等，栈上的变量⽣命周期与其所在函数的执⾏周期相同。由编译器负责自动分配和释放。（先进后出）</li>
<li><strong>堆区</strong>：由<strong>程序员分配释放</strong>，若程序员不释放，程序结束时由操作系统回收，堆上的变量⽣命周期由程序员显式控制。在C++中可以分配（使⽤
new 或 malloc ）和释放（使⽤ delete 或 free ）。（先进先出）</li>
<li><strong>全局/静态区</strong>：存放<strong>全局变量、静态变量</strong>，程序<strong>一经编译</strong>这些变量就会存在，程序结束后由操作系统释放。</li>
<li><strong>常量区</strong>：存放<strong>常量字符串</strong>，程序结束后由操作系统释放。</li>
<li><strong>代码区</strong>：存放<strong>函数体的二进制代码</strong>。</li>
</ul>
<p>其中栈(stack)的内存地址是向下增长的，堆(heap)的内存地址是向上增长的</p>
<p><img src="/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/mmap_virtual_memory.png"></p>
<p>所以我们平时所说的代码的<strong>运行，分配，操作</strong>等，都是指的<strong>虚拟内存</strong>！！！！！！！！</p>
<p>程序<strong>申请和操作</strong>的内存都是在<strong>虚拟内存</strong>上的，包括<strong>堆(heap)</strong>、<strong>栈(stack)</strong>等。</p>
<h4 id="内存的延迟分配">6.4.2 内存的延迟分配</h4>
<p>前面提到虚拟内存中，其实就属于<strong>延迟分配</strong>，Linux内核在用户申请内存时（比如<code>malloc</code>和<code>new</code>），只是先给它分配在<strong>虚拟内存</strong>中，并不分配实际的物理内存。</p>
<p>只有当用户<strong>使用这块内存</strong>时（比如赋值、读取等），才会触发<strong>缺页中断</strong>，内核才会分配<strong>具体的物理页面</strong>给用户，此时才占用宝贵的物理内存。</p>
<p>内核释放物理页面是<strong>通过虚拟内存找到对应的物理页面</strong>，然后释放物理页面，但是虚拟内存中的映射关系不会立即释放，只有当用户再次访问这块内存时，才会触发<strong>缺页中断</strong>，重新分配物理页面。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *p=<span class="built_in">malloc</span>(<span class="number">2048</span>);<span class="comment">//这里只是分配了虚拟内存2048，并不占用实际内存。 </span></span><br><span class="line"><span class="built_in">strcpy</span>(p,<span class="string">&quot;123&quot;</span>);     <span class="comment">//分配物理页面，虽只使用了3个字节，但内存还是为它分配了2048字节的物理内存。</span></span><br><span class="line"><span class="built_in">free</span>(p);             <span class="comment">//通过虚拟地址，找到其所对应的物理页面，释放物理页面，释放虚拟内存。</span></span><br></pre></td></tr></table></figure>
<h4 id="内存空洞问题">6.4.3 内存空洞问题</h4>
<p>一个场景，我们知道C++中堆是从下往上的，而堆又是先进先出的，所以当<strong>堆顶申请的物理内存还在使用时中</strong>，如果底下有些内存块被释放了，那么<strong>这些释放的物理内存就不会返回到系统中</strong>，形成了<strong>内存空洞</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//申请11个2K的内存</span></span><br><span class="line">    <span class="keyword">char</span> *p[<span class="number">11</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i]=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">1024</span>*<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(p[i],<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p[<span class="number">10</span>]=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">1024</span>*<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(p[<span class="number">10</span>],<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放前10个2k内存</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">pid_t</span> pid=<span class="built_in">getpid</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid:%d\n&quot;</span>,pid);</span><br><span class="line">    <span class="built_in">pause</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过上面的代码，如果没有内存空洞，那么此时进程应该只是占用了一个物理页面，剩下堆顶一个2k</p>
<p>但是通过查看<code>memmap</code>命令，我们可以看到<code>1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</code>，说明堆顶的2k内存还在使用，但是底下的10个2k内存已经被释放，但是并没有返回给系统，这就是<strong>内存空洞</strong>。</p>
<h4 id="mmap的内存映射">6.4.4 mmap的内存映射</h4>
<p>最后经过前面基础知识的铺垫，我们再来聊一下<code>mmap</code>的优点：</p>
<ul>
<li><p><strong>减少I/O操作</strong>：<code>mmap</code>将文件映射到内存中，提高了文件的访问速度，不需要每次请求都去读取文件，而是直接从内存中读取</p></li>
<li><p><strong>减少内存拷贝</strong>：<code>mmap</code>将文件映射到内存中，减少了内存拷贝的次数，提高了文件的访问速度</p></li>
<li><p><strong>内存共享</strong>：<code>mmap</code>可以实现内存共享，多个进程可以映射同一个文件，实现进程间的文件共享</p></li>
<li><p><strong>延迟分配</strong>：<code>mmap</code>是按需映射的，只有在访问到文件时才会映射到内存中，减少了内存的占用</p></li>
</ul>
<h3 id="参考">6.5 参考</h3>
<p><a href="https://blog.csdn.net/qq_41687938/article/details/120479067">详解进程的虚拟内存，物理内存，共享内存</a>
<a href="https://zhuanlan.zhihu.com/p/393403828">一文理解虚拟内存、物理内存、内存分配、内存管理</a></p>
<h2 id="七总结">七、总结</h2>
<p>这篇博客应该是本项目最长的一篇了，而HTTP报文的实现也确实是这个项目的主体部分，所以花了比较长的篇幅，还是要好好理解一下</p>
<p>这里需要结合前面<strong>线程池</strong>的相关实现以及<strong>Reactor和Proactor模式</strong>的相关知识，才能更好地理解HTTP类实现的整个流程。还是需要好好消化一下</p>
<p>最后，到这里我们已经实现了HTTP服务器的基础功能了，接下来我们将会实现<strong>日志系统</strong>、<strong>定时器</strong>两个功能，最后再进行<strong>压力测试</strong>，最终完成整个项目的实现。</p>
<p>关于后续的学习，我们先从<strong>定时器</strong>入手，具体内容请看下一篇博客<a href="https://akirazheng.github.io/2024/03/26/WebServer%E5%AD%A6%E4%B9%A07%EF%BC%9A%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E6%B4%BB%E6%97%B6%E9%97%B4/">WebServer学习7：定时器控制客户端存活时间</a></p>
]]></content>
      <categories>
        <category>WebServer项目（C++）</category>
      </categories>
  </entry>
  <entry>
    <title>分布式Kafka学习</title>
    <url>/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="一消息队列">一、消息队列</h1>
<p>消息队列是<strong>传递消息的容器（队列）</strong>，自然遵循<strong>先进先出</strong>的原则。</p>
<p>消息队列的<strong>三大主要作用</strong>是</p>
<ul>
<li><strong>解耦</strong>：<strong>无依赖</strong>的业务间解耦（不需要给上一个任务返回结果），因此可以处理统一条消息的多个任务
<img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/MQ_decouple.png" width="40%"></li>
<li><strong>异步</strong>：耗时任务提交给消息队列后，立即返回，不阻塞，允许水平扩展多个机器，轮询处理结果（还是需要返回结果的）</li>
<li><strong>削峰填谷</strong>：流量控制，特别是在<strong>秒杀场景</strong>避免瞬间大量请求导致系统崩溃</li>
</ul>
<p>下面将介绍一下保证消息队列性能的一些设计</p>
<h2 id="消息可靠性保证消息不丢失">1. 消息可靠性：保证消息不丢失</h2>
<p><strong>1）三种消息丢失场景</strong></p>
<p>在以下三个环节有可能发生消息丢失：</p>
<ul>
<li><strong>生产阶段</strong>：生产者发送消息时，<strong>网络中断</strong>等原因导致消息丢失</li>
<li><strong>存储阶段（到达中间件broken）</strong>：消息队列中间件接收到消息后，<strong>存储阶段</strong>可能导致消息丢失</li>
<li><strong>消费阶段</strong>：消费者消费消息进行处理后，未成功<strong>提交偏移量</strong>就会导致消息丢失</li>
</ul>
<p><strong>2）保证消息不丢失的方法</strong></p>
<p>针对以上三种场景，可以采取以下措施：</p>
<ul>
<li><strong>生产阶段</strong>：需要考虑网络中断问题
<ul>
<li>可以采用<strong>客户端重试机制</strong></li>
<li><strong>ACK消息确认机制</strong>（即<strong>生产者发送消息后</strong>，<strong>消息队列返回确认消息</strong>，生产者<strong>再发送下一条消息</strong>）来保证消息<strong>at
least once</strong>发送
<ul>
<li>Kafka生产侧有<strong>3种</strong>返回acks的配置方式：<strong>0</strong>（不返回）、<strong>1（也是默认的）</strong>（只需要leader确认持久化后的ACK，不等待所有副本的同步）、<strong>all或-1</strong>（需要leader及所有ISR副本都同步后返回ACK）</li>
</ul></li>
</ul></li>
<li><strong>存储阶段</strong>：
<ul>
<li>消息队列中间件可以采用<strong>MySQL数据库持久化</strong>的方式，将消息<strong>持久化到磁盘</strong></li>
<li>同时配合生产阶段，当确认持久化完成后，再返回ACK确认消息</li>
</ul></li>
<li><strong>消费阶段</strong>：
<ul>
<li>消费者消费<strong>消息后</strong>，<strong>需要提交偏移量</strong>，以保证消息<strong>至少被处理一次</strong>
<ul>
<li>说明：这样就算消费者宕机，重启后也可以再拉取消息消费</li>
</ul></li>
</ul></li>
</ul>
<p>三种阶段的消息丢失场景示意图：</p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/messageLost.png" width="60%"></p>
<h2 id="消息顺序性保证消息有序">2. 消息顺序性：保证消息有序</h2>
<p>有序指的是<strong>消息的消费顺序</strong>和<strong>发送的顺序</strong>一致，即<strong>先发送的消息先被消费</strong></p>
<p>Kafka的<strong>一个topic主题</strong>由<strong>很多不同的partition</strong>存储，<strong>在一个Partition里是有序的</strong>，所以可以在<strong>Partition的路由</strong>上实现有序</p>
<p>在实际中，我们可以根据<strong>不同场景有序性的需求</strong>，来进行路由设计</p>
<ul>
<li><strong>业务分区</strong>：不同用户的操作必须有序
<ul>
<li><strong>每个细化的子业务</strong>有一个单独的key分到<strong>某个Partition</strong></li>
<li>扩展性低，当某个业务增长快的话，会加重那个Partition的压力</li>
</ul></li>
<li><strong>客户分区</strong>：<strong>同一个用户</strong>的操作必须有序
<ul>
<li><strong>user_id%n</strong>作为路由规则，分到<strong>某个Partition</strong>
<ul>
<li>缺点：<strong>扩展新Partition分区后需要全部迁移数据</strong></li>
</ul></li>
<li>用<strong>hash(id)%哈希槽</strong>（每个Partition分配几个负责的节点），通过循环哈希环减少迁移压力（通过分配一些槽给新Partition，这样只需要将这些槽进行迁移）</li>
</ul></li>
</ul>
<p>比如在交易场景下，某个用户账户余额为0，我们要保证用户先充值1000元再转账2000元的可实现性，这个时候就要求必须按顺序执行这个用户的多条消息，否则在充值1000元还没处理完的情况下，转账2000元就会出现余额不足</p>
<ul>
<li>解决方法：要保证同一个用户的多条消息必须有序，通过<strong>user_id路由同一个用户永远打到一个Partition中</strong></li>
</ul>
<p>路由方式示意图：</p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/orderPartition.png" width="60%"></p>
<h2 id="消息幂等性保证消息不重复">3. 消息幂等性：保证消息不重复</h2>
<p>消息幂等的方式一般就是保证<strong>对外接口的幂等性</strong>，即<strong>多次调用接口返回的结果是一样的</strong>，在数学上表示为<strong>f(f(x))=f(x)，比如绝对值函数abs(abs(x))=abs(x)</strong></p>
<p><strong>1）幂等性的场景</strong></p>
<p>首先要让消息不重复同样需要控制三个阶段：</p>
<ul>
<li><strong>生产阶段</strong>：<strong>由于网络抖动和Web的重试机制导致重复发送</strong>，一个相同的请求总有概率重放到Kafka中，所以需要引入幂等式</li>
<li><strong>存储阶段</strong>：天然不重复存储</li>
<li><strong>消费阶段</strong>：<strong>消费者消费后，未及时提交偏移量</strong>，重启后再次拉取消费</li>
</ul>
<p><strong>2）CRUD接口的幂等性</strong></p>
<p>后端操作中的接口一般就是CRUD操作，而这4种接口的幂等性如下：</p>
<table>
<colgroup>
<col style="width: 62%">
<col style="width: 37%">
</colgroup>
<thead>
<tr>
<th style="text-align: center;">接口类型</th>
<th>幂等性描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><strong>新增插入</strong></td>
<td><strong>必须保证幂等性</strong>，因为<strong>重复插入</strong>会导致<strong>数据重复</strong></td>
</tr>
<tr>
<td style="text-align: center;"><strong>删除</strong></td>
<td><strong>不需要保证幂等性</strong>，因为<strong>重复删除</strong>的最终结果都是删掉这条数据</td>
</tr>
<tr>
<td style="text-align: center;"><strong>更新</strong></td>
<td>将字段确定性的更新，<strong>不需要保证幂等性</strong>，因为<strong>重复更新</strong>的最终结果都是一样的；但是如果是<strong>非确定性更新（如自增）</strong>，则<strong>需要保证幂等性</strong></td>
</tr>
<tr>
<td style="text-align: center;"><strong>查询</strong></td>
<td><strong>不需要保证幂等性</strong>，因为<strong>事务性操作重复查询</strong>的结果都是一样的</td>
</tr>
</tbody>
</table>
<p>综上所述，<strong>增（数据库唯一ID）</strong>、<strong>自增性的改操作（乐观锁version）</strong>都要保证幂等</p>
<p><strong>3）幂等性的实现</strong></p>
<p>在解决消息重复的问题上，一般有以下几种方式：</p>
<ul>
<li><strong>唯一ID（最常用，适用于新增插入）</strong>：<strong>服务端</strong>采用分布式ID（UUID/雪花算法）生成唯一ID返回给客户端，字段中ID字段为有唯一性约束
<ul>
<li>为什么要用分布式ID？UUID/雪花算法分库下<strong>保证全局唯一</strong>，而自增不能保证</li>
<li>为什么是服务端生成？因为<strong>客户端生成</strong>的话，不同客户端生成的ID可能会重复</li>
<li>服务的生成的唯一ID什么时候能起幂等作用？
<ul>
<li>数据网络抖动的多次发送主要是由前端去控制的，全局唯一ID的后端接口幂等其实是为了保证当用户觉得该条消息被消费很久没得到返回，<strong>会重新根据前面拿过的全局唯一ID再次请求</strong>，此时如果服务端发现该ID已经存在则不会再插入</li>
</ul></li>
</ul></li>
<li><strong>防重表（适用于新增插入）</strong>：<strong>允许ID重复</strong>，但是加了一个<strong>唯一索引字段unique_key用于隐性保证唯一性</strong></li>
<li><strong>乐观锁（适用于更新）</strong>：<strong>version字段</strong>作为<strong>乐观锁</strong>，每次更新时<strong>version+1</strong>，这样即使重复更新也不会影响数据
<ul>
<li>step1：客户端查询version</li>
<li>step2：客户端发起更新请求，带上version</li>
<li>step3：服务端校验version，如果一致则更新，否则返回错误</li>
</ul></li>
<li><strong>Token（同时适用于增删更）</strong>：<strong>Token</strong>是<strong>一次性的</strong>，<strong>删除后</strong>就<strong>不能再次删除</strong>，因此<strong>重复删除</strong>不会有影响
<img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/token.png" width="60%"></li>
</ul>
<p><strong>4）redis和数据库的幂等性</strong></p>
<ul>
<li><strong>redis</strong>
<ul>
<li><strong>唯一ID</strong>：每个消息分配一个唯一ID</li>
<li>Redis Set：将已消费的消息ID存入Redis
Set中，每次消费前先判断是否在Set中</li>
<li><strong>原子操作</strong>：SISMEMBER和SADD是原子操作，保证了幂等性</li>
</ul></li>
<li><strong>数据库</strong>
<ul>
<li><strong>唯一ID约束</strong>：ID字段设置唯一约束</li>
<li><strong>INSERT IGNORE</strong>：插入时使用INSERT
IGNORE，如果ID重复则不插入</li>
<li><strong>事务</strong>：使用事务保证原子性</li>
</ul></li>
<li><strong>Redis和MySQL结合实现幂等</strong>：在MySQL唯一ID前面加一层Redis
Set先过滤重复的UID</li>
</ul>
<h2 id="消息的积压处理">4. 消息的积压处理</h2>
<p><strong>1）消息积压的原因</strong></p>
<ul>
<li><strong>消费者处理能力不足</strong>：消费者处理消息的速度不够快，导致消息积压</li>
<li><strong>消费者线程阻塞</strong></li>
<li><strong>消费者宕机</strong></li>
</ul>
<p><strong>2）消息积压的解决方案</strong></p>
<ul>
<li><strong>扩容提高消费速率</strong>：增加消费者进行水平扩容
<ul>
<li>由于要保持<strong>消息有序性</strong>，因此一个<strong>Partition只能有一个消费者</strong>，所以水平扩容也是有要求的，当消费者与Partition持平时，还要扩容Partition</li>
</ul></li>
<li><strong>服务主动降级</strong>：紧急情况下可以先<strong>取消一些非核心业务或流程</strong>，如阿里通过orange开关取消某个非核心业务链路</li>
</ul>
<h1 id="二kafka">二、Kafka</h1>
<h2 id="kafka简介">1. Kafka简介</h2>
<p>Kafka是<strong>分布式消息队列</strong>，是<strong>高吞吐量</strong>的分布式<strong>发布订阅</strong>消息系统，具有<strong>持久性（zookeeper提供的主从管理）</strong>、<strong>高性能（10w/s级别）</strong>、<strong>高可用性（健壮的副本Partition）</strong>、<strong>最终一致性（主从一致）</strong>等特点。</p>
<p>单机吞吐支持<strong>10W/s级别</strong>，与RocketMQ相比，其<strong>不具备消息回溯能力</strong>且支持主题数在<strong>百级</strong>（RocketMQ支持<strong>千级</strong>）。</p>
<h2 id="kafka架构">2. Kafka架构</h2>
<p>Kafka的架构主要包括<strong>生产者</strong>、<strong>消费者</strong>、<strong>broker（单机）</strong>、<strong>topic（消息发布订阅模式）</strong>、<strong>partition（一个topic的Partition可以分布在多台机器上-主从一致）</strong>、<strong>replica</strong>、<strong>leader</strong>、<strong>follower</strong>等概念。</p>
<p>除此以外，还有<strong>zookeeper</strong>用于<strong>管理集群broker</strong>，它相当于管家，可以<strong>选举leader、follow保存副本</strong>，保证数据可用性（可以用于broken的注册、发现与选举）</p>
<p>总的架构如下：</p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/Kafka_structure.png" width="80%"></p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/Kafka_structure2.png" width="80%"></p>
<p>Kafka的设计理念可分解为以下主要部分：</p>
<p><strong>1）MQ数据堆积</strong></p>
<p>MQ中数据堆积本质是消费者消费能力差，可以通过<strong>增加消费者线程</strong>，也就是多消费者模式，同理也可以添加多生产者提高吞吐量</p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/multiConsumers.jpg" width="60%"></p>
<p><strong>2）多生产者和多消费者竞争MQ</strong></p>
<p><strong>分Topic</strong></p>
<p>将消息队列根据<strong>不同主题Topic</strong>分为<strong>多个MQ</strong>减少冲突等待</p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/multiTopic.jpg" width="60%"></p>
<p><strong>Topic的Partition分区</strong></p>
<p>单个Topic中还可以再细分成<strong>多个Partition分区</strong>，每个消费者对应一个Partition分区，从而<strong>降低多线程竞争</strong></p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/multiPartition.jpg" width="60%"></p>
<p><strong>3）高性能</strong></p>
<p>将多个Partition分布在不同机器上，每个机器称为<strong>broker</strong></p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/multiBroker.jpg" width="60%"></p>
<p><strong>4）高可用</strong></p>
<p>单个broker如果宕机了，该部分的功能将无法继续进行，因此可以设计<strong>leader-follower</strong>的集群方式</p>
<p><strong>leader</strong>负责读写数据，<strong>follower</strong>负责复制数据，当<strong>leader</strong>宕机时可以从<strong>follower</strong>中选举出新的<strong>leader</strong></p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/leader-follower.jpg" width="60%"></p>
<p><strong>5）持久化</strong></p>
<p>数据放在内存中有宕机丢失的风险，因此数据还应该具备<strong>持久化到磁盘</strong>的能力</p>
<p>同时为了防止磁盘溢出，还应该设置<strong>过期时间</strong></p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/savetodisk.jpg" width="60%"></p>
<h2 id="kafka的优缺点">3. Kafka的优缺点</h2>
<h3 id="优点">3.1 优点</h3>
<ul>
<li><strong>高吞吐量</strong>：支持<strong>10W/s级别</strong>的消息堆积吞吐量（RocketMQ一样）</li>
<li><strong>高可用性</strong>：通过<strong>leader-follower</strong>机制保证数据的可用性</li>
<li><strong>持久化</strong>：支持数据持久化到磁盘</li>
<li><strong>分布式</strong>：支持<strong>多broker</strong>、<strong>多partition</strong>、<strong>多topic</strong>的分布式架构</li>
<li><strong>水平扩展</strong>：支持<strong>水平扩展</strong>，可以通过增加broker、partition等方式提高吞吐量</li>
<li><strong>支持批量处理</strong>（RocketMQ不支持）</li>
<li><strong>支持消息顺序</strong>：在<strong>一个队列中</strong>可靠的<strong>先进先出</strong>（FIFO）和严格的顺序传递；支持拉（pull）和推（push）两种消息模式；</li>
</ul>
<h3 id="缺点">3.2 缺点</h3>
<ul>
<li><strong>不支持消息回溯</strong>：Kafka不支持消息回溯，即<strong>消费者消费过的消息无法再次消费，也就不支持重试</strong></li>
<li>使用短轮询，实时性取决于轮询频率</li>
</ul>
<h2 id="kafka高性能的原因">4. Kafka高性能的原因</h2>
<p>Kafka高性能的原因有：<strong>零拷贝</strong>、<strong>批量操作</strong>、<strong>顺序写</strong>、数据压缩、多层次、页缓存</p>
<h3 id="零拷贝">4.1 零拷贝*</h3>
<p>零拷贝：优化<strong>网络数据</strong>从本地到网卡发送的拷贝次数</p>
<p>操作：<strong>将数据直接从内核空间的磁盘文件直接拷贝到网卡中，不经过用户态</strong></p>
<p>优点：<strong>系统调用从2次变成1次、拷贝由4次变成2次</strong></p>
<p>原来的网卡数据发送流程：</p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/copy.png" width="60%"></p>
<p>零拷贝的数据发送流程：</p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/zeroCopy.png" width="60%"></p>
<h3 id="批量操作">4.2 批量操作*</h3>
<p>批量操作：一次性拉取多条消息进行消费</p>
<p>方法包括：累积到<strong>一定时间ms</strong>就操作、累积到<strong>一定batchSize数据量</strong>就操作、累积到<strong>一定缓存大小</strong>就操作</p>
<p>优点：节省宽带</p>
<p>缺点：造成延时</p>
<h3 id="顺序写">4.3 顺序写*</h3>
<p>顺序写：指磁盘的顺序写，<strong>使磁盘写性能更接近内存性能</strong></p>
<p>操作：Kafka写入数据其实就是添加到每个Partition的末端（也就是磁盘文件）</p>
<p>原因：非顺序写磁盘需要转动寻址、对齐扇区，速度慢</p>
<h3 id="数据压缩">4.4 数据压缩</h3>
<p>数据压缩：<strong>生产者/broken压缩-消费者解压数据</strong></p>
<p>优点：降低网络需求和存储压力</p>
<h3 id="多层次">4.5 多层次</h3>
<p>多层次：Kafka利用<strong>分治Partition主从思想</strong>，将顺序IO存储压力进行<strong>切分</strong></p>
<p><code>Topic=n*Partition=m*broken</code>，Kafka返回路由信息，使其按规则访问对应的Partition，每个Partition分为3个文件作为索引文件实现快速查找</p>
<p>分治思想：一个业务写入一个topic <strong>---&gt;</strong>
一个topic具有多个切片Partition <strong>---&gt;</strong>
一个Partition有多个Broken用作数据主从存储</p>
<p><img src="/2024/08/05/%E5%88%86%E5%B8%83%E5%BC%8FKafka%E5%AD%A6%E4%B9%A0/multiLevel.png" width="60%"></p>
<h3 id="页缓存">4.6 页缓存</h3>
<p>页缓存：消息进入Kafka后线写入<strong>内存缓存PageCache</strong>，<strong>后面再由操作系统刷入磁盘</strong>（肯定需要刷入磁盘防止电脑断电、重启导致数据丢失）</p>
<p>优点：当查询的数据打中PageCache时可以直接从PageCache中获取数据，提升效率（未完待续：需要了解什么情况下会去命中PageCache）</p>
<p><strong>从PageCache到磁盘同步固化机制：</strong></p>
<ul>
<li>1）内存空间&lt;=阈值后，PageCache输入磁盘并被释放</li>
<li>2）脏页在内存驻留一定时间后
<ul>
<li>脏页：当消息被写入PageCache后，由于不是及时更新到磁盘的，所以此时页缓存数据跟磁盘不一致，被称为脏页</li>
<li>主动调用刷脏方法：<strong>sync或fsync方法</strong>（系统调用）</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划-背包问题</title>
    <url>/2024/04/26/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="一0-1背包问题">一、0-1背包问题</h1>
<h2 id="适用场景">1.1 适用场景</h2>
<p>0-1背包问题属于背包问题中的一种，其特点是：<strong>每个物品只能被选择一次</strong>，两种状态即<strong>要么装入背包，要么不装入背包</strong>。</p>
<h2 id="问题描述">1.2 问题描述</h2>
<p>有一个<strong>背包</strong>，其容量为<code>m</code></p>
<p>现有<code>n</code>个<strong>物品</strong>，每个物品的重量为<code>w[i]</code>，价值为<code>v[i]</code></p>
<p>现在需要选择一些物品装入背包，使得背包中物品的总价值最大。</p>
<h2 id="通用代码思路">1.3 通用代码思路</h2>
<h3 id="二维数组方式">1.3.1 二维数组方式</h3>
<h4 id="数组含义">数组含义</h4>
<p><code>dp[i][j]</code>表示<strong>前i个物品</strong>在<strong>背包容量为j</strong>时的最大价值</p>
<h4 id="状态转移方程">状态转移方程</h4>
<ul>
<li>当<code>j&lt;w[i]</code>时，即当前物品的重量大于背包容量，此时无法装入背包，因此<code>dp[i][j]=dp[i-1][j]</code></li>
<li>当<code>j&gt;=w[i]</code>时，即当前物品的重量小于等于背包容量，此时可以选择<strong>装入或者不装入</strong>背包，因此<code>dp[i][j]=max(dp[i-1][j],dp[i-1][j-w[i]]+v[i])</code></li>
</ul>
<h4 id="通用代码">通用代码</h4>
<p><strong>1. 初始化</strong></p>
<p>通常初始化第一排</p>
<p><strong>2. 遍历顺序</strong></p>
<p>可以采用先<strong>物品</strong>后<strong>背包</strong></p>
<p>也可以采用先<strong>背包</strong>后<strong>物品</strong></p>
<p><strong>3. 背包的遍历顺序</strong></p>
<p><strong>正序</strong>就行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;<span class="comment">//物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)&#123;<span class="comment">//背包</span></span><br><span class="line">        <span class="keyword">if</span>(j &lt; w[i]) dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">        <span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一维数组方式">1.3.2 一维数组方式</h3>
<h4 id="数组含义-1">数组含义</h4>
<p><code>dp[j]</code>表示<strong>背包容量为j</strong>时的最大价值</p>
<h4 id="状态转移方程-1">状态转移方程</h4>
<ul>
<li>当<code>j&gt;=w[i]</code>时，即当前物品的重量小于等于背包容量，此时可以选择<strong>装入或者不装入</strong>背包，因此<code>dp[j]=max(dp[j],dp[j-w[i]]+v[i])</code></li>
</ul>
<h4 id="通用代码-1">通用代码</h4>
<p><strong>1. 初始化</strong></p>
<p>可以不用初始化（全初始化为0）</p>
<p><strong>2. 遍历顺序</strong></p>
<p><strong>必须</strong>采用先<strong>物品</strong>后<strong>背包</strong>的遍历顺序</p>
<p><strong>3. 背包的遍历顺序</strong></p>
<p>由于要求每个物品只能被选择一次，且状态转移方程是由前面的状态推导出来的</p>
<p>因此背包的遍历顺序<strong>必须</strong>是<strong>逆序</strong>的，即从大到小遍历，否则会出现<strong>重复选择</strong>的情况</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;<span class="comment">//物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= w[i]; --j)&#123;<span class="comment">//背包</span></span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二完全背包问题">二、完全背包问题</h1>
<h2 id="适用场景-1">2.1 适用场景</h2>
<p>完全背包问题的特点是：<strong>每个物品可以被选择多次</strong>，两种状态即<strong>装入背包或者不装入背包</strong></p>
<h2 id="问题描述-1">2.2 问题描述</h2>
<p>有一个<strong>背包</strong>，其容量为<code>m</code></p>
<p>现有<code>n</code>个<strong>物品</strong>，每个物品的重量为<code>w[i]</code>，价值为<code>v[i]</code></p>
<p>现在需要选择<strong>一些可重复的物品</strong>装入背包，使得背包中物品的总价值最大。</p>
<h2 id="通用代码思路-一维数组方式">2.3 通用代码思路-一维数组方式</h2>
<h3 id="数组含义-2">2.3.1 数组含义</h3>
<p><code>dp[j]</code>表示<strong>背包容量为j</strong>时的最大价值</p>
<h3 id="状态转移方程-2">2.3.2 状态转移方程</h3>
<ul>
<li>当<code>j&gt;=w[i]</code>时，即当前物品的重量小于等于背包容量，此时可以选择<strong>装入或者不装入</strong>背包，因此<code>dp[j]=max(dp[j],dp[j-w[i]]+v[i])</code></li>
</ul>
<h3 id="通用代码-2">2.3.3 通用代码</h3>
<p><strong>1. 初始化</strong></p>
<p>可以不用初始化（全初始化为0）</p>
<p><strong>2. 遍历顺序</strong></p>
<p>可以采用先<strong>物品</strong>后<strong>背包</strong></p>
<p>也可以采用先<strong>背包</strong>后<strong>物品</strong></p>
<p><strong>3. 背包的遍历顺序</strong></p>
<p>由于要求每个物品可以被选择多次，所以允许前面的状态中也包含该物品</p>
<p>因此背包的遍历顺序<strong>必须</strong>是<strong>正序</strong>的，即从小到大遍历</p>
<ul>
<li><p>先遍历<strong>物品</strong>，再遍历<strong>背包</strong>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;<span class="comment">//物品</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = w[i]; j &lt;= m; ++j)&#123;<span class="comment">//背包</span></span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>先遍历<strong>背包</strong>，再遍历<strong>物品</strong>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = w[i]; j &lt;= m; ++j)&#123;<span class="comment">//背包</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;<span class="comment">//物品</span></span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>动手学深度学习01</title>
    <url>/2022/04/17/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A001/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>本章内容为<strong>动手学深度学习-预备知识</strong>章节</p>
</blockquote>
<blockquote>
<p>本章内容源自d2l代码包中的<code>chapter_preliminaries</code>文件夹</p>
</blockquote>
<blockquote>
<p>课程源自 <a href="https://course.d2l.ai/zh-v2/">动手学深度学习在线课程</a></p>
</blockquote>
<blockquote>
<p>代码运行在Google的<a href="https://colab.research.google.com/">Colab</a>平台中</p>
</blockquote>
<h1 id="数据操作">数据操作</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torch</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = torch.arange(15)</span><br><span class="line">print(x)</span><br><span class="line">print(x.shape)</span><br><span class="line">print(x.numel())</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = x.reshape(3,5)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(torch.ones((2,3,4)))</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 二维数据</span><br><span class="line">y = torch.tensor([[2,1,4,3], [1,2,3,4], [4,3,2,1]])</span><br><span class="line">print(y)</span><br><span class="line">print(y.size())</span><br><span class="line"></span><br><span class="line"># 三维数据</span><br><span class="line">y = torch.tensor([[[2,1,4,3], [1,2,3,4], [4,3,2,1]]])</span><br><span class="line">print(y)</span><br><span class="line">print(y.size())</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = torch.arange(12, dtype=torch.float32).reshape((3,4))  # 【3,4】</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">y = torch.tensor([[2.0,1,4,3], [1,2,3,4], [4,3,2,1]]) # 【3,4】</span><br><span class="line">torch.cat((x, y), dim=0), torch.cat((x, y), dim=1) # dim=0,按行合并两个矩阵; dim=1, 按列合并两个矩阵</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x.sum()</span><br></pre></td></tr></table></figure>
<h2 id="广播机制--同一纬度不同大小矩阵的相加机制">广播机制--同一纬度不同大小矩阵的相加机制</h2>
<p>如对于一个二维的（3,1）大小矩阵跟（1,2）大小矩阵</p>
<p>会把（3,1）扩展出相同的一列变为（3,2）</p>
<p>同理（1,2）扩展为（3,2）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = torch.arange(3).reshape((3,1))</span><br><span class="line">y = torch.arange(2).reshape((1,2))</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line">print(x+y)</span><br></pre></td></tr></table></figure>
<h2 id="python矩阵拆分">Python矩阵拆分</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = torch.arange(12).reshape((3,4))</span><br><span class="line">print(x)</span><br><span class="line">print(x[-1]) # 取出倒数第一行数据</span><br><span class="line">print(x[:,-1]) # 取出倒数第一列数据</span><br><span class="line">print(x[0:2]) # 选取前两行</span><br><span class="line">print(x[2,3])</span><br></pre></td></tr></table></figure>
<h2 id="内存分配问题">内存分配问题</h2>
<p>id()相当于c语言的指针</p>
<p>元素赋值不改变地址，整个数组赋值会改变地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = torch.arange(12).reshape((3,4))</span><br><span class="line">y = torch.arange(12).reshape((3,4))</span><br><span class="line"></span><br><span class="line">before = id(y)</span><br><span class="line">y[:] = y+x</span><br><span class="line">print(id(y)==before)</span><br><span class="line">y = y-x          # 对y进行操作会改变地址内容，产生了一个新的y</span><br><span class="line">print(id(y)==before)</span><br><span class="line"></span><br><span class="line">z = torch.zeros_like(y)</span><br><span class="line">print(&#x27;id(z):&#x27;, id(z))</span><br><span class="line">z[:]= x + y       # 对z进行操作不会改变地址内容，是对元素进行赋值</span><br><span class="line">print(&#x27;id(z):&#x27;, id(z))</span><br></pre></td></tr></table></figure>
<h2 id="更换张量">更换张量</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A = x.numpy()     # 转换为Numpy的张量</span><br><span class="line">B = torch.tensor(A)  # 转换为torch的张量</span><br><span class="line">print(type(A), type(B))</span><br><span class="line"></span><br><span class="line">a = torch.tensor([3.5])</span><br><span class="line">print(a, a.item(), float(a), int(a)) # 转换为item标量</span><br></pre></td></tr></table></figure>
<h1 id="数据预处理">数据预处理</h1>
<h2 id="创建写入csv文件----os">创建、写入CSV文件 -- os</h2>
<ul>
<li><p>创建文件夹：<code>os.makedirs()</code></p></li>
<li><p>创建csv文件：<code>os.path.join()</code></p></li>
<li><p>写入内容：</p>
<p><code>with open() as f:</code></p>
<p><code>f.write()</code></p></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">os.makedirs(os.path.join(&#x27;..&#x27;, &#x27;data&#x27;), exist_ok=True)</span><br><span class="line">data_file = os.path.join(&#x27;..&#x27;, &#x27;data&#x27;, &#x27;house_tiny.csv&#x27;)</span><br><span class="line">with open(data_file, &#x27;w&#x27;) as f:</span><br><span class="line">  f.write(&#x27;NumRooma,Alley,Price\n&#x27;) # 列名</span><br><span class="line">  f.write(&#x27;NA,Pave,127500\n&#x27;)</span><br><span class="line">  f.write(&#x27;2,NA,106000\n&#x27;)</span><br><span class="line">  f.write(&#x27;4,NA,178100\n&#x27;)</span><br><span class="line">  f.write(&#x27;NA,NA,140000\n&#x27;)</span><br><span class="line"></span><br><span class="line">print(data_file)</span><br></pre></td></tr></table></figure>
<h2 id="加载csv原数据集----pandas">加载csv原数据集 -- pandas</h2>
<ul>
<li><p>read读入文件：</p>
<p><code>pd.read_csv()</code></p></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd.read_csv(data_file)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>
<h2 id="处理缺失数据----.fillna插值">处理缺失数据 --
.fillna（插值）</h2>
<p>常用插值或删除处理缺失数据</p>
<ul>
<li><p>取csv表格的某一行或列：</p>
<p><code>.iloc[ ]</code></p></li>
<li><p>字符串缺失</p>
<p>字符串缺失的可以将字符串分为多个类别，用1-0表示</p>
<p><code>.get_dummies()</code></p></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input, output = data.iloc[:, 0:2], data.iloc[:, 2]</span><br><span class="line">input = input.fillna(input.mean()) # 用均值插值</span><br><span class="line">input</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input = pd.get_dummies(input, dummy_na=True)</span><br><span class="line">input</span><br></pre></td></tr></table></figure>
<h2 id="将csv数值型表格转换成tensor格式">将csv数值型表格转换成tensor格式</h2>
<ul>
<li><p>需要在csv表格nan数据都被处理成数值后才可以转换</p>
<p><code>torch.tensor()</code></p></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x, y = torch.tensor(input.values), torch.tensor(output.values)</span><br><span class="line">print(x, y)</span><br><span class="line">print(x.dim()) # 查看tensor的维度</span><br></pre></td></tr></table></figure>
<h1 id="线性代数">线性代数</h1>
<h2 id="矩阵转置">矩阵转置</h2>
<ul>
<li><p>对称矩阵的转置等于本身</p>
<p><code>.T</code></p></li>
<li><p>克隆张量 -- 重新分配内存</p>
<p>B=A是建立view,改变B时A也会变</p>
<p><code>B=A.clone()</code>是重新分配内存，改变B时A不会改变</p></li>
<li><p>axis</p>
<p>axis=0是按行（第一维度）处理，axis=1是按列（第二维度）处理</p></li>
</ul>
<h2 id="范数计算">范数计算</h2>
<ul>
<li><p>向量的<span class="math inline">\(L_2\)</span>范式 --
求元素的平方和的平方根</p>
<p><code>torch.norm()</code></p></li>
<li><p>向量的<span class="math inline">\(L_1\)</span>范式 --
求元素的绝对值之和</p>
<p><code>torch.abs(u).sum()</code></p></li>
<li><p>矩阵的<span class="math inline">\(F\)</span>范数 --
矩阵元素的平方和的平方根</p>
<p><code>torch.norm(u)</code></p></li>
</ul>
<h2 id="计算和均值">计算和、均值</h2>
<ul>
<li><p>求和</p>
<p><code>.sum(axis=)</code></p></li>
<li><p>求均值</p>
<p><code>.mean(axis=)</code></p></li>
</ul>
<h2 id="矩阵乘法">矩阵乘法</h2>
<ul>
<li><p>矩阵×向量</p>
<p><code>torch.mv()</code></p></li>
<li><p>矩阵×矩阵</p>
<p><code>torch.mm()</code></p></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = torch.arange(12).reshape(3,4)</span><br><span class="line">print(x)</span><br><span class="line">print(x.T)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">y = x.clone()</span><br><span class="line">y</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u = torch.tensor([3.0,4.0])</span><br><span class="line">torch.norm(u), torch.abs(u).sum()</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A = torch.arange(20*2).reshape(2,5,4)</span><br><span class="line">A, A.sum(axis=0), A.sum(axis=1), A.sum(axis=2), A.sum(axis=[0, 1])</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A = torch.arange(20).reshape(5, 4) # 5*4的矩阵</span><br><span class="line">B = torch.arange(4) </span><br><span class="line"></span><br><span class="line">print(A)</span><br><span class="line">print(B)</span><br><span class="line">print(torch.mv(A, B))</span><br><span class="line"></span><br><span class="line">B = torch.arange(12).reshape(4,3)</span><br><span class="line">print(B)</span><br><span class="line">print(torch.mm(A, B))</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A = torch.arange(20).reshape(5, 4) # 5*4的矩阵</span><br><span class="line">B = torch.arange(4) </span><br><span class="line">len(A), len(B), A.numel(), B.numel()</span><br></pre></td></tr></table></figure>
<h1 id="微积分">微积分</h1>
<p>标量对列向量求导：求解结果转置为行向量</p>
<p>列向量对标量求导：求解结果为列向量</p>
<p>由于loss通常是标量，因此深度学习中一般对标量进行求导，而不对矩阵或向量求导</p>
<h2 id="自动微分">自动微分</h2>
<ul>
<li><p>存储梯度</p>
<p><code>requires_grad_(True)</code></p></li>
<li><p>反向传播函数计算y关于x的每个分量的梯度</p>
<p><code>.backward()</code></p></li>
<li><p>清除x累积的梯度，将梯度清为0</p>
<p><code>.grad.zero_()</code></p></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = torch.arange(4.0, requires_grad=True)</span><br><span class="line"># x.requires_grad_(True)</span><br><span class="line">x.grad</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">y = 2 * torch.dot(x, x) # y=x^2</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">y.backward()</span><br><span class="line">x.grad == 4 * x</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x.grad.zero_()  # 清除累积的梯度记录</span><br><span class="line">y = x.sum()</span><br><span class="line">y.backward()</span><br><span class="line">x.grad == 1</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x.grad.zero_()</span><br><span class="line">y = x * x</span><br><span class="line">y.sum().backward()</span><br><span class="line">x.grad == 2 * x</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x.grad.zero_()</span><br><span class="line">y = x * x</span><br><span class="line">u = y.detach() # 此时u的值=y，但是不与x建立传递关系，仅表示为普通常数</span><br><span class="line">z = u * x</span><br><span class="line">z.sum().backward()</span><br><span class="line">x.grad == u</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def f(a):</span><br><span class="line">  b = 2 * a</span><br><span class="line">  while b.norm()&lt;1000:</span><br><span class="line">    b = b * 2</span><br><span class="line">  if b.sum()&gt;0:</span><br><span class="line">    c = b</span><br><span class="line">  else:</span><br><span class="line">    c = 100 * b</span><br><span class="line">  return c</span><br><span class="line"></span><br><span class="line">a = torch.rand(size=(), requires_grad=True)</span><br><span class="line">d = f(a)</span><br><span class="line">d.backward()</span><br><span class="line">a.grad == d/a</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习算法</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>大顶堆/小顶堆（CPP）</title>
    <url>/2024/05/15/%E5%A4%A7%E9%A1%B6%E5%A0%86-%E5%B0%8F%E9%A1%B6%E5%A0%86%EF%BC%88CPP%EF%BC%89/</url>
    <content><![CDATA[<h1 id="一priority_queue">一、priority_queue</h1>
<p>C++中实现大/小顶堆的数据结构是<code>priority_queue</code>，其<strong>默认是大顶堆</strong>，如果要实现小顶堆，需要传入第三个参数<code>greater&lt;int&gt;</code>。</p>
<p><code>priority_queue</code>结构有三个传参：</p>
<ul>
<li>第一个参数<strong>type</strong>：进行排序的数据类型</li>
<li>第二个参数<strong>container</strong>：底层存储根堆的容器类型，默认是<code>vector</code>，且只能是<strong>数组类型</strong>，所以不能是<code>list</code>等</li>
<li>第三个参数<strong>compare</strong>：比较函数，用于实现大顶堆或小顶堆</li>
</ul>
<p>函数原型： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// priority_queue&lt;type, container, container&gt;;</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;<span class="comment">//小顶堆</span></span><br></pre></td></tr></table></figure></p>
<h1 id="二比较函数的设计">二、比较函数的设计</h1>
<p><code>priority_queue</code>如果要自定义比较逻辑，也是通过传入第三个参数(比较函数)来实现的。</p>
<p><code>sort</code>的比较函数中</p>
<ul>
<li>如果要实现<strong>升序</strong>，比较函数<code>return a &lt; b</code></li>
<li>如果要实现<strong>降序</strong>，比较函数<code>return a &gt; b</code></li>
</ul>
<p>而<code>priority_queue</code>中</p>
<ul>
<li>如果要实现<strong>大根堆（类似升序）</strong>，比较函数<code>return a[0] &lt; b[0]</code></li>
<li>如果要实现<strong>小根堆（类似降序）</strong>，比较函数<code>return a[0] &gt; b[0]</code></li>
</ul>
<h2 id="大根堆less与小根堆greater">2.1 大根堆less与小根堆greater</h2>
<p>通过两个比较函数<code>less</code>和<code>greater</code>实现大/小根堆，分别用于实现大根堆和小根堆。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; vec = &#123; &#123;<span class="number">11</span>, <span class="number">13</span>&#125;, &#123;<span class="number">12</span>, <span class="number">14</span>&#125;, &#123;<span class="number">11</span>, <span class="number">12</span>&#125;, &#123;<span class="number">15</span>, <span class="number">16</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大根堆less：先按照第一个元素排序，再按照第二个元素排序</span></span><br><span class="line">    priority_queue&lt;vector&lt;<span class="keyword">int</span>&gt;, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;, less&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; big_heap;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : vec) &#123;</span><br><span class="line">        big_heap.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//小根堆greater：先按照第一个元素排序，再按照第二个元素排序</span></span><br><span class="line">    priority_queue&lt;vector&lt;<span class="keyword">int</span>&gt;, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;, greater&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&gt; small_heap;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : vec) &#123;</span><br><span class="line">        small_heap.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;大根堆：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (!big_heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> x = big_heap.<span class="built_in">top</span>();</span><br><span class="line">        big_heap.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; x[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; x[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;小根堆：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (!small_heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> x = small_heap.<span class="built_in">top</span>();</span><br><span class="line">        small_heap.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; x[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; x[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义比较函数">2.2 自定义比较函数</h2>
<p>如果要实现自定义比较函数，可以通过<strong>重写仿函数</strong>来实现。</p>
<ul>
<li>大根堆：<code>return a[0] &lt; b[0]</code></li>
<li>小根堆：<code>return a[0] &gt; b[0]</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//大根堆</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmpBig</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] == b[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &lt; b[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小根堆</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmpSmall</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] == b[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &gt; b[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; vec = &#123; &#123;<span class="number">11</span>, <span class="number">13</span>&#125;, &#123;<span class="number">12</span>, <span class="number">14</span>&#125;, &#123;<span class="number">11</span>, <span class="number">12</span>&#125;, &#123;<span class="number">15</span>, <span class="number">16</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大根堆</span></span><br><span class="line">    priority_queue&lt;vector&lt;<span class="keyword">int</span>&gt;, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;, cmpBig&gt; big_heap;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : vec) &#123;</span><br><span class="line">        big_heap.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//小根堆</span></span><br><span class="line">    priority_queue&lt;vector&lt;<span class="keyword">int</span>&gt;, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;, cmpSmall&gt; small_heap;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : vec) &#123;</span><br><span class="line">        small_heap.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;大根堆：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (!big_heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> x = big_heap.<span class="built_in">top</span>();</span><br><span class="line">        big_heap.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; x[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; x[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;小根堆：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (!small_heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> x = small_heap.<span class="built_in">top</span>();</span><br><span class="line">        small_heap.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; x[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; x[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三真题">三、真题</h1>
<p>leetcode 347 <a href="https://programmercarl.com/0347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">前
K 个高频元素</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// vector&lt;int&gt; topKFrequent(vector&lt;int&gt;&amp; nums, int k) &#123;</span></span><br><span class="line">    <span class="comment">//     unordered_map&lt;int, int&gt; m_map;</span></span><br><span class="line">    <span class="comment">//     map&lt;int, vector&lt;int&gt;&gt; topK_map;//模拟单调递减栈</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     //构建频率map</span></span><br><span class="line">    <span class="comment">//     for(int i:nums)&#123;</span></span><br><span class="line">    <span class="comment">//         m_map[i]++;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     //构建以频率为key的map</span></span><br><span class="line">    <span class="comment">//     for(auto it = m_map.begin(); it != m_map.end(); it++)&#123;</span></span><br><span class="line">    <span class="comment">//         auto kv = *it;</span></span><br><span class="line">    <span class="comment">//         topK_map[kv.second].push_back(kv.first);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     //输出topk:从低到高入队列的</span></span><br><span class="line">    <span class="comment">//     queue&lt;int&gt; topK_que;</span></span><br><span class="line">    <span class="comment">//     for(auto it = topK_map.begin(); it != topK_map.end(); ++it)&#123;</span></span><br><span class="line">    <span class="comment">//         auto kv = *it;</span></span><br><span class="line">    <span class="comment">//         vector&lt;int&gt; vec = kv.second;</span></span><br><span class="line">    <span class="comment">//         for(int tmp:vec)&#123;</span></span><br><span class="line">    <span class="comment">//             if(topK_que.size() &lt; k) topK_que.push(tmp);</span></span><br><span class="line">    <span class="comment">//             else&#123;//放不下了，需要弹出数据</span></span><br><span class="line">    <span class="comment">//                 topK_que.pop();</span></span><br><span class="line">    <span class="comment">//                 topK_que.push(tmp);</span></span><br><span class="line">    <span class="comment">//             &#125;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     //存入vec中</span></span><br><span class="line">    <span class="comment">//     vector&lt;int&gt; res;</span></span><br><span class="line">    <span class="comment">//     while(!topK_que.empty())&#123;</span></span><br><span class="line">    <span class="comment">//         res.push_back(topK_que.front());</span></span><br><span class="line">    <span class="comment">//         topK_que.pop();</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     return res;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*解法2：通过小根堆的方式实现*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;a, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m_map;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, cmp&gt; small_heap;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建频率map</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:nums)&#123;</span><br><span class="line">            m_map[i]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = m_map.<span class="built_in">begin</span>(); it != m_map.<span class="built_in">end</span>(); ++it)&#123;</span><br><span class="line">            small_heap.<span class="built_in">push</span>(*it);</span><br><span class="line">            <span class="keyword">if</span>(small_heap.<span class="built_in">size</span>() &gt; k)&#123;</span><br><span class="line">                small_heap.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入vec中</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">while</span>(!small_heap.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">auto</span> kv = small_heap.<span class="built_in">top</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(kv.first);</span><br><span class="line">            small_heap.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>快捷键方式整理</title>
    <url>/2022/11/24/%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="一office快捷键">一、Office快捷键</h1>
<h2 id="word">1.1 word</h2>
<p><strong>1）公式等号对齐</strong></p>
<p>在想对齐的等号左边按<code>Shift+Enter</code>实现换行</p>
<p><img src="/2022/11/24/%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/shift enter.png" width="50%" heigh="50%"></p>
<p>在上下两个等式左边均右键选择<code>在此字符处对齐</code></p>
<p><img src="/2022/11/24/%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/align according to equal mark.png" width="50%" heigh="50%"></p>
<p>完成，注意对齐方式选择<code>两端对齐</code></p>
<p><img src="/2022/11/24/%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/align.png" width="50%" heigh="50%"></p>
<p><strong>2）图片自动编号</strong></p>
<p>通过<strong>题注、交叉引用、更新域</strong>实现</p>
<p>参考：<a href="https://blog.csdn.net/diaodaa/article/details/106893162">图片自动编号</a></p>
<p><strong>3）公式编号</strong></p>
<p>参考：<a href="https://blog.csdn.net/Flag_ing/article/details/112966671">公式编号（用方法三）</a></p>
<ul>
<li>其中<strong>5、插入题注</strong>步骤中，应该选中整个公式一行的表格框才可以右键找到<strong>插入题注</strong>选项</li>
<li>表格中的文本需要设置成单倍行距</li>
</ul>
<p><strong>4）多张图片并排</strong></p>
<p>参考：<a href="https://blog.csdn.net/weixin_42186456/article/details/104411843">Word中插入多张图片/论文图片排版的方法</a></p>
<p><strong>5）参考文献引用</strong></p>
<p>参考：<a href="https://b23.tv/bZqMlOD">参考文献格式调整-视频</a></p>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/379878083">参考文献连续引用</a></p>
<h1 id="二vscode">二、vscode</h1>
<ul>
<li><p>python函数快速注释</p>
<p>输入<code>"""</code>后回车</p></li>
<li><p>选中区域整体左移</p>
<p><code>ctrl+[</code></p></li>
<li><p>公式编号</p>
<ul>
<li>在公式内末尾加上<code>#(编号)</code>再按回车即可</li>
</ul></li>
<li><p>切换.cpp和.h文件</p>
<p><code>alt+o</code></p></li>
</ul>
<h1 id="三visual-studio快捷键">三、Visual Studio快捷键</h1>
<ul>
<li><p>切换.cpp和.h文件</p>
<p><code>Ctrl+K</code>+<code>Ctrl+O</code></p></li>
<li><p>选中下一个相同的单词</p>
<p><code>alt+shift+.</code></p></li>
<li><p>选中所有相同的单词</p>
<p><code>Ctrl+Shift+;</code></p></li>
<li><p>格式化选中的代码</p>
<p><code>Ctrl+K</code>+<code>Ctrl+D</code></p></li>
</ul>
<h1 id="四windows快捷键">四、Windows快捷键</h1>
<ul>
<li>多窗口管理
<ul>
<li>参考：<a href="https://blog.csdn.net/lsllll44/article/details/110782643">拼接多个窗口，虚拟桌面等</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/269223525">虚拟桌面可以显示拼接窗口</a></li>
</ul></li>
</ul>
<h1 id="五macos快捷键">五、MacOS快捷键</h1>
<ul>
<li>多桌面左右切换：ctrl + &lt;- / -&gt;</li>
<li>多桌面选择快捷键：ctrl + ↑ / ↓</li>
<li>进入文件所在文件夹：com + R</li>
<li>文件夹后退 / 前进：com + [ / ]</li>
<li>与 win + L 类似的锁屏：ctrl + com + Q</li>
<li>上下查看图片：用空格打开图片</li>
<li>切换键盘：ctrl + option + space</li>
</ul>
]]></content>
      <categories>
        <category>重装-环境配置-计算机</category>
      </categories>
      <tags>
        <tag>杂货铺-休闲</tag>
      </tags>
  </entry>
  <entry>
    <title>手写操作系统1：项目环境部署</title>
    <url>/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="一所用ubuntu及虚拟机版本">一、所用ubuntu及虚拟机版本</h1>
<p>之前还尝试了在docker下安装，但是出现很多奇奇怪怪的错误，所以放弃了，直接选择在虚机下安装</p>
<h2 id="版本">版本</h2>
<p>电脑：MacBook Pro</p>
<p>虚拟机：VirtualBox 7.1.8</p>
<p>linux 版本：ubuntu 20.04.6</p>
<h2 id="虚拟机配置">虚拟机配置</h2>
<p>内存：8192M</p>
<p>硬盘：50G</p>
<p>处理器：4</p>
<h2 id="资源分享">资源分享</h2>
<p><code>bochs-2.6.tar.gz</code>在下面的夸克网盘中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我用夸克网盘给你分享了「share_tinyOS」，点击链接或复制整段内容，打开「夸克APP」即可获取。</span><br><span class="line">/~9c4837w2hG~:/</span><br><span class="line">链接：https://pan.quark.cn/s/335eca91431f</span><br><span class="line">提取码：4JT8</span><br></pre></td></tr></table></figure>
<h1 id="二bochs模拟器配置">二、bochs模拟器配置</h1>
<p>首先用该链接下载<a href="https://sourceforge.net/projects/bochs/files/bochs/2.6.8/bochs-2.6.8.tar.gz/download">bochs-2.6.tar.gz</a></p>
<p>先解压：tar -zxvf bochs-2.6.tar.gz</p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/1 Ubuntu中解压.png"></p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2 Ubuntu中解压结果.png"></p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/3 config路径.png"></p>
<p>终端cd
到<code>bochs-2.6</code>文件夹中，执行<code>./configure</code>进行config，其中<code>--prefix=</code>后面路径中的<code>akira</code>修改为自己的用户名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">  --prefix=/home/akira/bochs \</span><br><span class="line">  --enable-debugger \</span><br><span class="line">  --enable-disasm \</span><br><span class="line">  --enable-iodebug \</span><br><span class="line">  --enable-x86-debugger \</span><br><span class="line">  --with-x \</span><br><span class="line">  --with-x11 \</span><br><span class="line">  LDFLAGS=&quot;-lpthread&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>第一个报错解决：<code>sudo apt-get -y install gcc</code>，解决方案是装一个编译器</p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/5 第一个报错&解决指令.png"></p></li>
<li><p>第二个报错解决：<code>sudo apt-get install build-essential</code></p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/5 第二个报错&解决指令.png"></p></li>
</ul>
<p>执行<code>make</code>和<code>make install</code></p>
<ul>
<li><p>出现报错，解决方法为：<code>sudo apt-get install -y libgtk2.0-dev</code>，然后重新执行<code>./configure</code>和<code>make</code></p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/6 make第一个报错&解决指令.png"></p></li>
</ul>
<p>成功执行完<code>make</code>和<code>make install</code>后，生成<code>bochs</code>文件夹，该文件夹下可以进行我们的内核编写、内核编译运行、起虚拟机等一系列学习操作。</p>
<h1 id="三运行bochs">三、运行bochs</h1>
<h2 id="配置bochsrc.disk">1. 配置<code>bochsrc.disk</code></h2>
<p>由于<code>boxsrc.disk</code>文件需要用到下面生成的镜像文件路径，因此将该配置放在<a href="#附录-bochs配置文件说明">附录中</a></p>
<h2 id="运行bochs无启动盘">2. 运行bochs：无启动盘</h2>
<p>在<code>bochs</code>路径下执行<code>bin/bochs</code>：</p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/8 运行bochs生成窗口.png"></p>
<p>之后输入<code>c</code>进入模拟器，但是显示没有启动盘。</p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/9 运行bochs输入c.png"></p>
<p>Bochs 启动时会读取配置文件（通常是 bochsrc），其中指定了启动盘（boot
drive）镜像的位置。如果没有正确配置或指定的镜像文件不存在，就会出现<strong>没有启动盘</strong>的问题。</p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/10 运行bochs没有bootable.png"></p>
<p>因此需要用 <code>bximage</code> 创建 <code>.img</code> 镜像并正确配置
<code>bochsrc</code>。</p>
<h2 id="创建虚拟盘">3. 创建虚拟盘</h2>
<p><code>bin/bximage</code>
是一个虚拟磁盘镜像生成工具，生成的虚拟磁盘后缀名为<code>.img</code>，下面我们将运行<code>bin/bximage</code>
创建一个虚拟磁盘镜像，根据运行后的指引一步步生成master镜像：</p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/11 bximage根据指引一步步生成master镜像.png"></p>
<p>创建成功后，在<code>bin</code>目录下生成了<code>master-hd60M.img</code>，创建完并修改配置文件<code>bochsrc.disk</code>，将虚拟的镜像硬盘文件的路径添加进去，再次启动模拟器：</p>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/12 运行启动盘配置后.png"></p>
<p>此时只有master盘，还是无法读取盘，但是报错内容跟未加磁盘前不一样了：</p>
<p>上一个报错截图中shell的报错内容是<code>Boot failed:could not read the boot disk</code></p>
<p>而此次报错截图内容是<code>Boot failed:not a bootable device</code></p>
<h2 id="编写mbr文件作为master的主引导程序">4.
编写MBR文件作为master的主引导程序</h2>
<p>具体操作见文档另一篇博文<a href="https://akirazheng.github.io/2025/08/23/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F2%EF%BC%9A%E7%BC%96%E5%86%99MBR%E4%B8%BB%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA/">手写操作系统2：编写MBR主引导扇区</a></p>
<h1 id="四ubuntu设置开启ssh">四、ubuntu设置开启ssh</h1>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/qq_45164331/article/details/122533327">ubuntu20.04开启SSH远程登录</a></p>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/442884471">Windows下VSCode连接Ubuntu远程开发</a>、<a href="https://zhuanlan.zhihu.com/p/143146239">mac下vscode连接ssh</a></p>
</blockquote>
<p>本机写得ssh config文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host 172.16.33.128</span><br><span class="line">  HostName 172.16.33.128</span><br><span class="line">  User akira</span><br></pre></td></tr></table></figure>
<p><img src="/2024/11/25/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/13 ssh的IP.png"></p>
<p>连接ssh需要先把本机的代理关了，解决办法是：</p>
<h2 id="附录-bochs配置文件说明">附录-bochs配置文件说明</h2>
<p>在<code>./bochs/</code>路径下创建<code>bochsrc.disk</code>文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim bochs.disk   #创建配置文件(配置文件存放位置和文件名可以随意)</span><br><span class="line"></span><br><span class="line">######################  配置文件开始 ####################</span><br><span class="line">#第一步，首先设置bochs在运行过程中能够使用的内存，本例为32MB</span><br><span class="line">#关键字为：megs</span><br><span class="line"></span><br><span class="line">megs: 32</span><br><span class="line"></span><br><span class="line">#第二步，设置对应真实机器的BIOS和VGA BIOS</span><br><span class="line">#对应两个关键字为: romimage 和vgaromiage</span><br><span class="line"></span><br><span class="line">romimage: file=/实际路径/bochs/share/bochs/BIOS-bochs-latest</span><br><span class="line">vgaromimage: file=/实际路径/bochs/share/bochs/VGABIOS-lgpl-latest</span><br><span class="line"></span><br><span class="line">#第三步，选择启动盘符</span><br><span class="line">boot: disk        #从硬盘启动</span><br><span class="line"></span><br><span class="line">#第四步，设置日志文件的输出</span><br><span class="line">log: bochs.out</span><br><span class="line"></span><br><span class="line">#第五步，开启或关闭某些功能</span><br><span class="line">#下面是关闭鼠标，并打开键盘</span><br><span class="line">mouse: enabled=0</span><br><span class="line">keyboard_mapping: enabled=1,map=/实际路径/bochs/share/bochs/keymaps/x11-pc-us.map</span><br><span class="line"></span><br><span class="line">#硬盘设置</span><br><span class="line">ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14</span><br><span class="line">ata0-master: type=disk, path=&quot;hd60m.img&quot;, mode=flat, cylinders=121, heads=16, spt=63</span><br><span class="line">######################  配置文件结束 ####################</span><br></pre></td></tr></table></figure>
<p>最后，以本人为例，编写的<code>disk</code>文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">megs : 32</span><br><span class="line"></span><br><span class="line">romimage: file=/home/akira/bochs/share/bochs/BIOS-bochs-latest</span><br><span class="line">vgaromimage: file=/home/akira/bochs/share/bochs/VGABIOS-lgpl-latest</span><br><span class="line"></span><br><span class="line">boot: disk</span><br><span class="line"></span><br><span class="line">log: bochs.out</span><br><span class="line"></span><br><span class="line">mouse:enabled=0</span><br><span class="line">keyboard:keymap=/home/akira/bochs/share/bochs/keymaps/x11-pc-us.map</span><br><span class="line"></span><br><span class="line">ata0:enabled=1,ioaddr1=0x1f0,ioaddr2=0x3f0,irq=14</span><br><span class="line">ata0-master: type=disk, path=&quot;master-hd60M.img&quot;, mode=flat,cylinders=121,heads=16,spt=63</span><br><span class="line">#ata0-slave:  type=disk, path=&quot;hd80M.img&quot;, mode=flat,cylinders=162,heads=16,spt=63</span><br><span class="line"></span><br><span class="line">#gdbstub:enabled=1,port=1234,text_base=0,data_base=0,bss_base=0</span><br></pre></td></tr></table></figure>
<h1 id="问题处理">问题处理</h1>
<ol type="1">
<li><p>无法打开终端，一直转圈</p>
<p>解决方法：<a href="https://www.cnblogs.com/lifuqiang/articles/17167367.html">VirtualBox_Ubuntu22.04
Terminal无法打开</a>，其中nano用Ctrl+X 保存并退出</p></li>
<li><p>找不到root密码</p>
<p>解决办法：在刚开始创建虚拟机时就输入密码了，当前密码为akira</p></li>
<li><p>virtualbox共享文件</p>
<p>解决办法：1）<a href="https://zhuanlan.zhihu.com/p/25148068">安装VBoxGuestAdditions</a>
2）<a href="https://docs.pingcode.com/baike/3244459">打开拖放功能</a></p></li>
</ol>
<h1 id="参考">参考</h1>
<blockquote>
<p>《操作系统真象还原》</p>
<p><a href="https://github.com/Cooi-Boi/Tiny-OS?tab=readme-ov-file">Tiny-OS的项目介绍:大佬的github学习仓以及他的csdn学习笔记链接</a></p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>排序实现</title>
    <url>/2024/04/03/%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="一选择排序">一、选择排序</h2>
<p>选择排序是一种简单直观的排序算法。它的工作原理如下：</p>
<ul>
<li>遍历数组以[i,end]作为未排序序列，找到最小值的下标minIndex。</li>
<li>不断重复：在当前轮次未排序序列中找到最小（大）元素，存放到当前轮次排序序列的起始位置。</li>
</ul>
<h3 id="代码实现">1.1 代码实现</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//选择排序</span></span><br><span class="line">	<span class="keyword">if</span> (vec.<span class="built_in">size</span>() == <span class="number">0</span> || vec.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> vec_size = vec.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec_size<span class="number">-1</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> k = i;<span class="comment">//记录当前轮次最小值的索引</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; vec_size; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (vec[j] &lt; vec[k]) &#123;</span><br><span class="line">				<span class="comment">//找到新的最小点了</span></span><br><span class="line">				k = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//一轮下来找到最小值后进行交换</span></span><br><span class="line">		<span class="built_in">swap</span>(vec[i], vec[k]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试">1.2 测试</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVec</span><span class="params">(vector&lt;T&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">23</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">1</span> &#125;;</span><br><span class="line">	<span class="built_in">selectSort</span>(vec);</span><br><span class="line">	<span class="built_in">printVec</span>(vec);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析">1.3 复杂度分析</h3>
<p><strong>时间复杂度</strong>：O(n^2)</p>
<p><strong>空间复杂度</strong>：O(1)，属于原地排序。</p>
<h2 id="二冒泡">二、冒泡</h2>
<p><strong>选择排序</strong>是记录最小值的下标，一轮下来后将最小值排在最前面；</p>
<p>而<strong>冒泡排序</strong>是一轮中不断地进行判断与两两交换，最后将<strong>最大值排在最后面</strong>。它的实现原理为：</p>
<ul>
<li>从头开始，两两比较相邻元素，如果逆序则交换。</li>
<li>重复上述步骤，直到没有任何一对数字需要比较。</li>
</ul>
<p><img src="/2024/04/03/%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/bubbleSort.png"></p>
<h3 id="代码实现-1">2.1 代码实现</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//冒泡排序</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> vec_size = vec.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">if</span> (vec_size == <span class="number">0</span> || vec_size == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = vec_size - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="comment">//从index为最末尾开始（也就是找到最大值）</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (vec[j] &gt; vec[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="built_in">swap</span>(vec[j], vec[j + <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试-1">2.2 测试</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">23</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">1</span> &#125;;</span><br><span class="line">	<span class="built_in">bubbleSort</span>(vec);</span><br><span class="line">	<span class="built_in">printVec</span>(vec);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="优化">2.3 优化</h3>
<ul>
<li>如果某一轮下来<strong>没有发生交换</strong>，说明<strong>已经有序</strong>，可以提前结束排序。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//冒泡排序</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> vec_size = vec.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">if</span> (vec_size == <span class="number">0</span> || vec_size == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = vec_size - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="comment">//从index为最末尾开始（也就是找到最大值）	</span></span><br><span class="line">		<span class="keyword">bool</span> swapFlag = <span class="literal">false</span>; <span class="comment">//记录当前轮有没有发生了交换</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (vec[j] &gt; vec[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="built_in">swap</span>(vec[j], vec[j + <span class="number">1</span>]);</span><br><span class="line">				swapFlag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//优化：一轮下来没有发生交换，</span></span><br><span class="line">		<span class="keyword">if</span> (!swapFlag) &#123;</span><br><span class="line">			<span class="comment">//没发生交换，已经有序了</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;轮次：&quot;</span> &lt;&lt; vec_size - i &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析-1">2.4 复杂度分析</h3>
<p>时间复杂度和空间复杂度跟选择排序一样。</p>
<p><strong>时间复杂度</strong>：O(n^2)，在优化下，若数组已经有序，时间复杂度为O(n)。</p>
<p><strong>空间复杂度</strong>：O(1)，属于原地排序。</p>
<h2 id="三插入排序">三、插入排序</h2>
<p>插入排序是一种简单直观的排序算法，其思想与扑克牌排序类似。它的工作原理如下：</p>
<ul>
<li>从第一个元素开始，该元素可以认为已经被排序。</li>
<li>取出下一个元素<code>j</code>，在已经排序的元素序列中从后向前扫描，扫描范围为<code>k=[j-1,0]</code>。</li>
<li>如果<code>vec[j] &lt; vec[k]</code>，则将<code>vec[k]</code>向后移动一个位置，直到找到前面已排序数组中第一个<code>vec[j] &gt;= vec[k]</code>。</li>
</ul>
<p><img src="/2024/04/03/%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/insertSort.png"></p>
<h3 id="代码实现-2">3.1 代码实现</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//插入排序</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> vec_size = vec.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">if</span> (vec_size == <span class="number">0</span> || vec_size == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; vec_size; i++) &#123;<span class="comment">//默认第一个数已排序</span></span><br><span class="line">		<span class="comment">//保证前i个数是已排序的</span></span><br><span class="line">		<span class="comment">//循环直到找到前i个数中第一个比其小的数</span></span><br><span class="line">		<span class="keyword">int</span> val = vec[i];</span><br><span class="line">		<span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; vec[j] &gt;= val) &#123;</span><br><span class="line">			<span class="comment">//vec[j]较大，需要后移一位</span></span><br><span class="line">			vec[j + <span class="number">1</span>] = vec[j];</span><br><span class="line">			j--;</span><br><span class="line">		&#125;</span><br><span class="line">		vec[j + <span class="number">1</span>] = val;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析-2">3.2 复杂度分析</h3>
<p><strong>时间复杂度</strong>：O(n^2)，在数组本身已经有序的情况下，时间复杂度为O(n)。</p>
<p><strong>空间复杂度</strong>：O(1)，属于原地排序。</p>
<h2 id="四快速排序">四、快速排序</h2>
<blockquote>
<p>快速排序是一种分治的排序算法。它通过将<strong>一个数组分成两个子数组</strong>，将左右两部分独立地不断<strong>递归</strong>实现排序。</p>
</blockquote>
<p>本文参考的是B站上的一个Up主的思路，但是代码是原创实现的。<a href="https://www.bilibili.com/video/BV1vP411g7J3/">全网最清晰快速排序，看完快排思想和代码全部通透，不通透你打我！</a></p>
<h3 id="思路">4.1 思路</h3>
<ul>
<li>选择一个基准值，将数组分成两部分，左边的值都小于基准值，右边的值都大于基准值。</li>
<li>递归地对左右两部分进行排序。</li>
</ul>
<p><img src="/2024/04/03/%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/quick1.png"></p>
<p><img src="/2024/04/03/%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/quick2.png"></p>
<p><img src="/2024/04/03/%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/quick3.png"></p>
<p><img src="/2024/04/03/%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/quick4.png"></p>
<p><img src="/2024/04/03/%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/quick5.png"></p>
<h3 id="代码实现-3">4.2 代码实现</h3>
<h4 id="根据视频实现">4.2.1 根据视频实现</h4>
<ul>
<li>先实现一个分区函数<code>quickSort_midpos</code>，将数组分成两部分，左边的值都小于基准值，右边的值都大于基准值。并返回基准值的位置用于下一轮左右两部分的递归排序。</li>
<li>递归函数<code>quickSort</code>不断调用<code>quickSort_midpos</code>对左右两部分进行排序。</li>
<li>设计静态函数<code>myQuickSortTest</code>用于测试。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myQuickSort</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">printVect</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">			cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//快速排序:递归实现</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (right &gt; left) &#123;</span><br><span class="line">			<span class="comment">//递归方法实现对arr的原地排序</span></span><br><span class="line">			<span class="comment">//printVect(arr);</span></span><br><span class="line">			<span class="keyword">int</span> pos = <span class="built_in">quickSort_midpos</span>(arr, left, right);<span class="comment">//放回当前层归类左右两边后的中心点位置</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">//继续对中心点位置的左右两边进行快排</span></span><br><span class="line">			<span class="built_in">quickSort</span>(arr, left, pos - <span class="number">1</span>);<span class="comment">//左边递归排序</span></span><br><span class="line">			<span class="built_in">quickSort</span>(arr, pos + <span class="number">1</span>, right);<span class="comment">//右边递归排序</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//快速排序:分区函数</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">quickSort_midpos</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> pos_val = arr[left];<span class="comment">//取左边第一个点作为分界线（空点，等待比起小的点填补进去</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> empty_index = left;<span class="comment">//其实不是empty，该位上的值为pos_val</span></span><br><span class="line">		<span class="keyword">while</span> (left != right) &#123;</span><br><span class="line">			<span class="keyword">if</span> (empty_index == left) &#123;</span><br><span class="line">				<span class="comment">//空值在左边，需要移动右边的点，找到比分界线小的点进行交换</span></span><br><span class="line">				<span class="keyword">if</span> (arr[right] &lt;= pos_val) &#123;</span><br><span class="line">					<span class="comment">//右边的值是比分界线小的值，需要移到empty位置</span></span><br><span class="line">					<span class="built_in">swap</span>(arr[empty_index], arr[right]);</span><br><span class="line">					<span class="comment">//更新新的空值为right</span></span><br><span class="line">					empty_index = right;</span><br><span class="line">					left++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//右边的值比分界线大，继续移动右边的指针直到找到比分界线小的值</span></span><br><span class="line">					right--;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (empty_index == right) &#123;</span><br><span class="line">				<span class="comment">//此时空值在右边，需要移动左指针，找到比分界线大的点进行交换</span></span><br><span class="line">				<span class="keyword">if</span> (arr[left] &gt;= pos_val) &#123;</span><br><span class="line">					<span class="built_in">swap</span>(arr[left], arr[empty_index]);</span><br><span class="line">					empty_index = left;</span><br><span class="line">					right--;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					left++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//将分界值传回数组中</span></span><br><span class="line">		arr[left] = pos_val;</span><br><span class="line">		<span class="keyword">return</span> right;<span class="comment">//也可传回right</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试函数</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myQuickSortTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Please input some nums(int) and use exit to stop inputting numbers:&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		vector&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> num;</span><br><span class="line">		string strIn;</span><br><span class="line">		<span class="keyword">while</span> (cin &gt;&gt; strIn) &#123;</span><br><span class="line">			<span class="keyword">if</span> (strIn == <span class="string">&quot;exit&quot;</span>) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span></span><br><span class="line">			&#123;</span><br><span class="line">				num = <span class="built_in">stoi</span>(strIn);</span><br><span class="line"></span><br><span class="line">				<span class="comment">//检查转成int后的数再转成string是否还跟原始输入的值一样，是的话则说明输入值是个整数，否则抛出一个错误</span></span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">to_string</span>(num) != strIn) &#123;</span><br><span class="line">					cout &lt;&lt; <span class="string">&quot;Error!! Please input a num(int) again!&quot;</span> &lt;&lt; endl;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					arr.<span class="built_in">push_back</span>(num);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> std::exception&amp;)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Invalid Input! Please input a num(int) again!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//vector&lt;int&gt; arr = &#123; 13,435,1,54,7,23,7,2,76,12,0 &#125;;</span></span><br><span class="line"></span><br><span class="line">		myQuickSort QS;</span><br><span class="line">		QS.<span class="built_in">quickSort</span>(arr, <span class="number">0</span>, arr.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">		QS.<span class="built_in">printVect</span>(arr);</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;调试用&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>测试</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myQuickSort.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    myQuickSort::<span class="built_in">myQuickSortTest</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="根据hello算法实现">4.2.2 根据Hello算法实现</h4>
<p><strong>Hello算法</strong>中的思想更为简单明了，在一个<code>[left,right]</code>范围内查找<code>pos</code>时的思路为：</p>
<ul>
<li>以第一个数<code>nums[left]</code>作为基准值<code>base</code>，将双指针分别赋值为<code>low = left</code>和<code>high = right</code></li>
<li>从右向左移动<code>high</code>，找到第一个小于<code>base</code>的数</li>
<li>从左向右移动<code>low</code>，找到第一个大于<code>base</code>的数</li>
<li>交换<code>nums[low]</code>和<code>nums[high]</code></li>
<li>重复上述步骤，直到<code>low</code>和<code>high</code>相遇，相遇后就剩最后一个位置需要交换，将<code>base</code>和<code>nums[low]</code>交换。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by MacBook pro on 24-9-21.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QUICKSORT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUICKSORT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">quicksort</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//将区间[left, right]内的数据根据基准值nums[left]进行划分，左边全部小于等于基准值，右边全部大于等于基准值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">position</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当前排序的范围是[left, right]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//选择基准值</span></span><br><span class="line">        <span class="keyword">int</span> baseNum = nums[left];</span><br><span class="line">        <span class="keyword">int</span> low = left;</span><br><span class="line">        <span class="keyword">int</span> high = right;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">            <span class="comment">//以刚开始的left作为基准时：必须得先从右边找起，不然会出现最后baseNum跟比baseNum大的值交换，导致左边出现比baseNum大的值</span></span><br><span class="line">            <span class="comment">//从右边找到第一个比baseNum小的数</span></span><br><span class="line">            <span class="comment">//从左边找到第一个比baseNum大的数</span></span><br><span class="line">            <span class="comment">//将找到的两个数进行交换</span></span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[high] &gt;= baseNum) --high;</span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; nums[low] &lt;= baseNum) ++low;</span><br><span class="line">            <span class="built_in">swap</span>(nums[low], nums[high]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将基准值放至分区位置</span></span><br><span class="line">        <span class="built_in">swap</span>(nums[left], nums[low]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行地柜排序</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doQuickSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//当前排序的范围是[left, right]</span></span><br><span class="line">        <span class="keyword">if</span>(left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前分区的基准值的位置</span></span><br><span class="line">        <span class="keyword">int</span> pos = <span class="built_in">position</span>(nums, left, right);</span><br><span class="line">        <span class="comment">//继续排左边的</span></span><br><span class="line">        <span class="built_in">doQuickSort</span>(nums, left, pos - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//继续排右边的</span></span><br><span class="line">        <span class="built_in">doQuickSort</span>(nums, pos+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//QUICKSORT_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码中的<code>position</code>函数是用来找到基准值的位置，<code>quickSort</code>函数是递归调用<code>position</code>函数对左右两部分进行排序。</p>
</blockquote>
<h3 id="复杂度分析-3">4.3 复杂度分析</h3>
<p><strong>时间复杂度</strong>：O(nlogn)，最坏情况下为O(n^2)。</p>
<p><strong>空间复杂度</strong>：最坏情况是O(n)，在输入数组完全倒序的情况下，达到最差递归深度n，使用O(n)栈帧空间。</p>
<h3 id="快排为什么快">4.4 快排为什么快？</h3>
<ul>
<li>出现最坏情况的概率很低</li>
<li>快速排序快的主要原因是大大减少了<strong>比较和交换的次数</strong>，因为按基准数切分的两半数组，在一个数组里面的数据是绝对不会和第二个数组里面的数字产生比较的机会的，所以大幅度降低了做无用功的机会。</li>
</ul>
<h2 id="五归并排序">五、归并排序</h2>
<h3 id="思路-1">5.1 思路</h3>
<p>归并排序是一种<strong>分治</strong>的排序算法，思想是先按照<strong>左右中</strong>的顺序，具体步骤如下：</p>
<ul>
<li><strong>左右</strong>：先不断递归地将数组<strong>分</strong>成两半，直到每个子数组只有一个元素后return回溯，得到某一层的左右两个有序数组（默认一个元素是有序的）</li>
<li><strong>中</strong>：将左右两个有序数组<strong>合并</strong>成一个有序数组，期间需要用到<strong>临时数组</strong>来存放合并后的有序数组</li>
</ul>
<p><img src="/2024/04/03/%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/mergeSort.png"></p>
<h3 id="代码实现-4">5.2 代码实现</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> LR_size = right - left + <span class="number">1</span>;</span><br><span class="line">	<span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">tmpVec</span><span class="params">(LR_size)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过临时数组&amp;&amp;比对数值合并左右子树</span></span><br><span class="line">	<span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;<span class="comment">//[left,mid]是左边，[mid+1,right]是右边</span></span><br><span class="line">	<span class="keyword">int</span> left_p = left, right_p = mid+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(left_p &lt;= mid &amp;&amp; right_p &lt;= right) &#123;<span class="comment">//以左树为基准进行数据填充，且两个子树都还没遍历到最后的点</span></span><br><span class="line">		<span class="keyword">if</span> (vec[left_p] &lt;= vec[right_p]) &#123;</span><br><span class="line">			<span class="comment">//左子树值更小，将左子树值放入</span></span><br><span class="line">			<span class="keyword">while</span> (left_p&lt;=mid &amp;&amp; vec[left_p] &lt;= vec[right_p]) &#123;</span><br><span class="line">				tmpVec[i++] = vec[left_p++];</span><br><span class="line">				<span class="comment">/*++i;</span></span><br><span class="line"><span class="comment">				++left_p;*/</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//右子树值更小，将右子树值放入</span></span><br><span class="line">			<span class="keyword">while</span> (right_p &lt;= right &amp;&amp; vec[left_p] &gt; vec[right_p]) &#123;</span><br><span class="line">				tmpVec[i++] = vec[right_p++];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将剩下的左/右子树添加到数组中</span></span><br><span class="line">	<span class="keyword">if</span> (left_p &lt;= mid) &#123;</span><br><span class="line">		<span class="comment">//右子树走完了，剩下的都填充给左子树</span></span><br><span class="line">		<span class="keyword">while</span> (left_p &lt;= mid) &#123;</span><br><span class="line">			tmpVec[i++] = vec[left_p++];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (right_p &lt;= right) &#123;</span><br><span class="line">		<span class="comment">//左子树走完了，剩下的都填充给右子树</span></span><br><span class="line">		<span class="keyword">while</span> (right_p &lt;= right) &#123;</span><br><span class="line">			tmpVec[i++] = vec[right_p++];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将临时数组赋值给原始数组</span></span><br><span class="line">	left_p = left;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> tmp : tmpVec) &#123;</span><br><span class="line">		vec[left_p++] = tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; vec, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//递归分左右子树</span></span><br><span class="line">	<span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">mergeSort</span>(vec, left, mid);</span><br><span class="line">	<span class="built_in">mergeSort</span>(vec, mid+<span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//merge合并左右子树</span></span><br><span class="line">	<span class="comment">//左/右 子树是已经排序了的</span></span><br><span class="line">	<span class="built_in">merge</span>(vec, left, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析-4">5.3 复杂度分析</h3>
<p><strong>时间复杂度</strong>：O(nlogn)，划分产生高度为<code>lg(n)</code>的递归树，每层合并的总操作数量为<code>O(n)</code></p>
<p><strong>空间复杂度</strong>：O(n)，合并操作需要一个临时数组来存放合并后的有序数组。</p>
<h2 id="六堆排序">六、堆排序</h2>
<h3 id="思路-2">6.1 思路</h3>
<p>未完待续......</p>
<h2 id="七总结">七、总结</h2>
<p>各种算法的复杂度总结：</p>
<p><img src="/2024/04/03/%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/summary.png"></p>
<blockquote>
<p>参考：<a href="https://www.hello-algo.com/chapter_sorting/selection_sort/">Hello
算法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>推广搜1：基础知识及学习路线篇</title>
    <url>/2024/12/20/%E6%8E%A8%E5%B9%BF%E6%90%9C1%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E7%AF%87/</url>
    <content><![CDATA[<h1 id="一基础知识">一、基础知识</h1>
<h2 id="推广搜使用场景及特征类型">1.1 推广搜使用场景及特征类型</h2>
<p><strong>1）场景</strong></p>
<p>推搜常用场景有</p>
<ul>
<li>购物</li>
<li>新闻</li>
<li>视频</li>
<li>音乐...</li>
</ul>
<p>推荐目的是</p>
<ul>
<li>增加点击率</li>
<li>增加观看时长</li>
<li>增加购买转化率</li>
<li>增加用户粘性...</li>
</ul>
<p><strong>2）特征类型</strong></p>
<p>搜推模型的输入特征类型主要有三种：<strong>物品信息、用户信息、场景信息</strong>，这三类协同作用得到推荐结果</p>
<p>物品信息：</p>
<ul>
<li>价格</li>
<li>销量</li>
<li>评价...</li>
</ul>
<p>用户信息：</p>
<ul>
<li>历史行为（购买记录）</li>
<li>关系网</li>
<li>性别...</li>
</ul>
<p>场景信息：</p>
<ul>
<li>时间</li>
<li>地区</li>
<li>用户状态...</li>
</ul>
<h2 id="自然推荐和推荐广告">1.2 自然推荐和推荐广告</h2>
<ul>
<li>自然推荐：自然推荐是<strong>提升用户体验和信息分发效率</strong>的，属于<strong>免费</strong>流量，因此主要考虑<strong>用户和平台利益</strong>，基本不考虑商家
<ul>
<li>指标：<strong>CTR（点击率）</strong></li>
<li>主要排序：<strong>CTR</strong>，可能还会再结合销量、评价等指标</li>
<li>感知：自然推荐通常是无感的</li>
</ul></li>
<li>推荐广告：推荐广告是<strong>商家花钱投放</strong>的，因此主要考虑<strong>商家利益</strong>，同时<strong>兼顾用户和平台的利益</strong>
<ul>
<li>指标：<strong>CPM（千次展示成本）</strong></li>
<li>主要排序：<strong>eCPM</strong>，广告侧还需要去考虑广告商品的质量、历史销量、历史好评率等等各种因素，将这些因素综合考虑组成另外一个分数Q值，最终二者按照一定权重，形成一个复合公式：<code>Rank_Score = a×eCPM + b×Q</code></li>
<li>感知：推荐广告通常会有<strong>广告</strong>字样用于标识</li>
</ul></li>
</ul>
<h2 id="推荐算法基本流程">1.3 推荐算法基本流程</h2>
<p>整个推搜系统的运作流程图如下：</p>
<p><img src="/2024/12/20/%E6%8E%A8%E5%B9%BF%E6%90%9C1%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E7%AF%87/structure.png" width="100%" height="100%"></p>
<p>推荐算法最主要的流程是：</p>
<ul>
<li><p>数据处理：将<strong>数据数值化</strong>。其中数据可以分为<strong>连续特征</strong>和<strong>类别特征</strong>两种，连续特征如<strong>价值、销量</strong>等可以直接数值化；而类别特征如<strong>性别、等级、星期、城市等</strong>这些可选项、不具备数值化意义的需要用<strong>哈希散列、one-hot等进行编码向量化</strong>。</p></li>
<li><p>建模</p>
<ul>
<li><p><strong>召回</strong>：一般用<strong>召回规则（如用户的搜索关键词、历史行为）</strong>从海量的<strong>候选集</strong>中召回用户可能感兴趣的物品。</p>
<ul>
<li>举例：用户在搜索框中输入“跑步鞋”，系统会召回所有与“跑步鞋”相关的广告，包括直接相关的广告（如某品牌的跑步鞋）和间接相关的广告（如运动装备、健身课程等）。</li>
</ul></li>
<li><p><strong>过滤</strong>：过滤一般会进一步保证结果的<strong>实时性、相关性、物品相似性和用户相似度等</strong>，通常会考虑用户的地域限制、匹配度等因素。</p>
<ul>
<li>举例：对于用户输入“跑步鞋”的搜索，过滤系统可能会移除不相关的广告（如与“跑步”无关的时尚鞋类广告）或已经过期的广告。</li>
</ul></li>
<li><p><strong>精排</strong>：<strong>百量级的内容并按照顺序推送，精排也一直是推搜模型优化的重点</strong>，确保最优质、最相关的广告位于前列，提升广告的点击率和转化率。通常会使用<strong>CTR预测模型、双塔深度学习等模型</strong>来优化排序。
<img src="/2024/12/20/%E6%8E%A8%E5%B9%BF%E6%90%9C1%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E7%AF%87/Ranking.png" width="80%" height="80%"></p>
<ul>
<li>举例：在“跑步鞋”搜索结果中，精排阶段会确保广告中最相关的、用户最可能点击的跑步鞋广告排在前面，考虑到价格、品牌偏好等因素。</li>
</ul></li>
<li><p><strong>混排</strong>：为<strong>避免内容越推越窄</strong>，将精排后的推荐结果进行一定修改，<strong>例如控制某一类型的频次</strong>。</p></li>
<li><p><strong>强规则</strong>：强规则是一些行业规定的、无法修改的<strong>固定规则</strong>，如<strong>广告不能违法违规、广告不能虚假宣传恶意竞争等规则</strong>。通常需要<strong>确保广告展示符合法律、平台及广告主的要求</strong></p></li>
</ul>
<p><img src="/2024/12/20/%E6%8E%A8%E5%B9%BF%E6%90%9C1%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E7%AF%87/Modeling.png" width="60%" height="60%"></p></li>
<li><p>评估：评估模型在测试集上的效果，常用的评估指标包括<strong>准确率、召回率、F1值、AUC</strong>等</p></li>
</ul>
<h2 id="数据预处理算法原理">1.3 数据预处理算法原理</h2>
<p>数据预处理中的数据可以分为<strong>连续特征</strong>和<strong>类别特征</strong>两种</p>
<ul>
<li><strong>连续特征</strong>：如<strong>价值、销量</strong>等可以直接数值化</li>
<li><strong>类别特征</strong>：如<strong>性别、等级、星期、城市等</strong>这些可选项、不具备数值化意义的需要用<strong>哈希散列、one-hot等进行编码向量化</strong>。</li>
</ul>
<h3 id="哈希散列">1）哈希散列</h3>
<p>哈希散列是一种将特征值映射到<strong>固定长度为n的向量</strong>的方法</p>
<p>比如需要将<code>weekly</code>特征映射到长度为<code>n=3</code>的向量中，也就是通过二进制编码制定映射规则<code>Tuesday=[0,1,0]=十进制的2</code>，用长度为3的向量可以无哈希冲突地映射所有星期值。</p>
<p><strong>缺点：</strong></p>
<ul>
<li>当映射空间不足时会导致<strong>哈希冲突</strong>，从而导致某些特征的信息丢失。（比如用n=2去映射weekly时会出现哈希碰撞）</li>
<li>使用了哈希函数增加了<strong>计算复杂度</strong></li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>内存占用较低，适合大规模数据集</li>
</ul>
<h3 id="one-hot">2）one-hot</h3>
<p>one-hot是一种将特征值映射到<strong>固定长度为n的向量</strong>的方法，<strong>其中n为可选类别的个数</strong></p>
<p>比如将<code>weekly</code>特征映射到长度为7的向量中，选中了星期几就把该位置置为1，比如<code>Tuesday=[0,1,0,0,0,0,0]</code>，用长度为7的向量可以无哈希冲突地映射所有星期值。</p>
<p><strong>缺点：</strong></p>
<ul>
<li>会导致存在大量数量为0的值，导致输入的<strong>特征向量稀疏</strong>，导致<strong>维度爆炸和训练速度慢</strong>。</li>
<li>维度高，内存占用高</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>直观、容易理解</li>
</ul>
<blockquote>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/395062194">广告和推荐算法论文梳理</a></p>
<p><a href="https://blog.csdn.net/weixin_43805551/article/details/123416478">自然推荐和推荐广告的区别：推荐算法（推广搜）</a></p>
<p><a href="https://blog.csdn.net/m0_59596990/article/details/122240815">超全推荐算法基础知识：超全，7种经典推荐算法模型及应用</a></p>
<p><a href="https://cloud.tencent.com/developer/article/2220394">!!!详细推搜知识包含召回-排序：推荐系统[一]：超详细知识介绍，一份完整的入门指南，解答推荐系统相关算法流程、衡量指标和应用，以及如何使用jieba分词库进行相似推荐</a></p>
</blockquote>
<h1 id="二学习路线">二、学习路线</h1>
<blockquote>
<p>推荐算法学习博客&amp;github：https://datawhalechina.github.io/fun-rec/#/</p>
<p>学习路线参考文章：<a href="https://zhuanlan.zhihu.com/p/431446738">推荐算法&amp;广告算法学习路线</a>，其中重点关注文章中的<strong>三、推荐算法</strong>和<strong>四、广告算法</strong></p>
</blockquote>
<p>tmp记录文章：</p>
<blockquote>
<p><a href="https://blog.csdn.net/m0_48086806/article/details/136914225">【主要推荐算法概览，包括召回与排序】</a></p>
<p><a href="https://blog.csdn.net/u011863024/article/details/115721328">Elasticsearch学习笔记</a></p>
<p><a href="https://blog.csdn.net/aibo_yyds/article/details/120081333">Elasticsearch工具使用</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习算法</category>
      </categories>
  </entry>
  <entry>
    <title>推广搜2：传统推荐模型之协同过滤算法</title>
    <url>/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一基础知识">一、基础知识</h1>
<h2 id="正则化">1.1 正则化</h2>
<p>正则化是通过给<strong>损失函数添加正则项</strong>来减少噪点的影响，防止<strong>过拟合</strong>的</p>
<p>作用：<strong>避免某些离奇数据影响训练，防止训练过拟合</strong>。也就是避免拟合离奇数据。</p>
<h2 id="过拟合">1.2 过拟合</h2>
<p>过拟合是指训练拟合结果虽然能拟合所有样本数据，但是由于离奇样本数据的存在，导致拟合结果与实际不符合</p>
<p>过拟合的可能原因：</p>
<ul>
<li>训练次数epoch过多</li>
<li>训练数据集过少</li>
<li>特征过多，未筛选</li>
<li>没有引入<strong>正则化约束</strong>，导致模型的鲁棒性和泛化能力差...</li>
</ul>
<p>过拟合的缺点：导致训练结果不稳定</p>
<p>过拟合的例子如下图所示，红色线为过拟合结果，把噪声点也拟合进去了；蓝色线是加入正则化后得到的正常拟合结果，噪声点没被拟合进去：</p>
<p><img src="/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/overfitting.png" width="60%" height="60%"></p>
<h1 id="二协同过滤算法">二、协同过滤算法</h1>
<p>协同过滤算法可以分为<strong>userCF</strong>和<strong>itemCF</strong>两种，假设有m个用户，n种物品：</p>
<ul>
<li><p>userCF：基于<strong>用户相似</strong>，算法会为用户推荐<strong>与用户兴趣相似的用户喜欢的物品</strong></p>
<p>通过生成**m*m大小的用户相似性矩阵<strong>来进行推荐，考虑与用户兴趣相似的用户的意见。但是由于现实互联网中，</strong>用户数量远大于物品数量<strong>，因此会导致相似性矩阵的计算量过大，现实使用中通常选择</strong>itemCF方法**。</p></li>
<li><p>itemCF：基于<strong>物品相似</strong>，算法会为用户推荐<strong>与用户历史喜欢物品相似的物品</strong></p>
<p>通过生成**n*n大小的物品相似性矩阵**来进行推荐，通过用户历史喜欢的物品，结合物品相似性矩阵来推荐。</p></li>
</ul>
<p>协同过滤的缺点:</p>
<ul>
<li>当用户数量远大于物品数量时，用户相似性矩阵的计算量过大</li>
<li>在低频场景下，用户历史数据稀疏，找到相似用户困难</li>
</ul>
<p>可以考虑使用<strong>矩阵分解</strong>来优化计算量并缓解矩阵稀疏问题。</p>
<h2 id="usercf算法实现">2.1 userCF算法实现</h2>
<p>userCF协同过滤算法主要分为5个过程：</p>
<ul>
<li><p>1）物品库中有n个物品，用户有m个；</p></li>
<li><p>2）用户历史评价有向图；</p></li>
<li><p>3）协同过滤的共现矩阵；</p>
<p>通过将点赞值映射为1，踩值为-1，未点赞值为0，得到物品库中物品之间的共现矩阵</p></li>
<li><p>4）计算用户相似性矩阵并排出topk作为推荐目标；</p>
<p>计算用户i和用户j的相似度，其实就是计算用户向量<strong>i</strong>和用户向量<strong>j</strong>之间的相似度（也就是第i行跟第j行）。通常可以选择采用<strong>余弦相似度</strong>计算两向量的夹角来表示用户相似度。</p>
<p><img src="/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/cosine.png" width="40%" height="40%"></p>
<ul>
<li>皮尔逊相关系数：添加<strong>用户平均分进行修正</strong>，减少用户评分偏置的影响
<img src="/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/pearson.png" width="50%" height="50%"></li>
<li>基于皮尔逊相关系数引入<strong>物品平均分</strong>，减少物品评分偏置的影响</li>
</ul></li>
<li><p>5）利用相关系数topk的用户对目标物品的评价来最终预测是否推荐给用户
<img src="/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/predict.png" width="50%" height="50%"></p></li>
</ul>
<p>userCF协同过滤流程图：</p>
<p><img src="/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/userCF.png" width="100%" height="100%"></p>
<h2 id="itemcf算法实现">2.2 itemCF算法实现</h2>
<p>相比userCF，itemCF在构建<strong>相似性矩阵</strong>和<strong>预测结果函数</strong>上有所不同。</p>
<ul>
<li>相似性矩阵：通过物品i列向量和物品j列向量之间的相似度来计算物品相似度矩阵，得到n*n大小的物品相似矩阵。</li>
<li>预测结果函数：通过物品相似矩阵和用户历史物品评分的累和来预测用户对目标物品的评分。
<img src="/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/itemCF.png" width="50%" height="50%"></li>
</ul>
<h1 id="三矩阵分解">三、矩阵分解</h1>
<h2 id="算法原理">3.1 算法原理</h2>
<p>矩阵分解<strong>为每个用户和物品生成隐向量</strong>并映射到<strong>多维坐标</strong>中，在坐标中离用户近的物品就是推荐目标。</p>
<p>也就是将<strong>m<em>n的共现矩阵<strong>分解为</strong>m</em>k的用户矩阵</strong>和**k*n的物品矩阵**，其中k为隐向量维度。</p>
<p>最后某个用户对某个物品的评价（也就是共现矩阵的值）可以通过<strong>用户矩阵和物品矩阵计算预测出来</strong>。</p>
<p><img src="/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/matrix.png" width="70%" height="70%"></p>
<p><img src="/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/matrix_decompose.png" width="70%" height="70%"></p>
<p>矩阵分解的优点：</p>
<ul>
<li><strong>泛化能力强</strong>，一定程度上解决矩阵稀疏问题</li>
<li><strong>空间复杂度低</strong>，从n^2降低到(n+m)*k</li>
<li>矩阵分解结果便于与其他特征<strong>拼接组合</strong></li>
<li>便于与深度学习网络无缝结合</li>
</ul>
<p>矩阵分解的缺点：</p>
<ul>
<li>与协同过滤矩阵一样，不方便加入<strong>用户、物品、场景等特征</strong></li>
</ul>
<p>可以通过<strong>逻辑回归模型</strong>通过因子分解融合多种特征。</p>
<h2 id="梯度下降">3.2 梯度下降</h2>
<p>如何分解共现矩阵呢？</p>
<p>通常采用的是<strong>梯度下降</strong>方法来获取物品向量矩阵<strong>q</strong>和用户向量矩阵<strong>p</strong>。</p>
<p>其中损失函数的制定是要让共现矩阵的值<strong>r</strong>与分解结果（p*q）的差值最小，对损失函数求导找到梯度方向，根据偏导更新权重。同时加上正则化，因此最终的损失函数为：</p>
<p><img src="/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/loss.png" width="50%" height="50%"></p>
<blockquote>
<p>参考</p>
<p>书籍: 《深度学习推荐系统》</p>
<p><a href="https://blog.csdn.net/m0_37531129/article/details/111461052">推荐系统--2--协同过滤与矩阵分解</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习算法</category>
      </categories>
  </entry>
  <entry>
    <title>推广搜3：传统推荐模型之逻辑回归算法LR</title>
    <url>/2024/12/25/%E6%8E%A8%E5%B9%BF%E6%90%9C3%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95LR/</url>
    <content><![CDATA[<h1 id="一基础知识">一、基础知识</h1>
<h2 id="梯度下降">1.1 梯度下降</h2>
<p>梯度下降也称为最速下降法，其目的是<strong>找到一个函数的局部极小值</strong>。</p>
<p><strong>梯度下降法：</strong></p>
<p>假设需要根据已有的样本拟合一函数<span class="math inline">\(f_\theta(t_1, t_2, ..., t_n)= \theta_1t_1 +
\theta_2t_2 + ... + \theta_nt_n\)</span>，其中<span class="math inline">\(t_1, t_2, ..., t_n\)</span>为样本的特征值，<span class="math inline">\(\theta_1, \theta_2, ...,
\theta_n\)</span>为各个特征对应的权重。</p>
<p>那么我们需要做的就是根据已有样本集迭代找出各个<span class="math inline">\(\theta_i\)</span>的取值，使得能拟合出函数<span class="math inline">\(f\)</span>：</p>
<ul>
<li><p>找到令代价函数（损失函数）<span class="math inline">\(J(\theta_1,
\theta_2, ..., \theta_n)\)</span>
的最小点。其中代价函数通常是表示<strong>预测值与真实值之间的误差</strong>。</p></li>
<li><p>由于<span class="math inline">\(J(\theta_1, \theta_2, ...,
\theta_n)\)</span>是多维的，因此针对每个维度<span class="math inline">\(\theta_i\)</span>，其偏导数<span class="math inline">\(\frac{\partial J}{\partial
\theta_i}\)</span>，也称为梯度，在该维度下，变量<span class="math inline">\(\theta_i\)</span>沿梯度的反方向移动时，损失函数下降最快。基于此，令步长为<span class="math inline">\(\alpha\)</span>，则各个<span class="math inline">\(\theta_i\)</span>的更新公式为：</p>
<p><span class="math display">\[ \theta_i = \theta_i - \alpha
\frac{\partial J}{\partial \theta_i} \]</span></p></li>
</ul>
<p><strong>举例说明梯度下降法的运作：</strong></p>
<p>假设有一个函数<span class="math inline">\(y = f_w(x) = w_1x +
w_2\)</span>，针对该函数，有一些样本集：<span class="math inline">\(x_1,
x_2, ..., x_m\)</span>，其对应的标签值：<span class="math inline">\(y_1,
y_2, ..., y_m\)</span>。</p>
<p>需要通过梯度下降法不断更新<span class="math inline">\(w_1,
w_2\)</span>并找到最优的<span class="math inline">\(w_1,
w_2\)</span>，从而拟合函数<span class="math inline">\(f_w(x)\)</span>：</p>
<ul>
<li><p>首先找到<span class="math inline">\(f\)</span>函数的损失函数：</p>
<p><span class="math display">\[J(w_1, w_2) =
\frac{1}{2m}\sum_{i=1}^m(f_w(x_i) - y_i)^2\]</span></p></li>
<li><p>对<span class="math inline">\(w_1\)</span>的更新方向是对<span class="math inline">\(w_1\)</span>维度求它在<span class="math inline">\(j(w_1,w_2)\)</span>函数中的偏导（对<span class="math inline">\(w_2\)</span>的更新同理）：</p>
<p><span class="math display">\[\frac{\partial J}{\partial w_1} =
\frac{1}{m}\sum_{i=1}^m(f_w(x_i) - y_i)x_i\]</span></p></li>
<li><p>令更新步长为<span class="math inline">\(\alpha\)</span>，则<span class="math inline">\(w_1\)</span>的更新公式为：</p>
<p><span class="math display">\[w_1 = w_1 - \alpha \frac{\partial
J}{\partial w_1} \]</span></p></li>
</ul>
<p>在梯度下降法的一个epoch中，会先初始化<span class="math inline">\(w_1,
w_2\)</span>，然后不断重复上述步骤更新<span class="math inline">\(w_1,
w_2\)</span>，直到<span class="math inline">\(J(w_1,
w_2)\)</span>的值满足要求（最小化<span class="math inline">\(J(w_1,
w_2)\)</span>）。</p>
<h2 id="极大似然估计">1.2 极大似然估计</h2>
<p>假设上述提到要拟合的函数<span class="math inline">\(f\)</span>为<strong>概率密度函数</strong>，那么他的<strong>代价函数</strong>需要用<strong>极大似然估计</strong>来刻画拟合的匹配程度。</p>
<p><strong>似然函数：</strong></p>
<p><strong>1）离散型模型：</strong></p>
<p><span class="math display">\[L(\theta) = \prod_{i=1}^m
p_\theta(X_i=x_i)\]</span></p>
<p><strong>2）连续型模型：</strong></p>
<p><span class="math display">\[L(\theta) = \prod_{i=1}^m
f_\theta(x_i)\]</span></p>
<p><strong>举例说明极大似然估计：</strong></p>
<p>假设我们有一个要拟合的高斯概率密度函数：</p>
<p><span class="math display">\[f_{\mu,\sigma^2}=\frac{1}{\sqrt{2\pi\sigma^2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}\]</span></p>
<p><img src="/2024/12/25/%E6%8E%A8%E5%B9%BF%E6%90%9C3%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95LR/Gaussian.png" width="80%" height="80%"></p>
<p>针对该函数，我们有样本集：<span class="math inline">\(x_1, x_2, ...,
x_m\)</span>，将所有样本集带入<strong>待拟合函数</strong>中并相乘可以获得对应的似然函数（也就是代价函数）:</p>
<p><span class="math display">\[L(\mu,\sigma^2)=\prod_{i=1}^m
f_{\mu,\sigma^2}(x_i)\]</span></p>
<p>其中由于似然函数就是概率的乘积，而样本点取出大概率时间的概率比较高，似然函数越大时说明这些点在某个模型中概率越大，那就说明这个模型就是最接近真实分布的，那对应的参数自然就是目标参数</p>
<p>因此越接近真实函数的<span class="math inline">\(\mu,\sigma^2\)</span>，其似然函数<span class="math inline">\(L(\mu,\sigma^2)\)</span>的值越大。所以我们的参数求解目标就是<span class="math inline">\((\mu^*,
\sigma^*)=argmaxL(\mu,\sigma^2)\)</span>。</p>
<p>由于是求最大值，因此可以给似然函数加上一个递增函数<span class="math inline">\(\ln\)</span>，使其由相乘变成相加：</p>
<p><span class="math display">\[L(\mu,\sigma^2)=\ln\prod_{i=1}^m
f_{\mu,\sigma^2}(x_i)=\sum_{i=1}^m \ln
f_{\mu,\sigma^2}(x_i)\]</span></p>
<p>似然函数的最大值点处的梯度是0，因此可以求出最大值点：</p>
<p><span class="math display">\[ \frac{\partial L}{\partial \mu} =
0\]</span></p>
<p><span class="math display">\[ \frac{\partial L}{\partial \sigma^2} =
0\]</span></p>
<p>以此来求得<span class="math inline">\((\mu^*,
\sigma^*)\)</span>的更新公式。</p>
<blockquote>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/149788542">推荐系统玩家 之
逻辑回归（Logistic regression）</a></p>
<p><a href="https://blog.csdn.net/qq_41775769/article/details/113514294">一文彻底读懂【极大似然估计】</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/89074979">快速理解极大似然法</a></p>
</blockquote>
<h1 id="二逻辑回归算法">二、逻辑回归算法</h1>
<h2 id="区分两类推广搜模型">2.1 区分两类推广搜模型</h2>
<p>在推广搜的算法中，通常模型会分为<strong>以协同过滤为代表的相似性推荐模型</strong>和<strong>以逻辑回归为代表的分类模型</strong>：</p>
<p><img src="/2024/12/25/%E6%8E%A8%E5%B9%BF%E6%90%9C3%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95LR/Models.png" width="80%" height="80%"></p>
<ul>
<li><p>协同过滤模型：</p>
<p>是利用用户和物品的<strong>相互行为信息</strong>进行推荐的，只需要<strong>相互行为信息</strong>而不是<strong>特征信息</strong>；它是一种基于<strong>相似度</strong>的推荐算法。</p></li>
<li><p>逻辑回归模型：</p>
<p>是综合考虑了<strong>用户、物品、场景的特征信息</strong>，依赖<strong>特征提取、实现多特征融合</strong>；它是<strong>基于概率分类的推荐算法</strong>。</p></li>
</ul>
<h2 id="逻辑回归算法原理">2.2 逻辑回归算法原理</h2>
<p><strong>1）确定待拟合函数<span class="math inline">\(f\)</span></strong></p>
<p>由于实际情况中，我们并不能准确地先给定一个待拟合的函数<span class="math inline">\(f\)</span>，因此，在逻辑回归中我们<strong>将推荐问题转换成了CTR点击率预估问题</strong>，也就是预测一个样本的点击率，将样本映射到<span class="math inline">\([0,1]\)</span>之间</p>
<p>因此给定输入神经元是根据权重累和各个特征值，其中的<strong>权重和常数b就是待拟合的参数</strong>，同时通过激活函数<strong>sigmoid</strong>将输出映射到<span class="math inline">\([0,1]\)</span>之间：</p>
<p><span class="math display">\[f_\mathbf{w}(\mathbf{x_i}) = \frac{1}{1
+ e^{-\mathbf{w·x_i}+b}}\]</span></p>
<p>整个拟合函数如下所示：</p>
<p><img src="/2024/12/25/%E6%8E%A8%E5%B9%BF%E6%90%9C3%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95LR/LogisticRegression.png" width="80%" height="80%"></p>
<p>经过拟合后，最终输出结果为正样本（类别为1：推荐）和负样本（类别为0：不推荐），因此我们需要给输入的样本也添加一个类别标签<span class="math inline">\(y_i\)</span>，其值为0或1，0表示不推荐，1表示推荐。则该拟合函数的概率模型为：</p>
<p><span class="math display">\[p(y_i=1|\mathbf{x_i}) =
f_\mathbf{w}(\mathbf{x_i})\]</span> <span class="math display">\[p(y_i=0|\mathbf{x_i}) = 1 -
f_\mathbf{w}(\mathbf{x_i})\]</span></p>
<p>上述拟合函数的概率模型也可以合并起来表示：</p>
<p><span class="math display">\[p(y_i|\mathbf{x_i}) =
(f_w(\mathbf{x_i}))^y(1-f_w(\mathbf{x_i}))^{1-y}\]</span></p>
<p><strong>2）确定损失函数<span class="math inline">\(J\)</span></strong></p>
<p>由极大似然估计可知，<strong>拟合函数的拟合匹配程度是由似然函数刻画的</strong>，其似然函数为：</p>
<p><span class="math display">\[L(\mathbf{w}) = \prod_{i=1}^m
p(y_i|\mathbf{x_i})\]</span></p>
<p>由于代价函数一般是求最小值问题，而似然函数是求最大值问题，因此需要将似然函数转化为最小化问题，也就是乘上系数<span class="math inline">\(-\frac{1}{k}\)</span>，并取对数<span class="math inline">\(ln\)</span>转换成连加，最终得到代价函数为：</p>
<p><span class="math display">\[J(\mathbf{w}) = -\frac{1}{k}\sum_{i=1}^m
p(y_i|\mathbf{x_i})\]</span></p>
<p><strong>3）确定参数更新公式</strong></p>
<p>对代价函数<span class="math inline">\(J(\mathbf{w})\)</span>求偏导，并按步长<span class="math inline">\(\alpha\)</span>更新参数：</p>
<p><span class="math display">\[w_j = w_j - \alpha \frac{\partial
J(\mathbf{w})}{\partial w_j}\]</span></p>
<p>其中：</p>
<p><span class="math display">\[\frac{\partial J(\mathbf{w})}{\partial
w_j} = \frac{1}{k}\sum_{i=1}^m(f_w(\mathbf{x^i}) -
y^i)x^i_j\]</span></p>
]]></content>
      <categories>
        <category>深度学习算法</category>
      </categories>
  </entry>
  <entry>
    <title>推广搜4：传统推荐模型之FM模型</title>
    <url>/2025/01/02/%E6%8E%A8%E5%B9%BF%E6%90%9C4%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8BFM%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>本文假设有n个特征</p>
</blockquote>
<h1 id="一poly2模型">一、POLY2模型</h1>
<p>前面学到的<strong>逻辑回归模型</strong>只对多维特征进行<strong>简单线性加权，没有多维特征的组合</strong>（逻辑回归模型只能通过工程师手动组合特征）。</p>
<p>而<strong>POLY2模型、FM模型、FFM模型具备特征交叉的能力，其表达能力更强</strong>。</p>
<p><img src="/2025/01/02/%E6%8E%A8%E5%B9%BF%E6%90%9C4%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8BFM%E6%A8%A1%E5%9E%8B/CombineChareters.png" width="80%" height="80%"></p>
<p>传统的<strong>逻辑回归</strong>模型的预测函数为：</p>
<p><span class="math display">\[y=w_0+\sum_{i}^n w_i x_i\]</span></p>
<p><strong>POLY2模型</strong>会为每个特征组合赋予一个权重，因此其n个特征需要<span class="math inline">\(n^2\)</span>个参数。其复杂度为<span class="math inline">\(O(n^2)\)</span>，预测结果在线性模型的基础上多了一个多项式：</p>
<p><span class="math display">\[y=\sum_{i=1}^{n-1}\sum_{j=i+1}^n w_{i,j}
x_i x_j\]</span></p>
<p><strong>缺点：</strong></p>
<p>这种属于暴力组合，由于互联网数据本身通过<strong>one-hot</strong>成的<strong>稀疏数据</strong>，因此通过暴力组合增加维度后会更加稀疏，导致模型<strong>计算量剧增、泛化能力差</strong>。</p>
<p><strong>解决办法：</strong>可以通过<strong>矩阵分解出隐向量</strong>的方式来降低计算量、提高模型泛化能力。<strong>FM模型</strong>就是通过这种方式构建的。</p>
<h1 id="二fm模型">二、FM模型</h1>
<p>关于<strong>特征分解隐向量</strong>的相关基础知识参考博客<a href="https://akirazheng.github.io/2024/12/24/%E6%8E%A8%E5%B9%BF%E6%90%9C2%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/">推广搜2：传统推荐模型之协同过滤算法</a></p>
<p>POLY2为每个特征组合赋予一个权重，相当于每个特征都有一个对应其他所有特征的向量组合，也就是向量矩阵大小为<span class="math inline">\(n\times n\)</span>。</p>
<p>FM模型则通过<strong>矩阵分解</strong>的方式将特征向量分解为隐向量，其隐向量大小为<span class="math inline">\(n\times k\)</span>，每两个特征向量的权值<span class="math inline">\(w_ij\)</span>是由这两个向量的隐向量内积计算而得的：</p>
<p><span class="math display">\[w_{ij}=\mathbf{v_i}\mathbf{v_j^T}\]</span></p>
<p>因此带入到前面的POLY2模型中，FM的预测函数为：</p>
<p><span class="math display">\[y=\sum_{i=1}^{n-1}\sum_{j=i+1}^n
\mathbf{v_i}\mathbf{v_j^T} x_jx_j\]</span></p>
<h1 id="三ffm模型">三、FFM模型</h1>
<p>FM模型中，<strong>每个特征向量<span class="math inline">\(v_i\)</span>都只有一个隐向量</strong>，也就是说，当某个特征<span class="math inline">\(i\)</span>跟其他任意特征<span class="math inline">\(j\)</span>交互时，发挥的都是相同的作用（因为使用的是同一个隐向量<span class="math inline">\(\vec{v_i}\)</span>。</p>
<p>但是很多时候一个特征对不同特征发挥的作用效果是不同的，为了解决这个问题，FFM提出了<strong>域field</strong>的概念，也就是将每个特征从一个隐向量扩展为每个特征有<strong>一组隐向量</strong>，缺点是这也增加了计算复杂度，从<strong>FM模型</strong>到<strong>FFM模型</strong>复杂度由<span class="math inline">\(O(nk)\)</span>变为<span class="math inline">\(O(n^2k)\)</span>。</p>
<p><strong>FFM模型</strong>的预测函数为：</p>
<p><span class="math display">\[y=\sum_{i=1}^{n-1}\sum_{j=i+1}^n\mathbf{v_{i,f_j}}\mathbf{v_{j,f_i}^T}
x_jx_j\]</span></p>
<p>其中<span class="math inline">\(\mathbf{v_{i,f_j}}\)</span>表示在总共存在的<strong>n个隐向量矩阵</strong>中，特征<span class="math inline">\(i\)</span>作用于特征<span class="math inline">\(j\)</span>上对应的隐向量为第<span class="math inline">\(j\)</span>张矩阵的第<span class="math inline">\(i\)</span>行。</p>
<p><img src="/2025/01/02/%E6%8E%A8%E5%B9%BF%E6%90%9C4%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8BFM%E6%A8%A1%E5%9E%8B/POLY_FM_FFM.png" width="80%" height="80%"></p>
<p><strong>缺点：</strong>FM和FFM一般只能做到二阶特征交叉（也就是特征两两交叉），由FM的二阶变为三阶，其模型参数计算量剧增。</p>
<p><strong>解决办法：</strong>通过如<strong>GBDT+LR</strong>的<strong>组合模型</strong>来解决高阶特征交叉的问题。</p>
<blockquote>
<p>参考</p>
<p><a href="https://zhuanlan.zhihu.com/p/342803984">推荐算法(一)——FM因式分解(原理+代码)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/348596108">推荐算法(二)——FFM原理浅析及代码实战</a></p>
<p><a href="https://github.com/jc-LeeHub/Recommend-System-tf2.0">包括多种基础推搜算法的github代码仓库</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习算法</category>
      </categories>
  </entry>
  <entry>
    <title>推广搜5：传统推荐模型之GBDT+LR模型</title>
    <url>/2025/01/03/%E6%8E%A8%E5%B9%BF%E6%90%9C5%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8BGBDT-LR%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="gbdtlr模型">GBDT+LR模型</h1>
<p>CTR预估早期使用最多的方案是逻辑回归(LR)，LR
性能非常高，但是其效果十分依赖于大量的特征工程。但是手动构造许多有用特征费时费力，因此<strong>需要有更自动化的方法来发现有效特征并构造组合特征</strong>。</p>
<p>相比FM和FFM通过交互所有的二阶特征导致特征冗余问题，<strong>GBDT自动在特征传入LR模型前先对特征进行自动筛选和组合</strong>，筛选和组合后的包含各阶特征的向量再传入LR模型中进行线性训练。</p>
<p>这里就包含了两部分的独立训练：</p>
<ul>
<li>GBDT模型训练构建特征工程</li>
<li>LR模型训练预估CTR</li>
</ul>
<p><img src="/2025/01/03/%E6%8E%A8%E5%B9%BF%E6%90%9C5%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8BGBDT-LR%E6%A8%A1%E5%9E%8B/GBDT+LR模型.png" width="80%" height="80%"></p>
<h2 id="gbdt">GBDT</h2>
<p>GBDT
基于集成学习中的boosting思想，每次迭代都在<strong>减少残差的梯度方向新建立一颗决策树</strong>，迭代多少次就会生成多少颗决策树，不断减少误差。</p>
<p>假设GBDT由两颗树构成，如下图中的 树1 和 树2 ：</p>
<p><img src="/2025/01/03/%E6%8E%A8%E5%B9%BF%E6%90%9C5%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8BGBDT-LR%E6%A8%A1%E5%9E%8B/GBDT.png" width="80%" height="80%"></p>
<p>模型最终到达叶子节点形成一个<strong>one-hot编码</strong>，每个节点为1表示该特征被选择，0表示该特征未被选择。如上图形成的one-hot编码为[0,
1, 0, 1, 0]。</p>
<p>同时，决策树决定了特征的阶数，如果决策树深度为3，则说明是通过2次节点分裂得到的，最终叶节点是2阶特征组合的结果，其缺点是相比FFM会损失很多数值信息。</p>
<blockquote>
<p>参考</p>
<p><a href="https://github.com/zxxwin/GBDT_LR">广告点击率(CTR)预测经典模型
GBDT + LR 理解与实践（附数据 + 代码）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习算法</category>
      </categories>
  </entry>
  <entry>
    <title>推广搜6：传统推荐模型之阿里LS-PLM模型</title>
    <url>/2025/01/03/%E6%8E%A8%E5%B9%BF%E6%90%9C6%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%98%BF%E9%87%8CLS-PLM%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="ls-plm">LS-PLM</h1>
<h2 id="非线性化分割">非线性化分割</h2>
<p>LS-PLM模型也称为MLR(混合逻辑回归)，它的结构类似于<strong>三层神经网络（三层神经网络包含的隐藏层具有非线性变换的能力，通常通过激活函数实现）</strong>，他的输入层是样本的特征向量，中间层是由m个神经元组成的隐层（m是模型的分片数量，通过控制m来控制分片数，防止过拟合）</p>
<p>传统的LR线性模型只能对样本进行线性分割，而LS-PLM在深度学习到来之前，已经将<strong>线性模型提升为非线性模型</strong>，实现了模型端到端的非线性学习能力。</p>
<p>其中的非线性化主要是通过softmax函数（也就是<span class="math inline">\(\pi_i(x)\)</span>）将特征切分到m个不同的空间，并由LR部分（也就是<span class="math inline">\(\eta_i(x)\)</span>）对m个空间的特征进行线性学习来实现的。</p>
<p>其中随着m的增长，需要的样本数也增加，阿里推荐的值为<span class="math inline">\(m=12\)</span>。</p>
<p>最终的预估函数<span class="math inline">\(f(x)\)</span>为：</p>
<p><span class="math display">\[f(x) = \sum_{i=1}^{m} \pi_i(x) \cdot
\eta_i(x)=\sum_{i=1}^{m}
\frac{e^{\eta_i(x)}}{\sum_{j=1}^{m} e^{\eta_j(x)}}\cdot
\frac{1}{1+e^{-w_i\cdot x}}\]</span></p>
<p><img src="/2025/01/03/%E6%8E%A8%E5%B9%BF%E6%90%9C6%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%98%BF%E9%87%8CLS-PLM%E6%A8%A1%E5%9E%8B/function.png" width="60%" height="60%"></p>
<p>所以实际上，<strong>LS-PLM模型也可以看做是一个三层的神经网络模型</strong>：</p>
<ul>
<li>第一层：输入层，也指样本的特征向量</li>
<li>第二层：隐层，通过两个激活函数相乘实现非线性化，实现了Embedding操作
<ul>
<li>其中第一个激活函数实现聚类，包含m个神经元
<ul>
<li>聚类的原因：不同的人群具有聚类特性，同一类人群具有类似的广告点击偏好</li>
</ul></li>
<li>第二个激活函数实现LR分类，包含m个神经元</li>
<li>隐藏层输出为m维切片</li>
</ul></li>
<li>第三层：输出层，包含单一神经元</li>
</ul>
<p><img src="/2025/01/03/%E6%8E%A8%E5%B9%BF%E6%90%9C6%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%98%BF%E9%87%8CLS-PLM%E6%A8%A1%E5%9E%8B/LS-PLM.png" width="60%" height="60%"></p>
<p>如下图所示，LR不能拟合非线性数据，MLR可以拟合非线性数据（m=4，实现4切片）</p>
<p><img src="/2025/01/03/%E6%8E%A8%E5%B9%BF%E6%90%9C6%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%98%BF%E9%87%8CLS-PLM%E6%A8%A1%E5%9E%8B/nonlinear.png" width="80%" height="80%"></p>
<h2 id="解决稀疏性问题代价函数加入正则化">解决稀疏性问题：代价函数加入正则化</h2>
<p>LS-PLM主要是通过<span class="math inline">\(L_1\)</span>和<span class="math inline">\(L_{2,1}\)</span>正则化来做到这件事情。其中 <span class="math inline">\(L_{2,1}\)</span>用于实现特征筛选，<span class="math inline">\(L_1\)</span>则用于得到尽可能多的稀疏解。</p>
<p>目标损失函数为：</p>
<p><img src="/2025/01/03/%E6%8E%A8%E5%B9%BF%E6%90%9C6%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%98%BF%E9%87%8CLS-PLM%E6%A8%A1%E5%9E%8B/loss.png" width="70%" height="70%"></p>
<p>此时由于<span class="math inline">\(L_1\)</span>和<span class="math inline">\(L_2\)</span>正则化函数都是非平滑的，所以损失函数是非凸函数（不止一个极值点），所以可能求得的结果是局部最优解而非全局最优解。</p>
<p><img src="/2025/01/03/%E6%8E%A8%E5%B9%BF%E6%90%9C6%EF%BC%9A%E4%BC%A0%E7%BB%9F%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%98%BF%E9%87%8CLS-PLM%E6%A8%A1%E5%9E%8B/loss2.png" width="70%" height="70%"></p>
<blockquote>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/406615820">经典推荐算法学习（四）|
阿里LS-PLM（MLR）模型原理解析</a></p>
<p><a href="https://jesse-csj.github.io/2019/08/12/MLR/">（读论文）推荐系统之ctr预估-MLR(LS-PLM)模型解析</a></p>
</blockquote>
]]></content>
      <categories>
        <category>深度学习算法</category>
      </categories>
  </entry>
  <entry>
    <title>搭建Conda虚拟环境</title>
    <url>/2022/04/12/%E6%90%AD%E5%BB%BAConda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<blockquote>
<p>编写这篇博客的目的是在学习李沐老师的《动手学深度学习》课程、或者自学其它python编程内容时，需要用到的python环境各不相同</p>
</blockquote>
<blockquote>
<p>为了方便学习，还是需要创建多个不同的Conda环境进行区分</p>
</blockquote>
<blockquote>
<p>本文的命令内容是基于Windows10系统的，Linux系统的后续有机会继续更新</p>
</blockquote>
<h1 id="conda中的常用指令">Conda中的常用指令</h1>
<p>一般有<strong>Conda前缀</strong>的指令都是针对<strong>所有环境</strong>进行操作的，或者说是在主环境中操作的</p>
<p>如果需要在当前的<strong>自定义Conda虚拟环境</strong>中执行安装或者查看指令时，<strong>不需要加Conda前缀</strong></p>
<h2 id="conda前缀的指令">Conda前缀的指令</h2>
<ul>
<li><p>查看安装包</p>
<p><code>conda list</code></p></li>
<li><p>查看当前存在的Conda虚拟环境</p>
<p><code>conda env list</code></p>
<p><code>conda info -e</code></p></li>
<li><p>更新当前Conda</p>
<p><code>conda update conda</code></p></li>
<li><p>创建Python虚拟环境</p>
<p><code>conda create -n your_env_name python=x.x</code></p>
<p>其中<strong>your_env_name</strong>为所起的环境名，<strong>x.x</strong>为python版本号，创建的环境可以在Anaconda安装目录的envs文件中找到。</p>
<p>如在创建Pytorch深度学习环境时可以输入：</p>
<p><code>conda create -n d2l_Pytorch python=3.8</code></p></li>
<li><p>激活、关闭、删除虚拟环境</p>
<p>激活或者切换虚拟环境：</p>
<p><code>activate your_env_name</code></p>
<p>关闭虚拟环境切回Root环境:</p>
<p><code>activate root</code></p>
<p>删除虚拟环境：</p>
<p><code>conda remove -n your_env_name --all</code></p></li>
</ul>
<h2 id="自定义虚拟环境内的指令">自定义虚拟环境内的指令</h2>
<p><strong>以下指令均在已经切换到对应环境的情况下</strong>进行输入，如下所示表示已经切换到<strong>d2l_Pytorch</strong>环境：</p>
<p><img src="/2022/04/12/%E6%90%AD%E5%BB%BAConda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/Conda-envs.png"></p>
<ul>
<li><p>检查Python版本（CMD中输入）</p>
<p><code>python --version</code></p></li>
<li><p>查看环境中已有的安装包</p>
<p><code>pip list</code></p></li>
<li><p>安装虚拟环境中对于版本的包</p>
<p><code>pip install package_name==x.x</code></p>
<p>其中<strong>x.x</strong>代表包对应的版本号，如下所示：</p></li>
</ul>
<p><img src="/2022/04/12/%E6%90%AD%E5%BB%BAConda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/pip-install-package.png"></p>
<ul>
<li><p>删除环境中的某个包</p>
<p><code>pip uninstall  package_name</code></p></li>
</ul>
]]></content>
      <categories>
        <category>重装-环境配置-计算机</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统内存管理</title>
    <url>/2024/05/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="一虚拟内存">一、虚拟内存</h1>
<h2 id="为什么要有虚拟内存">1.1 为什么要有虚拟内存？</h2>
<p>在单片机中是没有操作系统的，所以<strong>CPU</strong>会直接操作<strong>物理内存</strong>，而内存又是有限的，因此单片机中只能跑一个程序（因为内存地址直接暴露给应用程序，程序A本来给地址1xxx赋值后，程序B再给地址1xxx赋值，会导致数据被覆盖）</p>
<p>而为了能够同时运行多个程序，我们需要<strong>操作系统</strong>，操作系统会为每个程序分配一块<strong>虚拟内存（可以实现进程间的内存隔离、解决物理内存不够的问题）</strong>，这样每个程序都认为自己在独占物理内存，实际上是<strong>共享物理内存</strong></p>
<p>最终每个进程的<strong>虚拟内存</strong>落盘到<strong>物理内存</strong>会通过<strong>页表</strong>来映射实现</p>
<p>CPU中存的是程序对应的<strong>虚拟地址</strong>信息，然后通过<strong>CPU中的MMU（内存管理单元，负责把虚拟地址映射成物理地址）</strong>映射成<strong>物理地址</strong>，进而再通过地址总线去访问<strong>物理内存</strong></p>
<p><img src="/2024/05/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/VirtualMemory.png" width="70%"></p>
<h2 id="虚拟内存">1.2 虚拟内存</h2>
<p>当一个程序运行时，会允许<strong>一部分加载到实际的物理内存</strong>，而暂时不用的部分则会存放在<strong>磁盘（外存，如硬盘的swap区域）</strong>上，因此允许程序虚拟内存大于物理内存大小</p>
<p>当执行到该进程的某部分代码出现<strong>缺页</strong>时，操作系统会产生一个<strong>缺页异常</strong>，并由用户态进入<strong>内核态</strong>将<strong>磁盘</strong>上的相关数据加载到<strong>物理内存</strong>中，然后再返回用户态继续执行</p>
<p>这种技术就是<strong>虚拟内存</strong>技术，可以根据<strong>页的大小</strong>（Linux下一般为<strong>4KB</strong>）将程序进行分割，然后不连续地加载到<strong>物理内存</strong>中</p>
<p><strong>虚拟内存的3个主要作用：</strong></p>
<ul>
<li>扩大内存大小：允许程序运行的内存超过物理内存大小</li>
<li>避免地址冲突：避免不同程序共同操作物理内存导致<strong>地址冲突</strong>（每个进程有自己的页表）</li>
<li>权限控制：内存访问根据页表隔离开不同进程</li>
</ul>
<h2 id="内存分页">1.3 内存分页</h2>
<p>在<strong>内存分页</strong>前还有<strong>内存分段</strong>，<strong>内存分段</strong>是将程序分为<strong>代码段、数据段、堆栈段</strong>等，它的好处是能产生连续的空间，但是<strong>内存分段</strong>会导致<strong>内存碎片</strong>问题，也就是大小不一的<strong>内存块</strong>会导致<strong>内存</strong>的<strong>利用率</strong>不高</p>
<p>因此衍生出了<strong>内存分页</strong>的方式，将程序<strong>按照固定大小的页</strong>进行分割，这种紧密的页表排列不会有<strong>外碎片</strong>的产生，很好地利用了宝贵的物理内存空间。但是由于最小单位是<strong>页</strong>，当不足一页时会补全一页，导致<strong>内部碎片</strong>的产生</p>
<p>在<strong>虚拟内存</strong>和<strong>物理内存</strong>之间通过存储在<strong>MMU</strong>中的<strong>页表</strong>进行映射</p>
<p><img src="/2024/05/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/MemoryPage.png" width="70%"></p>
<p>在单级分页中，会把<strong>虚拟地址</strong>分为</p>
<ul>
<li><strong>页号</strong>：用于索引<strong>页表</strong>中的<strong>页表项</strong>，用于查找<strong>物理内存</strong>中对应页的<strong>物理地址</strong></li>
<li><strong>页内偏移</strong>：用于定位<strong>页</strong>中的具体<strong>字节</strong>。偏移是相对量，所以在<strong>虚拟内存</strong>和<strong>物理内存</strong>中的偏移是一样的</li>
</ul>
<p>所以通过<strong>页表</strong>拿到<strong>物理地址</strong>后，再加上<strong>页内偏移</strong>就能得到具体的<strong>物理地址</strong></p>
<p><img src="/2024/05/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/PageTable.png" width="70%"></p>
<p>在这种单级分页下</p>
<ul>
<li><strong>虚拟内存的页大小 == 物理内存的页大小</strong></li>
<li>而每个<strong>页表项</strong>有4byte(32位系统下)</li>
</ul>
<p>假设<strong>内存大小</strong>为<strong>2<sup>nbit<strong>，每个</strong>页表项<strong>的大小为</strong>2</sup>mbit</strong>，则表示总共有<strong>2<sup>n/2</sup>m
=
2<sup>(n-m)页数<strong>，因此需要有</strong>2</sup>(n-m)个页表项</strong>，也就是<strong>有(n-m)bit</strong>来记录对应的<strong>页号</strong></p>
<p><img src="/2024/05/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/PageTableSize.png" width="70%"></p>
<p><img src="/2024/05/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/AddrSwap.png" width="80%"></p>
<p>因此<strong>页表</strong>的大小是<strong>逻辑空间页数</strong>乘以<strong>页表项的大小(一个页表项占多少bits)</strong>，这种单级分页的方式会导致<strong>页表</strong>过大，因此在实际操作系统中会采用<strong>多级页表</strong>的方式</p>
<h2 id="多级页表">1.4 多级页表</h2>
<p>单级页表无法定位到某个<strong>进程</strong>，因此需要给整个逻辑空间的<strong>虚拟地址空间</strong>都分配<strong>页表（放在CPU中）</strong>，这样会导致<strong>页表</strong>过大(且每个进程都有自己的页表)，CPU无法放下，可以选择将<strong>页表</strong>放在<strong>内存</strong>中，而将经常访问的<strong>页表</strong>放在<strong>CPU的TLB中</strong>中</p>
<p>而<strong>二级页表</strong>的方式是通过将<strong>页号分为两部分</strong></p>
<ul>
<li>第一部分用于<strong>索引一级页表</strong>，通过<strong>一级页表</strong>找到<strong>二级页表</strong>的<strong>物理地址</strong></li>
<li>第二部分用于<strong>索引二级页表</strong>，通过<strong>二级页表</strong>找到<strong>实际物理地址</strong></li>
</ul>
<p>这样的话，<strong>页表</strong>的大小就变成了<strong>一级页表的大小 +
二级页表的大小</strong>，而<strong>一级页表中不存在的页</strong>则不会占用<strong>二级页表</strong>的空间，这样就减小了<strong>总页表</strong>的大小（页表还是放在<strong>内核态空间</strong>中）</p>
<p>在分级的机制下，假设只有 <code>20%</code>
的一级页表项被用到了，那么页表占用的内存空间就只有
<code>4KB（一级页表） + 20% * 4MB（二级页表）= 0.804MB</code>，这对比单级页表的
<code>4MB</code> 是不是一个巨大的节约？</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1ug411S7Da/?spm_id_from=333.337.search-card.all.click&amp;vd_source=fa61c94b4d0a0af186e3cb794e46eea9">二级页表的工作原理:为什么二级页表占用空间比一级页表小</a>
<a href="https://blog.csdn.net/weixin_43914604/article/details/105930570">3.1.9
OS之二级页表的原理和地址结构</a></p>
</blockquote>
<h2 id="页的换入换出">1.5 页的换入换出</h2>
<p>当程序运行时，<strong>内存空间不够</strong>时：</p>
<ul>
<li>操作系统会将<strong>正在运行的某个进程中不常用的页</strong>从<strong>物理内存</strong>中<strong>换出</strong>到<strong>磁盘(外存)</strong>上</li>
<li>然后将<strong>需要的页</strong>从<strong>磁盘</strong>上<strong>换入</strong>到<strong>物理内存</strong>中</li>
</ul>
<p><img src="/2024/05/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/PageSwap.png" width="70%"></p>
<p>页的置换算法通常包括</p>
<h1 id="二内存分配malloc">二、内存分配（malloc）</h1>
<p>在文章<a href="https://akirazheng.github.io/2024/04/20/C-%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/#/4-1-2-malloc%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6">内存池设计</a>中已经有详细的介绍，这里就不再赘述</p>
<h1 id="三mmap">三、mmap</h1>
<p><code>mmap</code>在文章<a href="https://akirazheng.github.io/2024/03/11/WebServer%E5%AD%A6%E4%B9%A06%EF%BC%9AHTTP%E8%BF%9E%E6%8E%A5%E5%A4%84%E7%90%86%E5%8F%8A%E6%8A%A5%E6%96%87%E6%9C%BA%E5%88%B6/#/%E5%85%AD%E3%80%81%E6%B5%85%E8%81%8A%E4%B8%80%E4%B8%8Bmmap%E5%BB%B6%E7%94%B3%E7%9A%84%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E9%97%AE%E9%A2%98">浅聊一下mmap延申的内存映射问题</a>中已经有详细的介绍，这里就不再赘述</p>
<blockquote>
<p>参考：<a href="https://xiaolincoding.com/os/3_memory/vmem.html#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98">内存管理</a></p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统相关的Linux操作</title>
    <url>/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="一linux基础知识">一、Linux基础知识</h1>
<h2 id="linux下的目录结构">1.1 Linux下的目录结构</h2>
<p>Linux中可以用命令<code>df -h</code>查看磁盘的使用情况以及挂载点</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/disk_df.png" width="90%"></p>
<p>可以看到根节点<code>/</code>挂载在了虚拟机的磁盘<code>/dev/sda3</code>上，<code>/boot</code>挂载在了<code>/dev/sda1</code>上，然后通过命令<code>df -T</code>可以查看挂载点的文件系统类型</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/disk_df_T.png" width="90%"></p>
<p><code>/</code>的文件系统类型是<code>ext4</code>。这是一种常用的日志文件系统。</p>
<p>在根目录下，可以扩展出Linux的目录树状结构，如下：</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/linux_dir.png" width="90%"></p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/linux_dir2.png" width="90%"></p>
<h2 id="linux下的用户权限">1.2 Linux下的用户权限</h2>
<p>在Linux中可以有很多用户，但是只有<code>root</code>用户是<strong>超级用户</strong>，拥有最高权限，其它用户在各自的环境下文件放进自己的<strong>家目录</strong>下，其它用户不能访问，这样大大提高了Linux使用的安全性</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/userPrival.png" width="90%"></p>
<p><code>root</code>用户进入后，在<code>/home</code>目录下存放了所有用户的<strong>家目录</strong>信息</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/home_dir.png" width="90%"></p>
<h3 id="sudo切换用户">sudo：切换用户</h3>
<p><code>sudo</code>指令是Linux下的一个非常重要的指令，可以让普通用户在执行某些需要超级用户权限的指令时，临时提升权限，而不用切换到<code>root</code>用户</p>
<p>系统管理员可以在<code>/etc/sudoers</code>文件中配置哪些用户可以使用<code>sudo</code>指令</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/sudoUser.png" width="90%"></p>
<p><code>root</code>用户可以直接使用<code>sudo username</code>切换到其它用户，而不用输入密码</p>
<h3 id="su切换用户">su：切换用户</h3>
<p><code>su</code>指令是切换用户的指令，可以切换到其它用户，但是需要输入密码</p>
<p><code>su -</code>可以切换到<code>root</code>用户</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/su.png" width="90%"></p>
<h1 id="三linux下的指令集合">三、Linux下的指令集合</h1>
<p>Linux可以通过<strong>shell终端</strong>来执行操作指令</p>
<p>对于终端指令解析：</p>
<ul>
<li><code>root</code>：用户名</li>
<li><code>AkiraEdu01</code>：主机名</li>
<li><code>~</code>：当前目录
<ul>
<li><code>root</code>用户的<code>~</code>目录是<code>/root</code></li>
<li>普通用户的<code>~</code>目录是<code>/home</code></li>
</ul></li>
<li><code>$</code>：代表当前是普通用户</li>
<li><code>#</code>：代表当前是<code>root</code>用户</li>
</ul>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/shell.png" width="90%"></p>
<h2 id="软件安装压缩和解压">3.1 软件安装、压缩和解压</h2>
<h3 id="linux中的软件安装">Linux中的软件安装：</h3>
<ul>
<li><strong>CentOS</strong>：<code>yum</code>指令
<ul>
<li><code>sudo yum install 软件名</code></li>
</ul></li>
<li><strong>Ubuntu</strong>：<code>apt-get</code>指令
<ul>
<li><code>sudo apt-get install 软件名</code></li>
</ul></li>
</ul>
<p>通过HTTP或FTP地址直接从终端控制台下载文件，<code>wget</code>
非常稳定，如果是由于网络原因下载失败， <code>wget</code>
会不断尝试，直到整个文件下载完毕。：</p>
<ul>
<li><code>wget http://www.xxx.com/xxx.tar.gz</code>：下载文件
<ul>
<li><code>-c</code>：继续中断了的文件的下载</li>
</ul></li>
</ul>
<h3 id="tar压缩和解压">tar：压缩和解压</h3>
<p>压缩和解压都是用<code>tar</code>指令</p>
<ul>
<li><code>tar -cvf test.tar test</code>：将<code>test</code>目录压缩为<code>test.tar</code>
<ul>
<li><code>-c</code>：创建压缩文件</li>
<li><code>-v</code>：显示详细信息</li>
<li><code>-f</code>：指定压缩文件名</li>
</ul></li>
<li><code>tar -czvf test.tar.gz test</code>：将<code>test</code>目录压缩为<code>test.tar.gz</code>
<ul>
<li><code>-z</code>：使用<code>gzip</code>压缩</li>
</ul></li>
<li><code>tar -xvf test.tar</code>：解压<code>test.tar</code>文件
<ul>
<li><code>-x</code>：解压文件</li>
</ul></li>
</ul>
<h2 id="文件和目录增删改查">3.2 文件和目录增删改查</h2>
<h3 id="pwd查看当前目录">pwd：查看当前目录</h3>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/pwd.png" width="90%"></p>
<h3 id="ls列出当前目录下的文件">ls：列出当前目录下的文件</h3>
<p><strong>常用参数：</strong></p>
<ul>
<li><code>-a</code>：列出所有文件，包括隐藏文件</li>
<li><code>-l</code>：列出详细信息（包括文件权限、文件所有者、文件大小、文件创建时间等）</li>
<li><code>-h</code>：人性化显示文件大小</li>
<li><code>-t</code>：按照文件修改时间排序</li>
</ul>
<h3 id="cd切换目录">cd：切换目录</h3>
<p><strong>常用指令：</strong></p>
<ul>
<li><code>cd</code>：切换到当前用户的家目录</li>
<li><code>cd ~</code>：切换到当前用户的家目录</li>
<li><code>cd /</code>：切换到根目录</li>
<li><code>cd ..</code>：切换到上一级目录</li>
<li><code>cd ./test</code>：切换到当前目录下的<code>test</code>目录</li>
</ul>
<p><code>cd</code>指令可以使用补全功能，按<code>Tab</code>键可以自动补全路径：</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/cd_tab.png" width="90%"></p>
<h3 id="mkdir创建目录">mkdir：创建目录</h3>
<p><code>mkdir test</code>：在当前目录下创建<code>test</code>目录</p>
<h3 id="rmdir删除目录">rmdir：删除目录</h3>
<p><code>rmdir test</code>：删除当前目录下的<code>test</code>目录</p>
<h3 id="touch创建文件">touch：创建文件</h3>
<p><code>touch test.txt</code>：在当前目录下创建<code>test.txt</code>文件</p>
<h3 id="rm删除文件或目录">rm：删除文件或目录</h3>
<p>该指令是一个非常危险的指令，删除后无法恢复</p>
<p><code>rm test.txt</code>：删除当前目录下的<code>test.txt</code>文件</p>
<p><code>rm -rf test</code>：删除<code>test</code>目录(<code>-r</code>表示递归删除，<code>-f</code>表示强制删除)</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/make-remove.png" width="90%"></p>
<h3 id="cp复制文件或目录">cp：复制文件或目录</h3>
<p><code>cp test.txt test2.txt</code>：复制<code>test.txt</code>文件为<code>test2.txt</code></p>
<p><code>cp -r test test2</code>：复制<code>test</code>目录为<code>test2</code>目录</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/cp.png" width="90%"></p>
<h3 id="mv移动文件或目录">mv：移动文件或目录</h3>
<p><code>mv test.txt ./test</code>：将<code>test.txt</code>文件移动到<code>./test</code>目录下</p>
<p><code>mv test test2</code>：将<code>test</code>目录重命名为<code>test2</code></p>
<p><code>mv ./test ./test2</code>：将<code>./test</code>目录移动到<code>./test2</code>目录下</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/mv.png" width="90%"></p>
<h3 id="find查找文件完全符合">find：查找文件（完全符合）</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find &lt;何处&gt; &lt;何物&gt; &lt;做什么&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;何处&gt;</code>：查找的目录</li>
<li><code>&lt;何物&gt;</code>：查找的什么？（文件名<code>-name test.txt</code>、文件类型<code>-type</code>、文件大小<code>-size</code>）</li>
<li><code>&lt;做什么&gt;</code>：查找到后做什么？默认不写的话只会显示找到的文件（打印<code>-print</code>、删除<code>-delete</code>）</li>
</ul>
<p><code>find / -name test.txt</code>：在根目录下查找<code>test.txt</code>文件（这里就没有指定做什么）</p>
<p><code>find / -name test.txt -delete</code>：在根目录下查找<code>test.txt</code>文件并删除</p>
<p><code>find ./ -name *.txt</code>：在当前目录下查找所有的<code>.txt</code>文件</p>
<h3 id="locate查找文件模糊匹配">locate：查找文件（模糊匹配）</h3>
<p>按照文件数据库去匹配查找而不是全盘查找，因此数据库还未更新的话是找不到的</p>
<p>所以一般先执行<code>updatedb</code>命令更新数据库</p>
<p><code>locate test.txt</code>：查找文件名中包含<code>test.txt</code>的文件</p>
<p><code>locate *.txt</code>：查找所有的<code>.txt</code>文件</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/search.png" width="90%"></p>
<h2 id="文本操作">3.3 文本操作</h2>
<h3 id="cat查看小文件内容">cat：查看小文件内容</h3>
<p><code>cat</code>指令会一次性显示文件的<strong>全部内容</strong>，所以对于大文件不适用</p>
<p><code>cat test.txt</code>：查看<code>test.txt</code>文件的内容</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/cat.png" width="90%"></p>
<h3 id="less分页查看文件内容">less：分页查看文件内容</h3>
<p><code>less test.txt</code>：查看<code>test.txt</code>文件的内容，按<code>空格</code>键翻页，按<code>q</code>键退出</p>
<ul>
<li>回车键：向下翻一行</li>
<li><code>y</code>：向上翻一行</li>
<li>空格键：向下翻页</li>
<li><code>b</code>：向上翻页</li>
<li><code>q</code>：退出</li>
<li><code>=</code>：显示当前行号</li>
<li><code>/</code>：搜索(输入关键字后按<code>Enter</code>键)
<ul>
<li><code>/^the</code>：搜索以 "the" 开头的行</li>
<li><code>/pattern1|pattern2</code>：搜索包含 pattern1 或 pattern2
的行</li>
</ul></li>
</ul>
<h3 id="vim编辑器编辑文件">vim编辑器：编辑文件</h3>
<h1 id="四linux下的操作系统和网络操作">四、Linux下的操作系统和网络操作</h1>
<h2 id="系统操作">4.1 系统操作</h2>
<h3 id="查看进程pstopkill">查看进程：ps、top、kill</h3>
<ul>
<li><p><code>ps</code>：<strong>静态查看</strong>当前系统运行的进程（快照，不会实时更新）
<img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/ps.png" width="90%"></p>
<ul>
<li><code>ps -ef</code>：查看所有进程</li>
<li><code>ps -aux | less</code>：按CPU和内存使用率排序</li>
</ul></li>
<li><p><code>top</code>：<strong>动态</strong>查看当前系统运行的进程（每5s实时更新）
<img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/top.png" width="90%"></p>
<p>展示的这些进程是按照使用处理器 <strong>CPU</strong>
的使用率来排序的</p>
<p><code>q</code>：退出</p>
<p><strong>结果解析：</strong></p>
<ul>
<li><code>PID</code>：进程ID</li>
<li><code>USER</code>：进程所有者</li>
<li><code>PR</code>：进程优先级</li>
<li><code>VIRT</code>：使用的虚拟内存</li>
<li><code>RES</code>：使用的物理内存</li>
<li><code>SHR</code>：使用的共享内存</li>
<li><code>S</code>：进程状态(S=睡眠，R=运行，Z=僵尸进程)</li>
<li><code>%CPU</code>：CPU使用率</li>
<li><code>%MEM</code>：RAM使用率</li>
<li><code>TIME+</code>：进程运行时间</li>
<li><code>COMMAND</code>：进程名称</li>
</ul></li>
<li><p><code>kill</code>：杀死进程</p>
<ul>
<li><code>kill 进程号PID</code>：杀死进程</li>
<li><code>kill -9 进程号PID</code>：强制杀死进程</li>
</ul></li>
</ul>
<h3 id="管理进程systemctl">管理进程：systemctl</h3>
<h3 id="reboot重启系统">reboot：重启系统</h3>
<p>需要<code>root</code>权限</p>
<h3 id="shutdown关机">shutdown：关机</h3>
<p>需要<code>root</code>权限</p>
<ul>
<li><code>shutdown -h now</code>：立即关机</li>
<li><code>shutdown -h 10</code>：10分钟后关机</li>
</ul>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/shutdown.png" width="90%"></p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/shutdown2.png" width="90%"></p>
<h3 id="poweroff关机">poweroff：关机</h3>
<p>不需要<code>root</code>权限</p>
<h2 id="网络操作">4.2 网络操作</h2>
<h3 id="查看网络状态ifconfig">查看网络状态：ifconfig</h3>
<p>Windows下的<code>ipconfig</code>在Linux下是<code>ifconfig</code>，可以查看网络接口的信息，包括IP地址、MAC地址等</p>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/ifconfig.png" width="90%"></p>
<p>其中<code>lo</code>是本地回环接口，IP地址是<code>127。0.0.1</code>，每台电脑都应该有这个接口，它对应着<code>localhost</code>，用于本地测试，在某些需求下，我们要连接自己的服务器进行测试，而又不想让局域网或者外网的用户访问，就可以使用这个接口（比如对某个本地运行的项目，我们可以通过<code>localhost</code>或者<code>127.0.0.1:port</code>来访问自己的网站，且只能自己看到）</p>
<h3 id="连接远程服务器ssh">连接远程服务器：ssh</h3>
<p>我们其实在使用<strong>github</strong>或者<strong>gitee</strong>的时候，经常通过配置<code>ssh</code>来连接远程服务器，这样就不用每次都输入密码了，那么它的原理是什么呢？</p>
<p>我们发现<code>Github</code>项目都会提供两个网址，一个是<code>https</code>的，一个是<code>ssh</code>的，所以可以联想到，<code>ssh</code>是一种类似于HTTPS的<strong>安全网络协议</strong>，它可以在不安全的网络中为网络服务提供安全的传输环境</p>
<p>我们之前在配置<strong>hexo</strong>的时候，通过<code>ssh</code>连接到<code>github</code>，这样每次部署到<code>github</code>的时候就不用输入密码了，在实现时，我们在本机客户端会生成两个密钥文件：</p>
<ul>
<li><code>id_rsa</code>：私钥</li>
<li><code>id_rsa.pub</code>：公钥</li>
</ul>
<p>其中<strong>公钥</strong>会被传到服务器配置中，也就是我们在实际操作时将<strong>公钥</strong>添加到<code>github</code>的<code>SSH and GPG keys</code>中</p>
<h1 id="五linux下的进阶问题">五、Linux下的进阶问题</h1>
<h2 id="如何在linux中找到cpu占用高的进程">5.1
如何在Linux中找到CPU占用高的进程</h2>
<p>前面讲到Linux中的<code>top</code>和<code>ps</code>指令都可以查看进程列表中的CPU占用率，但是更倾向于用<strong>动态实时更新的top指令</strong></p>
<p>而用<code>ps</code>的话，虽然只能看静态信息，但是可以很方便地过滤掉一些不需要的列信息，比如只看PID、CPU占用率、运行时间和进程名称：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -eo pid,pcpu,time,comm | sort -k 2 -nr | head -n 10</span><br></pre></td></tr></table></figure>
<p>这个指令的意思是：</p>
<ul>
<li><code>-e</code>：显示所有进程</li>
<li><code>-o</code>：指定输出的列</li>
<li>只显示指定的列：<code>pid</code>、<code>pcpu</code>、<code>time</code>、<code>comm</code></li>
<li><code>sort -k 2 -nr</code>：按照第二列<code>pcpu</code>排序，<code>-n</code>表示按照数字排序，<code>-r</code>表示降序</li>
<li><code>head -n 10</code>：只显示前10行（top10）</li>
</ul>
<p><img src="/2024/05/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E7%9A%84Linux%E6%93%8D%E4%BD%9C/ps_sort.png" width="90%"></p>
<h2 id="如何在linux中排查占用率100的问题">5.2
如何在Linux中排查占用率100%的问题</h2>
<p><strong>1）top指令查看当前CPU占用率最高的进程PID</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>
<p><strong>2）top查看该进程下各线程的CPU占用率</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top -H -p 进程号PID</span><br></pre></td></tr></table></figure>
<p><strong>3）执行<code>pstack</code>脚本查看当前线程的堆栈信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pstack 进程号PID</span><br></pre></td></tr></table></figure>
<p><strong>4）分析原因</strong></p>
<p>一般从<strong>死锁</strong>、<strong>自旋(锁)时间过长</strong>、<strong>死循环</strong>、<strong>内存泄漏</strong>、<strong>I/O日志操作过于频繁（少打印DEBUG的信息）</strong>等方面排查</p>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/carsonzhu/p/17109893.html">Linux下C/C++程序CPU问题分析及优化心得</a>
参考：<a href="https://blog.csdn.net/weixin_38416696/article/details/125083718">c++程序
cpu占用过高排查方法</a></p>
</blockquote>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统结构及进程管理</title>
    <url>/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="一cpu执行过程">一、CPU执行过程</h1>
<h2 id="cpu基本硬件结构">1.1 CPU基本硬件结构</h2>
<p>我们直到，计算机主要是由<strong>CPU、内存、I/O设备</strong>组成的，操作速度<strong>CPU
Cache &gt; 内存 &gt; 硬盘</strong></p>
<ul>
<li>CPU Cache有三级缓存，分别是<strong>L1 &gt; L2 &gt;
L3</strong>，L1速度最快、容量最小、价格最昂贵</li>
</ul>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/Computer_struct.png" width="80%"></p>
<p>而<strong>CPU</strong>是计算机的核心部件，它负责<strong>执行指令、控制操作</strong>等，其执行速度极快，且速度与时钟周期息息相关。CPU的基本硬件结构如下：</p>
<ul>
<li><strong>寄存器</strong>：CPU内部的高速存储器，用于缓存指令、数据等。
<ul>
<li><strong>通用寄存器</strong>：存放<strong>数据</strong></li>
<li><strong>程序计数器</strong>：存放下一条指令的<strong>地址</strong></li>
<li><strong>指令寄存器</strong>：存放当前<strong>指令</strong></li>
</ul></li>
<li><strong>逻辑单元ALU</strong>：负责<strong>执行算术运算、逻辑运算、数据传输、条件分支等</strong></li>
<li><strong>控制单元</strong>：负责<strong>控制指令的执行</strong>
<ul>
<li>负责按照地址从内存中<strong>取出指令</strong></li>
<li>负责<strong>跳转</strong>操作</li>
</ul></li>
</ul>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/CPU_Struct.png"></p>
<h2 id="cpu寻址与位宽的关系">1.2 CPU寻址与位宽的关系</h2>
<h3 id="位宽">1.2.1 位宽</h3>
<p><strong>位宽</strong>是指CPU<strong>一个时间周期</strong>能处理的<strong>数据位数</strong>，例如<strong>32位</strong>或<strong>64位</strong>，位宽越大，CPU处理数据的能力越强，但同时也会增加成本。</p>
<h3 id="寻址">1.2.2 寻址</h3>
<p><strong>寻址</strong>是指CPU访问内存的方式，是由<strong>地址总线</strong>决定的，因此<strong>寻址</strong>能力与<strong>位宽</strong>是无关的，因为位宽管的是<strong>数据</strong>。</p>
<h3 id="位宽与寻址的关系">1.2.3 位宽与寻址的关系</h3>
<p>场景：</p>
<ul>
<li>当CPU需要从<strong>内存</strong>中读取数据到<strong>寄存器</strong>
或者 <strong>写入数据</strong>到物理内存时</li>
</ul>
<p>流程：</p>
<ul>
<li>CPU会先通过<strong>地址总线</strong>指定需要访问的<strong>物理内存地址</strong></li>
<li>在指定的<strong>物理内存地址</strong>通过<strong>数据总线</strong>进行<strong>读取</strong>或<strong>写入</strong>操作</li>
</ul>
<h2 id="cpu执行指令过程">1.3 CPU执行指令过程</h2>
<p>CPU执行指令的<strong>一个指令周期</strong>过程如下：</p>
<ul>
<li>step1：CPU读取<strong>程序计数器</strong>中的<strong>指令地址</strong>（内存地址）</li>
<li>step2：CPU根据指令地址，交由<strong>控制单元</strong>操作<strong>地址总线</strong>去访问指定内存地址，读取指令</li>
<li>step3：CPU将读取到的指令存放到<strong>指令寄存器</strong>中</li>
<li>step4：<strong>程序计数器</strong>完成上述操作后，自增指向下一条指令，其中自增的步长（字节）取决于<strong>CPU位宽</strong>，一般为<strong>32位</strong>或<strong>64位</strong></li>
<li>step5：CPU根据<strong>指令寄存器</strong>中的指令，解析指令类型和参数，对于<strong>计算指令</strong>，将参数从<strong>通用寄存器</strong>中取出，交由<strong>逻辑运算单元ALU</strong>执行计算</li>
</ul>
<h1 id="二用户态与内核态">二、用户态与内核态</h1>
<h2 id="用户态与内核态">2.1 用户态与内核态</h2>
<p>OS中的<strong>内存</strong>根据<strong>权限</strong>划分为两个空间：</p>
<ul>
<li><strong>用户空间（User
Space）</strong>：用户程序运行的空间（权限小，执行普通操作）</li>
<li><strong>内核空间（Kernel
Space）</strong>：操作系统运行的空间（权限大，执行访问磁盘、内存分配、网卡、声卡等敏感操作需要进行安全校验）
-<strong>内核态是用于应用程序跟操作系统、硬件连接的桥梁</strong>，进行<strong>系统调用</strong>、<strong>中断处理</strong>等操作。拥有最高级别的操作权限，可以直接访问如<strong>网卡、硬盘、内存</strong>等资源</li>
</ul>
<p>一个运行中的<strong>进程/程序</strong>，在执行中有可能处于<strong>用户态</strong>或者<strong>内核态</strong>，因此这里就涉及了两个空间之间的切换：</p>
<ul>
<li><strong>用户态---&gt;内核态</strong>：当用户程序需要进行<strong>外部资源申请</strong>时，需要切换到<strong>内核态</strong>，一般有以下几种情况：
<ul>
<li><strong>系统调用</strong>：用户程序通过<strong>系统调用</strong>请求操作系统提供服务（<strong>软中断</strong>）</li>
<li><strong>异常</strong>：用户程序执行过程中出现<strong>异常</strong>，如<strong>除零操作</strong></li>
<li><strong>中断</strong>：外部设备发生<strong>中断</strong>，需要CPU处理</li>
</ul></li>
</ul>
<h3 id="系统调用">2.1.1 系统调用</h3>
<p>一次系统调用一般会触发<strong>两次CPU上下文切换</strong>：</p>
<ul>
<li>第一次是<strong>用户态-&gt;内核态</strong>，要将<strong>寄存器、堆栈信息等</strong>保存到<strong>内核栈</strong>中，用于切回来时程序的恢复</li>
<li>第二次是<strong>内核态-&gt;用户态</strong>，要将<strong>内核栈</strong>中的信息恢复到<strong>用户栈</strong>中，用于程序的继续执行</li>
</ul>
<p><strong>1）系统调用的类型</strong></p>
<p><strong>系统调用</strong>一般有以下几种：</p>
<ul>
<li><strong>进程控制</strong>：如创建进程(<code>fork</code>)、终止进程(<code>exit</code>)</li>
<li><strong>文件操作</strong>：如打开文件(<code>open</code>)、读写文件(<code>read/write</code>)、关闭文件(<code>close</code>)</li>
<li><strong>设备（外设）操作</strong>：如读写设备(<code>read/write</code>)</li>
<li><strong>通信</strong>：如创建管道(<code>pipe</code>)、消息队列(<code>msgget</code>)、<code>mmap</code></li>
</ul>
<p>以<strong>申请内存（malloc）</strong>为例，当<code>C++</code>中调用<code>malloc</code>函数时，实际上会执行<strong>系统调用</strong>：</p>
<ul>
<li><strong>brk</strong>：对于较小的内存申请，会调用<code>brk</code>系统调用</li>
<li><strong>mmap</strong>：对于较大的内存申请，会调用<code>mmap</code>，<code>mmap</code>申请的是<strong>虚拟内存</strong>而不是<strong>物理内存</strong>，当出现<strong>第一次访问</strong>时，会发现该处的<strong>虚拟内存</strong>没有映射到<strong>物理内存</strong>，此时会发生<strong>缺页中断</strong>，操作系统才会将<strong>虚拟内存</strong>映射到<strong>物理内存</strong>中</li>
</ul>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/user_kernal_state.png" width="80%"></p>
<p><strong>2）系统调用的过程</strong></p>
<p>正常情况下，程序是运行在<strong>用户态</strong>内存空间中的</p>
<p>当程序需要执行<strong>系统调用</strong>时，会发现其<strong>权限</strong>不够，此时会产生<strong>中断Trap</strong>（切换到内核态是通过<strong>中断</strong>实现的）</p>
<p>然后CPU跳转到<strong>内核空间</strong>执行<strong>系统调用</strong></p>
<p>在内核态处理完后，再次产生<strong>中断Trap</strong>，并将<strong>系统调用</strong>的结果返回给<strong>用户空间</strong></p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/User_Kernel.png" width="80%"></p>
<h3 id="中断">2.1.2 中断</h3>
<p><strong>1）中断的概念</strong></p>
<p><strong>中断</strong>是指CPU在执行程序时，由于<strong>外部事件</strong>的发生（通常由IO设备触发），当CPU收到<strong>中断号</strong>时，<strong>CPU暂停当前程序的执行</strong>，转而去执行相应的<strong>中断处理程序</strong>，处理完后再返回原来的程序继续执行。</p>
<p>操作系统会注册<strong>中断号</strong>以及其对应的<strong>中断处理程序</strong>（也就是注册后存在中断向量表中），当中断发生时，CPU会根据<strong>中断号</strong>找到对应的<strong>中断处理程序</strong>，并执行。</p>
<p>其中中断向量表的一个节点如下：</p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/CruptTable.png" width="50%"></p>
<p>具体执行中断的步骤如下（以键盘按下为例）：</p>
<ul>
<li><strong>硬件</strong>：键盘按下，会通过<strong>中断控制器</strong>发送<strong>中断信号
n</strong>给<strong>CPU</strong></li>
<li><strong>CPU</strong>：收到<strong>中断信号
n</strong>后，会去<strong>中断向量表</strong>中寻找第 n
个<strong>中断描述符</strong>，从中断描述符中找到<strong>中断处理程序的地址</strong></li>
<li><strong>CPU</strong>：通过<strong>压栈操作</strong>保存当前程序的<strong>状态（原来的程序地址、原来的程序堆栈、原来的标志位）</strong>，然后跳转到<strong>中断处理程序</strong>的地址执行</li>
<li>中断处理程序执行完后，再通过<strong>出栈操作</strong>恢复原来的程序状态，继续执行原来的程序</li>
</ul>
<p><strong>2）操作系统需要中断的原因</strong></p>
<ul>
<li>针对硬件中断：设想一下，如果没有中断机制，那么CPU在执行程序时，还要不断的去<strong>轮询外设</strong>是否有数据到来，导致CPU的<strong>利用率</strong>非常低。</li>
<li>针对软件中断：如果一个应用程序触发了某个操作，需要从<strong>用户态</strong>切换到<strong>内核态</strong>，如果没有<strong>中断机制</strong>，那么CPU会进入<strong>盲等待</strong>状态（等待寄存器空闲）。(<strong>中断机制</strong>可以让CPU在等待时，去执行其他程序)</li>
</ul>
<p><strong>3）CPU触发中断的三种方式</strong></p>
<ul>
<li>通过<strong>中断控制器（外设）</strong>给 CPU 的 <code>INTR</code>
引脚发送信号，CPU 从中断控制器的一个端口上读取中断号。
<ul>
<li>比如按下键盘的一个按键，最终会给到 CPU 一个 0x21 中断号。</li>
</ul></li>
<li>CPU
执行某条指令发现了<strong>异常</strong>，会<strong>自己触发并给自己一个中断号</strong>
<ul>
<li>比如执行到了无效指令，CPU 会给自己一个 0x06 的中断号。</li>
</ul></li>
<li><strong>系统调用</strong>执行 <code>INT n</code> 指令，会直接给 CPU
一个中断号 n
<ul>
<li>比如触发了 Linux 的<strong>系统调用</strong>，实际上就是执行了
<strong>INT 0x80</strong> 指令，那么 CPU 收到的就是一个 0x80
中断号。</li>
</ul></li>
</ul>
<p><strong>4）硬件中断和软件中断</strong></p>
<p>硬件中断和软件中断都属于<strong>硬中断</strong>，只是触发方式不同。</p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/Currpt.png" width="80%"></p>
<p><strong>5）硬中断和软中断</strong></p>
<p>由于中断会打断内核中进程的正常调度运行，所以要求中断服务程序尽可能的短小精悍；但是在实际系统中，当中断到来时，要完成工作往往进行大量的耗时处理。</p>
<p>所以一般 Linux
会把中断分成上下两半部分执行，<strong>上半部分处理最简单的逻辑（硬中断）</strong>，下半部分直接丢给一个<strong>软中断</strong>异步处理。</p>
<p>比如我们进行<strong>网卡</strong>的<strong>数据包</strong>处理时：</p>
<ul>
<li>当网卡收到一个数据包时，将<strong>数据包</strong>放到<strong>内核</strong>的<strong>缓冲区</strong>中，然后会触发一个<strong>硬中断</strong></li>
<li>硬件中断告诉 CPU 有数据包到来并触发一个<strong>软中断</strong></li>
<li><strong>软中断</strong>会在<strong>内核态</strong>异步处理<strong>数据包</strong>的<strong>解析</strong>（如完整性、校验等）</li>
</ul>
<p><strong>硬中断</strong></p>
<p>上述<strong>3）</strong>中提到的三种方式全是<strong>硬中断</strong>（包括中断、异常以及
INT
指令这种软件中断）。整个中断机制是<strong>纯硬件实现的逻辑</strong>，不管触发它的是谁，所以通通叫硬中断。</p>
<p>微观上来说，CPU 在每一个指令周期的最后，都会<strong>留一个 CPU
周期去查看是否有中断</strong>，<strong>硬中断</strong>处理耗时短的操作</p>
<p><strong>软中断</strong></p>
<p><strong>软中断</strong>是处理<strong>硬中断</strong>后，延时处理具体的<strong>耗时</strong>的工作。</p>
<p><strong>主要区别</strong></p>
<ul>
<li><strong>硬中断</strong>是由硬件设备直接触发，通常是即时的，需要<strong>快速响应</strong>。</li>
<li><strong>软中断</strong>是由<strong>内核代码</strong>触发，可以是<strong>延迟的</strong>，用于处理那些不需要立即响应的任务。</li>
</ul>
<h3 id="异常">2.1.3 异常</h3>
<p><strong>异常</strong>是指程序在执行过程中，由于<strong>程序错误</strong>或<strong>CPU故障</strong>等原因，导致<strong>程序无法继续执行</strong>，<strong>CPU</strong>根据异常类型查找<strong>异常向量表</strong>，找到对应的异常处理程序，进行处理。</p>
<h2 id="用户态与内核态的切换的具体实现">2.2
用户态与内核态的切换的具体实现</h2>
<p>以<strong>Linux系统</strong>系统为例，操作系统会为每个进程分配出<strong>内核空间</strong>和<strong>用户空间</strong></p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/memory_type.png" width="30%"></p>
<p>当发生切换时：</p>
<ul>
<li><p><strong>CPU</strong>会涉及<strong>上下文切换</strong>，将<strong>用户态</strong>原来在<strong>CPU中</strong>的<strong>程序计数器</strong>和<strong>栈指针</strong>等寄存器的值保存到<strong>内核态</strong>的<strong>内核栈</strong>中，以便最后<strong>内核态</strong>执行完逐步出栈后，能够恢复到<strong>用户态</strong>的执行状态</p></li>
<li><p>保存完后再更新<strong>CPU</strong>的<strong>程序计数器</strong>和<strong>栈指针</strong>等寄存器的值，将其变为<strong>内核态</strong>的值</p></li>
<li><p>然后才<strong>跳转</strong>到<strong>内核态</strong>执行<strong>系统调用</strong></p></li>
<li><p><strong>系统调用</strong>结束后再次进行<strong>上下文切换</strong>，恢复<strong>CPU的寄存器</strong>的值，将其变为<strong>用户态</strong>的值</p></li>
</ul>
<p>系统调用过程中，并<strong>不会涉及</strong>到<strong>虚拟内存</strong>等进程用户态的资源，也<strong>不会切换进程</strong>。</p>
<p>系统调用过程通常称为<strong>特权模式切换</strong>，而不是进程上下文切换。</p>
<h2 id="用户态与内核态下的线程问题">2.3 用户态与内核态下的线程问题</h2>
<p>实际系统中会存在<strong>用户态线程</strong>和<strong>内核态线程</strong>的问题，关于这部分的<strong>线程</strong>问题将在下面的<strong>进程管理</strong>中详细介绍。</p>
<blockquote>
<p>参考资料：</p>
</blockquote>
<blockquote>
<p><a href="https://blog.csdn.net/Luckiers/article/details/123868625">Linux下软中断过程（详细）源码总结</a></p>
</blockquote>
<blockquote>
<p><a href="https://liuyehcf.github.io/2017/08/20/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/">系统调用</a></p>
</blockquote>
<h1 id="三进程管理">三、进程管理</h1>
<h2 id="进程与线程">3.1 进程与线程</h2>
<h3 id="进程与线程的基本区别">3.1.1 进程与线程的基本区别</h3>
<ul>
<li><strong>进程</strong>：<strong>资源分配</strong>的基本单位</li>
<li><strong>线程</strong>：<strong>CPU调度</strong>的基本单位</li>
</ul>
<p>我们执行一个程序时，实际上是<strong>操作系统</strong>为我们创建了一个<strong>进程</strong>，一个进程中可以有多个线程存在</p>
<ul>
<li><strong>操作系统的三大资源</strong>
<ul>
<li><strong>CPU</strong></li>
<li><strong>内存</strong></li>
<li><strong>文件描述符</strong></li>
</ul></li>
<li><strong>进程分配的资源</strong>
<ul>
<li><strong>内存空间</strong>：代码段、数据段、堆、栈等</li>
<li><strong>文件描述符</strong>：打开的文件、网络连接等</li>
<li><strong>CPU时间片</strong></li>
</ul></li>
<li><strong>线程分配的资源</strong>
<ul>
<li><strong>寄存器</strong>：通用寄存器、程序计数器等</li>
<li><strong>栈</strong>：线程独有的栈空间（从进程的<strong>用户态堆</strong>中分配出来的）</li>
<li><strong>CPU时间片</strong></li>
</ul></li>
</ul>
<p>从最基本的关系来说，<strong>多线程</strong>可以共享其<strong>进程</strong>的<strong>资源（虚拟内存空间、文件描述符资源、信号处理器...）</strong>，各个线程之间<strong>独立</strong>地拥有自己的<strong>栈空间</strong>和<strong>寄存器</strong></p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/process_thread.png" width="80%"></p>
<p><strong>1）线程的优缺点</strong></p>
<ul>
<li><strong>优点</strong>：开销小、通信方便
<ul>
<li><strong>创建快</strong></li>
<li><strong>终止快</strong></li>
<li><strong>切换快</strong>：同一进程的线程切换不需要切换<strong>资源</strong>，只切换独有的<strong>栈空间</strong>和<strong>寄存器</strong></li>
<li>不用重新加载<strong>CPU页表缓存TLB</strong>：进程切换需要改变虚拟地址空间重新加载页表，会导致<strong>TLB（CPU中的页表缓存）失效</strong></li>
<li><strong>通信方便</strong>：同一进程的线程共享<strong>内存空间</strong>，数据传输<strong>不经过内核</strong></li>
</ul></li>
<li><strong>缺点</strong>：单个线程出错会导致整个进程崩溃</li>
</ul>
<p><strong>2）进程的优缺点</strong></p>
<ul>
<li><strong>优点</strong>：<strong>稳定性</strong>高
<ul>
<li><strong>独立性</strong>：进程之间<strong>独立</strong>，一个进程出错不会影响其他进程</li>
<li><strong>资源独立</strong>：进程之间<strong>资源独立</strong>，一个进程的资源不会被其他进程访问</li>
</ul></li>
<li><strong>缺点</strong>：开销大、通信复杂</li>
</ul>
<h3 id="进程与线程的结构描述">3.1.2 进程与线程的结构描述</h3>
<p>进程和线程的结构称为<strong>进程表</strong>和<strong>线程表</strong>，其中包含了进程和线程的<strong>基本信息</strong>，存储于<strong>内核空间</strong>中。</p>
<p><strong>1）进程控制块的结构：PCB</strong></p>
<p>在操作系统中，每个进程具有唯一标识<strong>PCB</strong>（Process
Control
Block）来描述一个进程的基本信息，进程的PCB是系统感知进程的唯一实体，包括：</p>
<ul>
<li><strong>PID</strong>：进程的唯一标识</li>
<li><strong>Name</strong>：进程的名字</li>
<li><strong>State</strong>：进程的状态（运行、就绪、阻塞等）</li>
<li><strong>Priority</strong>：进程的CPU抢占优先级</li>
<li><strong>资源I/O分配</strong>：内存地址、虚拟空间地址、打开和使用的文件描述符等（进程间是通过页表的方式隔离地址空间的）</li>
<li><strong>CPU信息</strong>：主要是记录切片中断保存现场的信息，但是其实<strong>PCB</strong>不够大存不下，所以会有<strong>内核栈</strong>来配合存放这些信息</li>
<li>...... 要频繁转换 <img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/PCB.png" width="80%"></li>
</ul>
<p><strong>2）线程控制块的结构：TCB</strong></p>
<p>线程表中存放的信息与进程类似，包括：</p>
<ul>
<li><strong>Thread ID</strong>：线程的唯一标识</li>
<li><strong>State</strong>：进程的状态（运行、就绪、阻塞等）</li>
<li><strong>Priority</strong>：进程的CPU抢占优先级</li>
<li><strong>CPU信息</strong>：程序计数器等寄存器的值</li>
</ul>
<h3 id="进程与线程的状态类型">3.1.4 进程与线程的状态类型</h3>
<p>我们知道，CPU调度采用的是<strong>时间切片</strong>的方式，所以需要有多个状态来描述进程和线程的状态：</p>
<ul>
<li><strong>创建状态</strong></li>
<li><strong>就绪状态</strong>：维护一个<strong>就绪队列</strong>，等待CPU调度</li>
<li><strong>运行状态</strong>：该时刻正在占用CPU</li>
<li><strong>阻塞状态</strong>：等待某个事件的发生，如I/O磁盘操作读取数据、打印机响应等，避免<strong>占用CPU</strong></li>
<li><strong>挂起状态</strong>：当进程/线程<strong>内存空间</strong>搬至<strong>外存</strong>、<code>sleep</code>、<strong>Ctrl+Z主动挂起</strong>时会进入挂起状态
<ul>
<li><strong>就绪挂起</strong>：内存空间搬至<strong>外存（硬盘）</strong>，但只要重新进入内存就立刻执行</li>
<li><strong>阻塞挂起</strong>：等待某个事件的发生，但只要事件发生就立刻执行w</li>
</ul></li>
<li><strong>终止状态</strong>：进程或线程执行完毕</li>
</ul>
<p>各状态之间具有相互转换的关系：</p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/process_state.png" width="80%"></p>
<p><strong>1）创建状态</strong></p>
<ul>
<li>申请<strong>PCB/TCB</strong>，并初始化</li>
<li>分配内存资源如<strong>内存空间</strong>，并将<strong>代码段</strong>、<strong>数据段</strong>、<strong>堆</strong>、<strong>栈</strong>等加载到内存中</li>
<li>将<strong>PCB/TCB</strong>插入<strong>就绪队列</strong>中</li>
</ul>
<p><strong>2）阻塞状态</strong></p>
<p>当<strong>运行状态</strong>中的进程出现某些系统调用时，如<strong>I/O操作</strong>，会进入<strong>阻塞状态</strong>，等待<strong>事件</strong>的发生</p>
<ul>
<li>找对应的<strong>PCB/TCB</strong>，将其从<strong>就绪队列</strong>中移除</li>
<li>经历<strong>运行状态---&gt;保护现场---&gt;阻塞状态</strong>的过程</li>
<li>将<strong>PCB/TCB</strong>插入<strong>阻塞队列</strong>中</li>
</ul>
<p><strong>3）从阻塞状态唤醒到就绪状态</strong></p>
<p>当<strong>阻塞状态</strong>的进程等待的<strong>事件</strong>发生后，会进入<strong>就绪状态</strong>（信号触发）</p>
<ul>
<li>查找PCB/TCB，将其从<strong>阻塞队列</strong>中移除</li>
<li>将其插入<strong>就绪队列</strong>中等待调度</li>
</ul>
<p><strong>4）终止状态</strong></p>
<ul>
<li>查找PCB</li>
<li>从<strong>运行状态</strong>停止，也就是归还CPU</li>
<li>子进程变成<strong>孤儿进程</strong>交给<strong>init</strong>
<strong>1号</strong>进程接管</li>
<li>归还资源给操作系统</li>
<li>从<strong>PCB/TCB队列</strong>中移除</li>
</ul>
<h3 id="cpu调度算法">3.1.4 CPU调度算法</h3>
<p>调度关系着CPU的<strong>利用率</strong>和<strong>响应时间</strong>，当进程/线程进入<strong>运行状态</strong>就是占用了CPU，而什么时候占用就与调度算法有很大关系了</p>
<p><strong>什么时候触发调度？</strong></p>
<p>总的来说，在上面那张状态图中，跟<strong>运行状态</strong>相关联的<strong>就绪状态</strong>、<strong>阻塞状态</strong>、<strong>终止状态</strong>的出现都会触发调度</p>
<ul>
<li><strong>时间片用完</strong>：出现<strong>就绪态---运行态</strong>的转换</li>
<li><strong>发生阻塞</strong>：当出现阻塞事件时，正在运行的进程会进入阻塞状态，此时会触发调度重新选一个进程执行</li>
<li><strong>进程终止</strong></li>
</ul>
<p><strong>调度算法</strong></p>
<p>调度算法是为了<strong>提高CPU的利用率</strong>和<strong>响应时间</strong>，调度算法有<strong>抢占式</strong>和<strong>非抢占式</strong>之分：</p>
<ul>
<li><strong>非抢占式</strong>：进程一旦进入<strong>运行状态</strong>，就一直运行，直到进程<strong>终止</strong>或<strong>阻塞</strong>，才会调度其他进程</li>
<li><strong>抢占式</strong>：进程在<strong>运行状态</strong>时，会根据<strong>时间片</strong>或<strong>优先级</strong>等因素，被其他进程抢占，从而调度其他进程（到时就换）</li>
</ul>
<p>常见的调度算法有：</p>
<ul>
<li><strong>先来先服务（FCFS）</strong>：按照进程到达的先后顺序进行调度
<ul>
<li>每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。</li>
</ul></li>
<li><strong>短作业优先（SJF）</strong>：按照进程的<strong>运行时间</strong>进行入队列
<ul>
<li>每次从就绪队列选择<strong>运行时间最短</strong>的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择<strong>运行时间最短</strong>的进程接着运行。</li>
</ul></li>
<li><strong>时间片轮转（RR）</strong>：按照<strong>时间片</strong>进行调度
<ul>
<li>按照公平原则，每个进程都有一个<strong>时间片</strong>，当时间片用完后，会重新进入<strong>就绪队列</strong>，等待下一次调度</li>
</ul></li>
<li><strong>优先级调度</strong>：按照<strong>优先级</strong>进行调度
<ul>
<li>每次从就绪队列选择<strong>优先级最高</strong>的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择<strong>优先级最高</strong>的进程接着运行。</li>
</ul></li>
<li><strong>多级反馈队列调度</strong>：结合<strong>时间片轮转</strong>和<strong>优先级调度</strong>的调度算法
<ul>
<li>将<strong>就绪队列</strong>分为<strong>多个队列</strong>，每个队列有一个<strong>时间片</strong>，<strong>优先级</strong>逐渐降低，当一个进程<strong>时间片</strong>用完后，会进入<strong>下一个队列</strong>等待调度</li>
</ul></li>
</ul>
<h2 id="上下文切换">3.2 上下文切换</h2>
<p>当CPU出现<strong>调度</strong>，需要切换到其他进程时，会涉及到<strong>上下文切换</strong>，需要经过<strong>当前进程</strong>的<strong>保存现场</strong>和<strong>下一个进程</strong>的<strong>加载恢复现场</strong></p>
<p>在切换前程序会先停止运行，然后<strong>触发中断保护现场</strong>，之后操作系统会将<strong>寄存器信息</strong>压栈到<strong>PCB+内核栈</strong>中</p>
<p>现代操作系统都是直接调度<strong>线程</strong>，而不是<strong>进程</strong>，因为<strong>线程</strong>的<strong>切换</strong>比<strong>进程</strong>的<strong>切换</strong>要快</p>
<ul>
<li><strong>线程</strong>的<strong>上下文切换</strong>只需要<strong>切换栈</strong>和<strong>寄存器</strong>即可</li>
<li><strong>进程</strong>的<strong>上下文切换</strong>需要<strong>切换页表</strong>、<strong>切换内存空间</strong>等操作</li>
</ul>
<h3 id="触发上下文切换的场景">3.2.1 触发上下文切换的场景</h3>
<p>当出现<strong>CPU当前运行状态的进程/线程需要转换为另一个进程/线程的场景时（也就是发生调度）</strong>，就会触发<strong>上下文切换</strong>，主要有以下几种情况：</p>
<ul>
<li><strong>运行状态&lt;---&gt;就绪状态</strong>
<ul>
<li><strong>时间片用完，剥夺CPU，通过时间中断实现切换</strong></li>
</ul></li>
<li><strong>运行状态&lt;---&gt;挂起状态</strong>
<ul>
<li><strong>资源不足挂起</strong></li>
<li><strong>sleep主动挂起</strong></li>
</ul></li>
<li><strong>运行状态&lt;---&gt;阻塞状态</strong>
<ul>
<li><strong>硬件中断</strong>：如<strong>I/O操作</strong>等</li>
</ul></li>
</ul>
<h3 id="线程和进程上下文切换比较">3.2.2 线程和进程上下文切换比较</h3>
<p>要比较两者的上下文切换区别，首先要分别了解<strong>进程</strong>和<strong>线程</strong>的<strong>上下文切换</strong>具体切换了什么内容？</p>
<p><strong>1）上下文指什么？</strong></p>
<p>上下文可以分为<strong>用户上下文</strong>、<strong>系统上下文</strong>和<strong>硬件上下文</strong>：</p>
<ul>
<li><strong>用户上下文</strong>：用户态的地址空间（用户空间）、页表等信息</li>
<li><strong>系统上下文</strong>：PCB+内核栈等信息</li>
<li><strong>硬件上下文</strong>：寄存器、程序计数器等信息</li>
</ul>
<p><strong>2）进程、线程、协程上下文切换的内容</strong></p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/context_switch.png" width="60%"></p>
<h3 id="上下文切换的过程">3.2.3 上下文切换的过程</h3>
<p>进程<strong>状态的切换</strong>会触发进程的<strong>上下文切换</strong>，而切换是由<strong>中断驱动实现的</strong></p>
<p>以进程为例，首先要了解进程的组成，进程的切换中<strong>保护线程</strong>就是围绕进程的组成来进行的：</p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/process_struct.png" width="80%"></p>
<p>具体过程主要为</p>
<ul>
<li><strong>硬件中断</strong>：CPU收到<strong>中断信号</strong>后，会<strong>暂停当前进程</strong>的执行</li>
<li><strong>保存当前进程的上下文</strong>：先将<strong>SP</strong>、<strong>PC</strong>保存至<strong>内核栈</strong>中</li>
<li><strong>切换到内核态</strong>：<strong>程序计数器PC</strong>重新指向<strong>内核态</strong>的<strong>中断处理程序</strong></li>
<li><strong>中断处理程序</strong>：执行<strong>中断处理程序</strong>，将通用寄存器保存下来</li>
<li><strong>调度新进程</strong>：根据<strong>调度算法</strong>选择新的进程，将其<strong>PCB、内核栈</strong>中的<strong>寄存器</strong>信息恢复到<strong>CPU</strong>中</li>
</ul>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/process_switch.png" width="80%"></p>
<blockquote>
<p>参考资料：</p>
<p><a href="https://www.bilibili.com/video/BV1PK411w75b/?vd_source=fa61c94b4d0a0af186e3cb794e46eea9">用户级thread_内核级thread_内核thread之区别</a></p>
<p><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%87%8D%E5%AD%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%AE%8C/14%20%20%E7%94%A8%E6%88%B7%E6%80%81%E5%92%8C%E5%86%85%E6%A0%B8%E6%80%81%EF%BC%9A%E7%94%A8%E6%88%B7%E6%80%81%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%86%85%E6%A0%B8%E6%80%81%E7%BA%BF%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F.md">用户态和内核态：用户态线程和内核态线程有什么区别？</a></p>
<p><a href="https://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E9%87%8D%E5%AD%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%AE%8C/17%20%20%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%EF%BC%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%BC%80%E9%94%80%E6%AF%94%E7%BA%BF%E7%A8%8B%E5%A4%A7%E5%9C%A8%E4%BA%86%E5%93%AA%E9%87%8C%EF%BC%9F.md">17
进程和线程：进程的开销比线程大在了哪里？</a></p>
<p><a href="https://xiaolincoding.com/os/4_process/process_base.html#%E8%BF%9B%E7%A8%8B">5.1
进程、线程基础知识</a></p>
</blockquote>
<h2 id="协程">3.3 协程</h2>
<p>相比于进程和线程<strong>，</strong>协程<strong>是一种</strong>用户态<strong>的</strong>轻量级线程**</p>
<p><strong>协程 VS 线程</strong></p>
<ul>
<li><p><strong>协程</strong>的<strong>切换</strong>是<strong>用户态</strong>的<strong>切换</strong>，由<strong>内核态</strong>调度的（纯软实现），而<strong>线程</strong>需要频繁转换<strong>用户态&lt;---&gt;内核态</strong>，因此<strong>协程</strong>的<strong>切换</strong>速度比<strong>线程</strong>的<strong>切换</strong>速度更快</p></li>
<li><p>相比于<strong>线程</strong>上下文切换需要<strong>内核态+寄存器</strong>，<strong>协程</strong>的<strong>上下文内容</strong>只有硬件上下文，也就是<strong>寄存器（SP、PC、DX）</strong>的内容</p></li>
</ul>
<p><strong>进程 VS 线程 VS 协程</strong></p>
<table>
<colgroup>
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
</colgroup>
<thead>
<tr>
<th style="text-align: center;"></th>
<th style="text-align: center;">进程</th>
<th style="text-align: center;">线程</th>
<th style="text-align: center;">协程</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><strong>切换内容</strong></td>
<td style="text-align: center;">用户态（页表）+内核态+硬件上下文</td>
<td style="text-align: center;">用户态+内核态+硬件上下文</td>
<td style="text-align: center;">硬件上下文</td>
</tr>
<tr>
<td style="text-align: center;"><strong>切换位置</strong></td>
<td style="text-align: center;">内核态</td>
<td style="text-align: center;">内核态</td>
<td style="text-align: center;">用户态</td>
</tr>
<tr>
<td style="text-align: center;"><strong>切换速度</strong></td>
<td style="text-align: center;">低</td>
<td style="text-align: center;">中</td>
<td style="text-align: center;">高</td>
</tr>
</tbody>
</table>
<p><strong>协程的实现</strong></p>
<p>协程属于<strong>用户态</strong>的<strong>线程</strong>，因此其实现是在用户态的<strong>堆</strong>中malloc出来的<strong>栈空间</strong>，并在<strong>用户态</strong>中进行<strong>切换</strong>，<strong>切换</strong>时只需要<strong>保存寄存器</strong>的信息即可</p>
<p>根据堆中开辟空间的方式，<strong>有栈协程</strong>可以分为<strong>独立栈</strong>和<strong>共享栈</strong>两种：</p>
<ul>
<li><strong>独立栈</strong>：每个协程都有自己的<strong>栈空间</strong>
<ul>
<li><strong>优点</strong>：<strong>切换</strong>时只需要<strong>切换栈指针</strong>即可，无需再次拷贝，因此比较快</li>
<li><strong>缺点</strong>：独占内存资源，<strong>栈空间</strong>较大时会占用较多内存</li>
</ul></li>
<li><strong>共享栈</strong>：所有协程共享一个<strong>栈空间</strong>
<ul>
<li><strong>优点</strong>：节省内存资源</li>
<li><strong>缺点</strong>：<strong>切换</strong>时需要<strong>拷贝栈空间</strong>，因此<strong>切换</strong>速度较慢</li>
</ul></li>
</ul>
<p>在堆区中，协程的空间通过<strong>esp</strong>和<strong>ebp</strong>来控制</p>
<ul>
<li><strong>esp</strong>表示<strong>栈顶</strong></li>
<li><strong>ebp</strong>表示<strong>栈底</strong></li>
</ul>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/coroutine.png" width="20%"></p>
<h2 id="进程间通信">3.4 进程间通信</h2>
<p>进程间通信主要有<strong>管道</strong>、<strong>消息队列</strong>、<strong>共享内存</strong>、<strong>信号量</strong>、<strong>信号</strong>、<strong>套接字</strong>等方式</p>
<h3 id="管道pipe">3.4.1 管道Pipe</h3>
<p>管道是一种<strong>半双工</strong>的<strong>通信方式</strong>，由<strong>读端</strong>和<strong>写端</strong>组成的<strong>单向</strong>通信方式</p>
<p>我们最常见的Linux中的指令<code>|</code>其实就代表了<strong>管道</strong>的使用，如<code>ps aux | grep mysql</code></p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/pipe.png" width="50%"></p>
<p>管道可以分为<strong>匿名管道</strong>和<strong>有名管道</strong>：</p>
<ul>
<li><strong>匿名管道</strong>：无文件实体，只能用于<strong>父子进程</strong>或<strong>兄弟进程</strong>之间的通信</li>
<li><strong>有名管道</strong>：存在文件实体，可以用于<strong>任意进程</strong>之间的通信</li>
</ul>
<p><strong>1）存储方式</strong></p>
<ul>
<li>管道属于<strong>内核里的一块缓冲区</strong></li>
<li>数据无格式</li>
<li><strong>读端</strong>读取数据后，<strong>缓冲区</strong>中的数据就会被清空</li>
<li>大小有限，<strong>满了</strong>会<strong>阻塞写端</strong>，<strong>空了</strong>会<strong>阻塞读端</strong></li>
</ul>
<p><strong>2）缺点</strong></p>
<p>通信效率低，不适合<strong>大量数据、频繁通信</strong>的场景</p>
<h3 id="消息队列mq">3.4.2 消息队列MQ</h3>
<p><strong>1）存储方式</strong></p>
<ul>
<li><strong>消息队列</strong>是以<strong>消息链表</strong>的形式存储的</li>
<li><strong>消息队列</strong>中的<strong>消息</strong>是有<strong>格式</strong>的，可以是<strong>结构体</strong>等</li>
<li>有固定大小的存储块</li>
</ul>
<p><strong>2）优点</strong></p>
<ul>
<li>适用于频繁的数据交流</li>
</ul>
<p><strong>3）缺点</strong></p>
<ul>
<li>通信不及时：<strong>消息队列</strong>是<strong>异步</strong>的，<strong>发送</strong>和<strong>接收</strong>消息的时间不一定是同步的</li>
<li>存储块有限，不适合<strong>大量数据</strong>的通信</li>
<li>存在用户态和内核态的<strong>数据拷贝</strong>开销：<strong>发送</strong>和<strong>接收</strong>消息时，需要<strong>数据拷贝</strong>，效率较低</li>
</ul>
<h3 id="共享内存">3.4.3 共享内存</h3>
<p><strong>1）存储方式</strong></p>
<p>通过拿出一块<strong>虚拟内存</strong>，然后<strong>映射</strong>到<strong>物理内存</strong>中，实现<strong>共享内存</strong>的通信</p>
<p><strong>2）优点</strong></p>
<p>通过<strong>映射</strong>的方式不需要<strong>数据拷贝</strong>，效率较高</p>
<h3 id="信号量">3.4.4 信号量</h3>
<p>信号量只是一个<strong>计数值</strong>，通常用于进程or线程的<strong>数据同步</strong>、防止多进程竞争共享资源</p>
<p>信号量有两个关键操作（P&amp;V操作）：</p>
<ul>
<li><strong>P操作：请求资源，对应C++的.wait()</strong>
<ul>
<li>信号量减1</li>
<li><code>sem&lt;0</code>：阻塞，表示无资源可用</li>
<li><code>sem&gt;0</code>：继续执行</li>
</ul></li>
<li><strong>V操作：释放资源，对应C++中的.signal()</strong>
<ul>
<li>信号量加1</li>
<li><code>sem&lt;=0</code>：唤醒一个等待的进程</li>
</ul></li>
</ul>
<h2 id="其它进程类型">3.5 其它进程类型</h2>
<p>进程有多种类型，主要有<strong>孤儿进程</strong>、<strong>僵尸进程</strong>、<strong>守护进程</strong>等，通过Linux的<code>ps</code>命令可以查看，进程间通过pid号来区分</p>
<h3 id="孤儿进程无害会自动回收">3.5.1 孤儿进程：无害（会自动回收）</h3>
<p><strong>孤儿进程</strong>是指<strong>父进程退出</strong>后，<strong>子进程</strong>还在运行</p>
<p>此时<strong>子进程</strong>的<strong>父进程</strong>会被进程号为1的<strong>init</strong>进程接管，操作系统会定期清理<strong>孤儿进程</strong></p>
<h3 id="僵尸进程有危害">3.5.2 僵尸进程：有危害</h3>
<p>进程<strong>exit()</strong>退出内核后会<strong>释放该进程的所有资源</strong>（打开的文件、占用内存等），但是不会主动<strong>回收</strong>该进程的<strong>PCB</strong>，也就是该<strong>进程号</strong>还一直被占用</p>
<p><strong>僵尸进程</strong>是指一个<strong>子进程</strong>已经<strong>exit()</strong>，但是<strong>父进程</strong>还没有<strong>回收</strong>它的<strong>PCB</strong>，导致<strong>子进程</strong>的<strong>PCB</strong>一直保存在<strong>内核</strong>中，这种进程就是<strong>僵尸进程</strong></p>
<p><strong>僵尸进程</strong>会占用<strong>系统资源（进程号有限）</strong>，因此需要<strong>回收</strong>它，回收有两种方式：</p>
<ul>
<li><strong>父进程主动回收</strong>
<ul>
<li>子进程退出时发送<strong>SIGCHLD</strong>信号给父进程，父进程通过<strong>wait()或waitpid()方法</strong>回收子进程</li>
</ul></li>
<li><strong>Kill父进程:向父进程对应的pid发送SIGKILL(9)，<code>kil -9 ppid</code></strong>
<ul>
<li>当父进程退出时，子进程会变为<strong>孤儿进程</strong>，被<strong>init</strong>进程接管并定期清理</li>
</ul></li>
</ul>
<h3 id="守护进程">3.5.3 守护进程</h3>
<p><strong>守护进程</strong>是一种在<strong>挂在后台</strong>运行的进程，通常用于<strong>系统服务</strong>的启动和管理</p>
<p>它会定期执行一些<strong>系统任务</strong>，如<strong>日志清理</strong>、<strong>定时任务</strong>等；其父进程是<strong>init</strong>进程，因此不会成为<strong>僵尸进程</strong>，同时操作系统结束它才会结束</p>
<h2 id="多线程同步问题">3.6 多线程同步问题</h2>
<p>多线程之间会存在<strong>资源竞争</strong>的问题，因此有<strong>互斥</strong>和<strong>同步</strong>的问题</p>
<ul>
<li><strong>互斥</strong>：某段代码同一时间只能被一个线程访问，其它线程需要阻塞等待进入</li>
<li><strong>同步</strong>：多个线程之间的<strong>数据互通</strong>需要协调工作，如<strong>生产者-消费者模型</strong>、<strong>读写锁</strong>等</li>
</ul>
<h3 id="为什么多线程需要同步">3.6.1 为什么多线程需要同步？</h3>
<p>假设有多线程共享的变量<code>i</code>，当执行<code>i=i+1</code>时，实际上在汇编层面上不是一个原子操作，而是分为<strong>读取</strong>、<strong>计算</strong>、<strong>写入</strong>三个步骤：</p>
<ul>
<li><strong>读取</strong>：内存中<code>i</code>的值--&gt;寄存器中</li>
<li><strong>计算</strong>：寄存器中的值+1</li>
<li><strong>写入</strong>：寄存器中的值--&gt;内存中<code>i</code></li>
</ul>
<p>因此多线程很有可能在其中某个步骤被<strong>抢占</strong>，导致<strong>数据不一致</strong>的问题</p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/crrupt.png" width="60%"></p>
<p>在文章<a href="https://akirazheng.github.io/2024/02/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88C++%EF%BC%89/#/%E4%BA%8C%E3%80%81C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0">从0开始实现线程池(C++)</a>中有介绍<strong>互斥锁解决多线程数据共享问题</strong>以及<strong>死锁</strong>问题的代码模拟，这里不再赘述</p>
<h3 id="实现同步的方式">3.6.2 实现同步的方式</h3>
<p>实现同步有<strong>加锁</strong>和<strong>不加锁</strong>两种方式：</p>
<ul>
<li><strong>不加锁</strong>：通过原子操作来保证数据的一致性，如<strong>CAS、TAS</strong>等</li>
<li><strong>加锁</strong>：通过<strong>互斥锁</strong>、<strong>读写锁</strong>、<strong>条件变量</strong>等方式来保证数据的一致性</li>
</ul>
<p>也可以将锁分为<strong>乐观锁（通常也是无锁编程）</strong>和<strong>悲观锁</strong>：</p>
<ul>
<li><strong>乐观锁</strong>：先修改完共享资源，再验证这段时间内有没有发生冲突，如果没有其他线程在修改资源，那么操作完成，如果发现有其他线程已经修改过这个资源，就放弃本次操作
<ul>
<li>重写成本高，不适合冲突频繁场景</li>
<li>通常加入<strong>版本号/时间戳</strong>等字段作为<strong>乐观锁</strong>的判断依据</li>
</ul></li>
<li><strong>悲观锁</strong>：认为多线程同时修改共享资源的概率比较高，于是很容易出现冲突，所以访问共享资源前，先要上锁
<ul>
<li>适合冲突频繁场景</li>
<li>锁住等待的成本高</li>
</ul></li>
</ul>
<p>各种锁如下所示：</p>
<p><img src="/2024/04/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%8F%8A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/lock.png" width="100%"></p>
<h3 id="死锁问题">3.6.3 死锁问题</h3>
<p>在文章<a href="https://akirazheng.github.io/2024/02/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88C++%EF%BC%89/#/%E4%BA%8C%E3%80%81C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0">从0开始实现线程池(C++)</a>中有介绍<strong>互斥锁解决多线程数据共享问题</strong>以及<strong>死锁</strong>问题的代码模拟，这里不再赘述</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>文件描述符</title>
    <url>/2024/05/18/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="一内核缓冲区page-cache">一、内核缓冲区Page Cache</h1>
<p>进程在调用write函数写入文件描述符时，其实不是直接写入文件，而是</p>
<ul>
<li>先<strong>中段</strong>到内核空间</li>
<li>然后再由内核空间写入<strong>内核缓冲区Page
Cache</strong>(因为内核缓冲区相较于磁盘I/O速度更快)</li>
<li>最后内核会在适当的时机<strong>将内核缓冲区的内容写入磁盘</strong></li>
</ul>
<p>通过这种机制，可以<strong>减少操作磁盘I/O的次数</strong>，提高磁盘I/O效率（当然也可以通过<code>mmap</code>函数将文件映射到内存中，这样就可以直接操作内存，内存中的操作既快速，又不用经过内核态&lt;--&gt;用户态的切换，更加高效）</p>
<p>如果想立即将内核缓冲区的内容写入磁盘，可以调用<code>fsync</code>函数（调用<code>fflush</code>函数也会将缓冲区的内容强制写入磁盘，而不等待缓冲区满再刷新）</p>
<h1 id="二零拷贝技术mmap">二、零拷贝技术：mmap</h1>
<p>磁盘相对于计算机中的CPU、内存来说，属于慢速设备，因此针对磁盘的优化，有我们上述讲到的<strong>通过内核态中的缓冲区Page
Cache减少I/O访问次数</strong>，还有通过<strong>零拷贝技术</strong>来减少数据在内核态和用户态之间的拷贝次数</p>
<p>如果通过中断的方式，当我们发生系统调用<code>read</code>时，内核会将<strong>磁盘中的数据拷贝到内核缓冲区(第一次拷贝)</strong>，然后再将<strong>内核缓冲区的数据拷贝到用户缓冲区</strong>，这样就发生了两次拷贝</p>
<p><img src="/2024/05/18/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/two_copy.png" width="80%"></p>
<p>也就是说在大量数据拷贝过程都需要<strong>CPU</strong>参与搬运，这样会浪费CPU资源，降低效率</p>
<p>因此进一步可以通过<strong>DMA直接内存访问技术</strong>进行优化：</p>
<ul>
<li><p>在不占用CPU资源的情况下(此时CPU可以执行其它任务)，将数据从磁盘拷贝到内核缓冲区</p></li>
<li><p>当DMA读取了足够多的数据，再通知<strong>CPU</strong>将数据从内核缓冲区拷贝到用户缓冲区，这样就只发生了一次拷贝</p></li>
</ul>
<p><img src="/2024/05/18/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/one_copy.png" width="80%"></p>
<p>即使采用<strong>DMA</strong>技术，还是需要通过<strong>CPU</strong>进行一次拷贝，具体通过<code>read</code>和<code>write</code>的流程如下所示(<strong>各发生2次用户态&lt;--&gt;内核态的上下文切换</strong>，一次切换需要耗时几十纳秒到几微秒；以及<strong>各发生一次DMA拷贝+一次CPU拷贝</strong>)：</p>
<p>'''shell read(file, buffer, size) write(socketfd, buffer, size)
'''</p>
<p><img src="/2024/05/18/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/read_write.png" width="80%"></p>
<p>而实际上，多次拷贝是没必要的，我们可以通过<code>mmap</code>函数将文件映射到内存中，使<code>read</code>和<code>write</code>直接操作<strong>共享的内核缓冲区</strong>，这样就可以<strong>减少一次拷贝，但也不是完全的零拷贝</strong>，具体流程如下：</p>
<p>'''shell buf = mmap(file, size) write(socketfd, buf, size) '''</p>
<p><img src="/2024/05/18/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/mmap.png" width="80%"></p>
<p>真正的零拷贝是Linux上提供的<code>sendfile</code>函数，它可以直接将文件描述符之间的数据拷贝，而<strong>不需要经过用户态，完全存在内核态中，只经过2次拷贝</strong>，具体流程如下：</p>
<p>'''shell sendfile(out_fd, in_fd, offset, size) '''</p>
<p><img src="/2024/05/18/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/sendfile.png" width="80%"></p>
<blockquote>
<p>参考：<a href="https://xiaolincoding.com/os/8_network_system/zero_copy.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-dma-%E6%8A%80%E6%9C%AF">什么是零拷贝？</a></p>
</blockquote>
<h1 id="三io多路复用技术">三、I/O多路复用技术</h1>
<h2 id="linux中的五中io模型">3.1 Linux中的五中I/O模型</h2>
<ul>
<li><strong>阻塞I/O</strong>：调用<code>socket.read()</code>或<code>socket.write()</code>时，如果没有数据可读或写，会一直阻塞等待，直到有数据可读或写
<ul>
<li>适合计算密集型，因为计算密集型消耗的是CPU资源</li>
</ul></li>
<li><strong>非阻塞I/O</strong>：不断轮训查看数据是否准备好，所以非阻塞I/O也不会交出CPU
<ul>
<li>适合传视频，一直占用CPU减少线程切换的成本</li>
</ul></li>
<li><strong>I/O复用</strong>：通过<code>select</code>、<code>poll</code>、<code>epoll</code>等函数，可以同时监听多个文件描述符，当其中任何一个文件描述符就绪时，就可以进行读写操作（监听的文件描述符本身也是阻塞的）</li>
<li><strong>信号驱动I/O</strong>：通过信号来通知应用程序I/O已经完成</li>
<li><strong>异步I/O</strong>：通过<code>aio_read</code>、<code>aio_write</code>等函数，可以在I/O操作完成后通知应用程序（应用程序发起I/O后可以直接进行其它操作，不用等待I/O完成）</li>
</ul>
<p>在文章<a href="https://akirazheng.github.io/2024/03/04/WebServer%E5%AD%A6%E4%B9%A03%EF%BC%9Asocket%E7%BC%96%E7%A8%8B%E4%B8%8Eepoll%E5%AE%9E%E7%8E%B0I-O%E5%A4%8D%E7%94%A8/#/%E4%BA%8C%E3%80%81I-O%E5%A4%8D%E7%94%A8">WebServer学习3：socket编程与epoll实现I/O复用</a>中已经有详细介绍，这里不再赘述</p>
<h1 id="四事件驱动模型">四、事件驱动模型</h1>
<p>在文章<a href="https://akirazheng.github.io/2024/03/05/WebServer%E5%AD%A6%E4%B9%A04%EF%BC%9A%E5%B9%B6%E5%8F%91%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%BC%8FReactor%E5%92%8CProactor/">WebServer学习4：并发事件驱动模式Reactor和Proactor</a>中已经有详细介绍，这里不再赘述</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫实现QQ群作业的批量下载</title>
    <url>/2024/12/18/%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0QQ%E7%BE%A4%E4%BD%9C%E4%B8%9A%E7%9A%84%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<blockquote>
<p>前提：使用者需要有该群聊的管理者权利，才可以下所有人的作业</p>
</blockquote>
<blockquote>
<p>下载结果：该博文可以实现将群内所有作业全部下载下来放在<code>downloaded</code>，并按照每个实验单独一个文件夹、每个实验内按照n个群成员生成n个对应文件夹（作业放在该文件夹中）</p>
</blockquote>
<h1 id="一qq群抓包">一、qq群抓包</h1>
<p>由于批量下载的爬虫代码中需要获取QQ群聊相关的<code>QQ群号</code>、<code>cookie</code>、<code>bkn</code>信息，因此需要从网页中获取相关值</p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/qq_35834501/article/details/106539199">解密之QQ的bkn值，获取QQ群成员信息，获取QQ好友列表信息</a></p>
</blockquote>
<ul>
<li>先进入<em>https://qun.qq.com/member.html</em>
，其中的<code>cookie</code>和<code>bkn</code>都可以在打开<code>fn+12</code>后切换群聊可以在控制台的网络中获取该值</li>
</ul>
<p><img src="/2024/12/18/%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0QQ%E7%BE%A4%E4%BD%9C%E4%B8%9A%E7%9A%84%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/cookie.png" width="80%" height="80%"></p>
<p><img src="/2024/12/18/%E7%88%AC%E8%99%AB%E5%AE%9E%E7%8E%B0QQ%E7%BE%A4%E4%BD%9C%E4%B8%9A%E7%9A%84%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD/bkn.png" width="80%" height="80%"></p>
<ul>
<li>拿到后再运行<strong>二</strong>中的代码，即可实现批量下载</li>
</ul>
<h1 id="二批量下载">二、批量下载</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> wait <span class="keyword">as</span> pool_wait</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm  <span class="comment"># 进度条库</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">group = <span class="built_in">input</span>(<span class="string">&quot;Group: &quot;</span>)</span><br><span class="line">cookie = <span class="built_in">input</span>(<span class="string">&quot;Cookie: &quot;</span>)</span><br><span class="line">bkn = <span class="built_in">input</span>(<span class="string">&quot;bkn: &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">all_homework = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9999</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;get homework list... page &quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">    r = requests.post(<span class="string">&quot;https://qun.qq.com/cgi-bin/homework/hw/get_hw_list.fcg&quot;</span>, data=&#123;</span><br><span class="line">        <span class="string">&quot;num&quot;</span>: i,</span><br><span class="line">        <span class="string">&quot;group_id&quot;</span>: group,</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="string">&quot;page_size&quot;</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="string">&quot;client_type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;bkn&quot;</span>: bkn</span><br><span class="line">    &#125;, headers=&#123;</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://qun.qq.com/homework/p/features/index.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://qun.qq.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) QQ/9.2.3.26683 Chrome/43.0.2357.134 Safari/537.36 QBCore/3.43.1297.400 QQBrowser/9.0.2524.400&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>: cookie</span><br><span class="line">    &#125;, verify=<span class="literal">False</span>)</span><br><span class="line">    r = r.json()</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line">    <span class="keyword">if</span> r[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;end_flag&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> entry <span class="keyword">in</span> r[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;homework&#x27;</span>]:</span><br><span class="line">        all_homework.append(entry)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;total: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(all_homework)))</span><br><span class="line"><span class="built_in">print</span>(all_homework)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get all students&#x27; homework status</span></span><br><span class="line">details_notyet = <span class="built_in">dict</span>()</span><br><span class="line">details_finish = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> entry <span class="keyword">in</span> all_homework:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;get detail...&quot;</span> + <span class="built_in">str</span>(entry[<span class="string">&#x27;hw_id&#x27;</span>]))</span><br><span class="line">            r = requests.post(<span class="string">&quot;https://qun.qq.com/cgi-bin/homework/fb/get_hw_feedback.fcg&quot;</span>,</span><br><span class="line">                              data=&#123;</span><br><span class="line">                                  <span class="string">&quot;group_id&quot;</span>: group,</span><br><span class="line">                                  <span class="string">&quot;hw_id&quot;</span>: entry[<span class="string">&#x27;hw_id&#x27;</span>],</span><br><span class="line">                                  <span class="string">&quot;status&quot;</span>: <span class="string">&quot;[0,1]&quot;</span>,</span><br><span class="line">                                  <span class="string">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                                  <span class="string">&quot;page_size&quot;</span>: <span class="number">2000</span>,</span><br><span class="line">                                  <span class="string">&quot;need_userinfo&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                                  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;notyet&quot;</span>,</span><br><span class="line">                                  <span class="string">&quot;client_type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                                  <span class="string">&quot;bkn&quot;</span>: bkn</span><br><span class="line">                              &#125;,</span><br><span class="line">                              headers=&#123;</span><br><span class="line">                                  <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://qun.qq.com/homework/p/features/index.html&quot;</span>,</span><br><span class="line">                                  <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://qun.qq.com&quot;</span>,</span><br><span class="line">                                  <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) QQ/9.2.3.26683 Chrome/43.0.2357.134 Safari/537.36 QBCore/3.43.1297.400 QQBrowser/9.0.2524.400&quot;</span>,</span><br><span class="line">                                  <span class="string">&quot;Cookie&quot;</span>: cookie</span><br><span class="line">                              &#125;, verify=<span class="literal">False</span>)</span><br><span class="line">            r = r.json()</span><br><span class="line">            <span class="built_in">print</span>(r)</span><br><span class="line">            details_notyet[entry[<span class="string">&#x27;hw_id&#x27;</span>]] = r</span><br><span class="line"></span><br><span class="line">            r = requests.post(<span class="string">&quot;https://qun.qq.com/cgi-bin/homework/fb/get_hw_feedback.fcg&quot;</span>,</span><br><span class="line">                              data=&#123;</span><br><span class="line">                                  <span class="string">&quot;group_id&quot;</span>: group,</span><br><span class="line">                                  <span class="string">&quot;hw_id&quot;</span>: entry[<span class="string">&#x27;hw_id&#x27;</span>],</span><br><span class="line">                                  <span class="string">&quot;status&quot;</span>: <span class="string">&quot;[2,3]&quot;</span>,</span><br><span class="line">                                  <span class="string">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                                  <span class="string">&quot;page_size&quot;</span>: <span class="number">2000</span>,</span><br><span class="line">                                  <span class="string">&quot;need_userinfo&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                                  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;finish&quot;</span>,</span><br><span class="line">                                  <span class="string">&quot;client_type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                                  <span class="string">&quot;bkn&quot;</span>: bkn</span><br><span class="line">                              &#125;,</span><br><span class="line">                              headers=&#123;</span><br><span class="line">                                  <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://qun.qq.com/homework/p/features/index.html&quot;</span>,</span><br><span class="line">                                  <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://qun.qq.com&quot;</span>,</span><br><span class="line">                                  <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) QQ/9.2.3.26683 Chrome/43.0.2357.134 Safari/537.36 QBCore/3.43.1297.400 QQBrowser/9.0.2524.400&quot;</span>,</span><br><span class="line">                                  <span class="string">&quot;Cookie&quot;</span>: cookie</span><br><span class="line">                              &#125;, verify=<span class="literal">False</span>)</span><br><span class="line">            r = r.json()</span><br><span class="line">            <span class="built_in">print</span>(r)</span><br><span class="line">            details_finish[entry[<span class="string">&#x27;hw_id&#x27;</span>]] = r</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write to db</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;write to db...&quot;</span>)</span><br><span class="line"></span><br><span class="line">db = sqlite3.connect(<span class="string">&quot;homework.db&quot;</span>)</span><br><span class="line">c = db.cursor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> homework_id <span class="keyword">in</span> details_notyet:</span><br><span class="line">    c.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    CREATE TABLE HOMEWORK_&quot;&quot;&quot;</span> + <span class="built_in">str</span>(homework_id) + <span class="string">&quot;&quot;&quot;(</span></span><br><span class="line"><span class="string">       NAME VARCHAR(30) PRIMARY KEY NOT NULL,</span></span><br><span class="line"><span class="string">       FINISHED INTEGER,</span></span><br><span class="line"><span class="string">       CONTENT VARCHAR NOT NULL</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> homework_id <span class="keyword">in</span> details_notyet:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> stu <span class="keyword">in</span> details_notyet[homework_id][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;feedback&#x27;</span>]:</span><br><span class="line">            c.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            INSERT INTO HOMEWORK_&quot;&quot;&quot;</span> + <span class="built_in">str</span>(homework_id) + <span class="string">&quot;&quot;&quot; VALUES (?, 0, ?);</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>, (stu[<span class="string">&#x27;nick&#x27;</span>], <span class="built_in">str</span>(stu)))</span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no notyet &quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> stu <span class="keyword">in</span> details_finish[homework_id][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;feedback&#x27;</span>]:</span><br><span class="line">            c.execute(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            INSERT INTO HOMEWORK_&quot;&quot;&quot;</span> + <span class="built_in">str</span>(homework_id) + <span class="string">&quot;&quot;&quot; VALUES (?, 1, ?);</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>, (stu[<span class="string">&#x27;nick&#x27;</span>], <span class="built_in">str</span>(stu)))</span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no finish &quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># find urls</span></span><br><span class="line">all_urls = <span class="built_in">set</span>()</span><br><span class="line">regex = re.<span class="built_in">compile</span>(<span class="string">r&#x27;(https?|ftp|file)://[-A-Za-z0-9+&amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;@#/%=~_|]&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> details_notyet:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> regex.finditer(<span class="built_in">str</span>(details_notyet[i])):</span><br><span class="line">        all_urls.add(i2.group())</span><br><span class="line">    <span class="keyword">for</span> i2 <span class="keyword">in</span> regex.finditer(<span class="built_in">str</span>(details_finish[i])):</span><br><span class="line">        all_urls.add(i2.group())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;total urls: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(all_urls)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## download files</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_and_save</span>(<span class="params">homework_id, student_folder, file_info, max_retries=<span class="number">3</span></span>):</span></span><br><span class="line">    file_name = file_info[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    target_url = file_info[<span class="string">&#x27;url&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建学生文件夹</span></span><br><span class="line">    student_path = os.path.join(<span class="string">&quot;downloaded&quot;</span>, homework_id, student_folder)</span><br><span class="line">    os.makedirs(student_path, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    file_path = os.path.join(student_path, file_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果文件已经存在，则跳过下载</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;file_name&#125;</span> already exists, skipping.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(max_retries + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> requests.get(target_url, stream=<span class="literal">True</span>, verify=<span class="literal">False</span>, timeout=(<span class="number">5</span>, <span class="literal">None</span>)) <span class="keyword">as</span> r:  <span class="comment"># 增加连接和读取超时</span></span><br><span class="line">                r.raise_for_status()  <span class="comment"># 检查请求是否成功</span></span><br><span class="line"></span><br><span class="line">                total_size = <span class="built_in">int</span>(r.headers.get(<span class="string">&#x27;content-length&#x27;</span>, <span class="number">0</span>))</span><br><span class="line">                progress_bar = tqdm(total=total_size, unit=<span class="string">&#x27;iB&#x27;</span>, unit_scale=<span class="literal">True</span>, desc=file_name)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">8192</span>):  <span class="comment"># 使用合适的块大小进行迭代</span></span><br><span class="line">                        <span class="keyword">if</span> chunk:  <span class="comment"># 过滤掉保持活动的空chunk</span></span><br><span class="line">                            f.write(chunk)</span><br><span class="line">                            progress_bar.update(<span class="built_in">len</span>(chunk))</span><br><span class="line">                progress_bar.close()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> total_size != <span class="number">0</span> <span class="keyword">and</span> progress_bar.n != total_size:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Download of <span class="subst">&#123;file_name&#125;</span> did not complete.&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;saved to <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Attempt <span class="subst">&#123;attempt + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;max_retries&#125;</span> failed to download <span class="subst">&#123;file_name&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> attempt == max_retries:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Failed to download <span class="subst">&#123;file_name&#125;</span> after <span class="subst">&#123;max_retries&#125;</span> attempts.&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程池执行器</span></span><br><span class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改数据库内容以适应新的下载逻辑</span></span><br><span class="line">all_tasks = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> homework_id <span class="keyword">in</span> details_finish:</span><br><span class="line">    <span class="keyword">for</span> stu <span class="keyword">in</span> details_finish[homework_id][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;feedback&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;content&#x27;</span> <span class="keyword">in</span> stu <span class="keyword">and</span> <span class="string">&#x27;main&#x27;</span> <span class="keyword">in</span> stu[<span class="string">&#x27;content&#x27;</span>]:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> stu[<span class="string">&#x27;content&#x27;</span>][<span class="string">&#x27;main&#x27;</span>]:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;text&#x27;</span> <span class="keyword">in</span> item <span class="keyword">and</span> <span class="string">&#x27;c&#x27;</span> <span class="keyword">in</span> item[<span class="string">&#x27;text&#x27;</span>] <span class="keyword">and</span> <span class="built_in">isinstance</span>(item[<span class="string">&#x27;text&#x27;</span>][<span class="string">&#x27;c&#x27;</span>], <span class="built_in">list</span>):</span><br><span class="line">                    <span class="keyword">for</span> file_info <span class="keyword">in</span> item[<span class="string">&#x27;text&#x27;</span>][<span class="string">&#x27;c&#x27;</span>]:</span><br><span class="line">                        <span class="keyword">if</span> <span class="string">&#x27;type&#x27;</span> <span class="keyword">in</span> file_info <span class="keyword">and</span> file_info[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                            student_folder = <span class="string">f&quot;<span class="subst">&#123;stu[<span class="string">&#x27;nick&#x27;</span>]&#125;</span>_<span class="subst">&#123;stu[<span class="string">&#x27;uin&#x27;</span>]&#125;</span>&quot;</span></span><br><span class="line">                            all_tasks.append(</span><br><span class="line">                                pool.submit(download_and_save, <span class="built_in">str</span>(homework_id), student_folder, file_info)</span><br><span class="line">                            )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有下载任务完成</span></span><br><span class="line">pool_wait(all_tasks)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;All downloads completed.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭线程池执行器</span></span><br><span class="line">pool.shutdown(wait=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Thread pool executor has been shut down.&quot;</span>)</span><br><span class="line">db.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;All done!&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码仓库：https://github.com/AkiraZheng/QQHomeworkBatchTool.git</p>
</blockquote>
<blockquote>
<p>参考：<a href="https://blog.lyc8503.net/post/qq-homework-crawler/">Time Machine -
QQ作业爬虫</a></p>
</blockquote>
]]></content>
      <categories>
        <category>重装-环境配置-计算机</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络传输层</title>
    <url>/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
    <content><![CDATA[<h1 id="一tcp">一、TCP</h1>
<h2 id="tcp的包结构">1.1 TCP的包结构</h2>
<p>TCP常见的字段有：</p>
<ul>
<li>序列号<code>seq</code></li>
<li>确认号<code>ack</code></li>
<li>错误连接<code>RST</code>：重置连接（复位）</li>
<li>窗口大小：接收方的缓冲区大小，进行流量控制</li>
<li>请求建立一个连接<code>SYN</code>：同步序列号</li>
<li>请求关闭一个连接<code>FIN</code>：结束连接</li>
</ul>
<p>TCP四元组：</p>
<ul>
<li>源地址</li>
<li>源端口</li>
<li>目的地址</li>
<li>目的端口</li>
</ul>
<p>而五元组相比四元组多了协议类型，即<strong>TCP</strong>或<strong>UDP</strong>，其中只要五元组有一个不同，就是不同的通信，因此<strong>TCP和UDP的端口号是不冲突的，允许有TCP端口号==UDP端口号</strong></p>
<p>其中TCP像<strong>三次握手四次挥手</strong>、<strong>ACK确认和序列号</strong>、<strong>重传机制</strong>、<strong>滑动窗口流量控制</strong>、<strong>拥塞控制</strong>等都是保证其<strong>可靠传输</strong>的重要机制</p>
<h2 id="tcp的三次握手">1.2 TCP的三次握手</h2>
<p><strong>1）客户端和服务端建立socket</strong></p>
<p>TCP通信中，客户端创建与服务端的socket连接需要经过以下步骤：</p>
<ul>
<li><p>创建客户端socket</p></li>
<li><p>connect连接服务端socket
而创建用于监听的服务端socket需要经过以下步骤：</p></li>
<li><p><strong>创建</strong>服务端socket文件描述符</p></li>
<li><p><strong>bind</strong>绑定服务端socket</p></li>
<li><p><strong>listen</strong>监听服务端socket</p></li>
<li><p><strong>accept</strong>等待接受客户端socket</p></li>
</ul>
<p>那么理论上最多能支持多少个连接？</p>
<ul>
<li>总理论连接数=IP地址数<em>端口号数=2^32</em>2<sup>16=2</sup>48</li>
</ul>
<p>但是实际上受<strong>文件描述符个数、内存大小、进程数等限制</strong>，导致实际连接数远远小于这个数，一般只支持<strong>65535</strong>个连接</p>
<p><strong>2）TCP的三次握手的状态流转</strong></p>
<p>TCP的三次握手过程如下：</p>
<ul>
<li>第一次握手-客户端：发送<code>SYN+Seq</code>请求连接-&gt;进入<strong>SYN_SENT</strong>状态
<ul>
<li>随机生成客户端的<code>Seq</code>序列号</li>
</ul></li>
<li>第二次握手-服务端：返回<code>SYN+(ACK=Seq_client+1)+Seq</code>确认连接-&gt;进入<strong>SYN_RCVD</strong>状态
<ul>
<li>随机生成服务端的<code>Seq</code>序列号</li>
<li>将该客户端的socket信息加入<strong>半连接队列</strong></li>
</ul></li>
<li>第三次握手-客户端：发送<code>(ACK=Seq_server)+Seq</code>确认连接-&gt;进入<strong>ESTABLISHED</strong>状态
<ul>
<li>在<strong>ESTABLISHED</strong>状态下，如果收到<code>RST</code>则进入<strong>CLOSED</strong>状态</li>
</ul></li>
<li>服务端：接收到<code>ACK+Seq</code>确认连接-&gt;进入<strong>ESTABLISHED</strong>状态
<ul>
<li>将该客户端的socket信息从<strong>半连接队列</strong>移入<strong>全连接队列</strong></li>
</ul></li>
</ul>
<p><img src="/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/TCP_3.png" width="80%"></p>
<p><code>SYN</code>洪泛攻击：攻击方短时间内发送大量<code>SYN</code>请求，导致服务端<strong>半连接队列</strong>满了，无法再接受新的连接，从而导致<strong>拒绝服务攻击</strong></p>
<p>解决方法：</p>
<ul>
<li>增大半连接队列</li>
<li>开启SYN
Cookies绕过半连接队列，将<code>SYN</code>请求的<code>Seq</code>序列号加密后发送给客户端，客户端返回<code>ACK</code>时解密后才能建立连接</li>
</ul>
<p><strong>3）TCP的三次握手的原因</strong></p>
<p><strong>a. 避免历史连接造成资源浪费</strong></p>
<p>如果是两次握手无法阻止<strong>历史重复连接</strong>的问题：</p>
<ul>
<li>客户端给服务端发送<code>SYN</code>请求连接，但是因为<strong>网络原因</strong>导致服务端在客户端重试发送完后还没收到数据（重传的序列号是一样的）</li>
<li>服务端只有两次握手，因此在发送ACK后不知道客户端有没有接收到，就直接进入ESTABLISHED状态建立了连接且允许发送数据，此时只有客户端发送<strong>RST</strong>时该历史连接才能断开</li>
<li>此时客户端会发起一个新的连接</li>
<li>而在这段时间内由于服务端已经建立连接了，所以已经可以给客户端发消息了，这是一种资源浪费</li>
</ul>
<p>三次握手的重新连接过程：</p>
<p><img src="/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/TCP_3_2.png" width="60%"></p>
<p>两次握手的重新连接过程：</p>
<p><img src="/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/TCP_2_2.png" width="60%"></p>
<p><strong>b.
保证通信双方均具备收发能力&amp;&amp;序列号被确认</strong></p>
<p>如果只有两次握手，那么只能保证<strong>服务端具备收发能力</strong>，而<strong>客户端并不一定具备收发能力</strong>；同时也不能保证两方的<strong>序列号</strong>都被确认</p>
<p><strong>4）TCP的三次握手失败分别会发生什么</strong></p>
<ul>
<li>第一次握手丢包：<strong>客户端</strong>启动重试机制</li>
<li>第二次握手丢包：<strong>客户端和服务端</strong>都会重试</li>
<li>第三次握手丢包：<strong>服务端</strong>会重试</li>
</ul>
<h2 id="tcp的四次挥手">1.3 TCP的四次挥手</h2>
<p><strong>1）TCP的四次挥手的状态流转</strong></p>
<p>挥手前<strong>客户端</strong>和<strong>服务端</strong>都处于<strong>ESTABLISHED</strong>状态</p>
<p>TCP的四次挥手过程如下：</p>
<ul>
<li>第一次挥手-客户端：发送<code>FIN</code>请求关闭连接-&gt;进入<strong>FIN_WAIT_1</strong>状态
<ul>
<li>发送<code>FIN</code>并调用<code>close</code>函数，属于<strong>系统调用</strong></li>
</ul></li>
<li>第二次挥手-服务端：接收到<code>FIN</code>请求关闭连接-&gt;发送<code>ACK</code>确认-&gt;进入<strong>CLOSE_WAIT</strong>状态
<ul>
<li>在<strong>CLOSE_WAIT</strong>状态下会发送未发完的数据</li>
<li>发送<code>ACK</code>属于<strong>内核</strong>操作</li>
</ul></li>
<li>第三次挥手-服务端：发送<code>FIN</code>请求关闭连接，并调用close函数关闭连接-&gt;进入<strong>LAST_ACK</strong>状态
<ul>
<li>发送<code>FIN</code>并调用<code>close</code>函数，属于<strong>系统调用</strong></li>
</ul></li>
<li>第四次挥手-客户端：收到服务端的<code>FIN</code>请求关闭连接-&gt;发送<code>ACK</code>确认-&gt;进入<strong>TIME_WAIT</strong>状态
<ul>
<li>在<strong>TIME_WAIT</strong>状态下会等待<strong>2MSL</strong>时间，等待可能丢失的ACK确认</li>
<li>2MSL是为了保证<strong>服务端</strong>收到<strong>客户端</strong>的<strong>ACK</strong>确认，如果<strong>服务端</strong>没有收到<strong>ACK</strong>确认，那么会重传<code>FIN</code>请求关闭连接</li>
<li>TIME_WAIT状态下的socket会等待<strong>2MSL</strong>时间，然后进入<strong>CLOSED</strong>状态</li>
<li>客户端发送<code>ACK</code>确认属于<strong>内核操作</strong></li>
</ul></li>
<li>服务端：收到客户端的<code>ACK</code>确认-&gt;进入<strong>CLOSED</strong>状态</li>
</ul>
<p><img src="/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/TCP_4.png" width="80%"></p>
<p><strong>2）TCP的四次挥手的原因</strong></p>
<p>TCP挥手不能跟握手一样只有三次，相比握手中服务端将<code>SYN+ACK</code>合并成一个步骤，而挥手需要分成两个步骤，因为客户端发送<code>FIN</code>后只是代表不会再发送数据了（还可以接收）</p>
<p>但是服务端可能还有数据没发送完，所以需要将<code>FIN</code>和<code>ACK</code>分开，在<code>FIN</code>和<code>ACK</code>中间，服务端处于<strong>CLOSE_WAIT</strong>状态，这个状态内会发送剩余的数据，然后再发送<code>FIN</code>请求关闭连接</p>
<p>如果只有三次握手，那么服务端发完<code>FIN</code>后也关闭连接无法发送剩余数据了，会导致这部分数据丢失</p>
<p><strong>3）为什么TIME_WAIT状态要等待2MSL</strong></p>
<p>MSL指的是<strong>报文最大生存时间</strong>，也就是说如果超过这个时间代表报文消失在网络中了</p>
<p>将<strong>TIME_WAIT设置为2MSL也就是允许报文丢失一次</strong></p>
<p>客户端发送<strong>ACK</strong>到服务端时<strong>最大报文时间是1MSL</strong>，而当超时消亡时，服务端也发现收不到ACK了，因此会重新发送<strong>FIN</strong>，又需要<strong>最大经过1MSL时间</strong>，所以总共是2MSL</p>
<p>当客户端再次收到服务端第二次发的<code>FIN</code>时<strong>TIME_WAIT时间会重新计时（重置为2MSL）</strong></p>
<p><strong>4）TIME_WAIT过多</strong></p>
<p><strong>TIME_WAIT是主动发起挥手方才会出现的状态</strong></p>
<p><strong>a. 客户端TIME_WAIT过多</strong></p>
<p>客户端TIME_WAIT过多是可以通过<strong>端口复用</strong>解决的，开启<code>tcp_tw_reuse</code>，客户端会在connect的时候找一个TIME_WAIT超过1s的连接进行复用</p>
<p>所以一般我们都建议通过<strong>客户端主动发起挥手</strong>，而不是服务端主动发起挥手</p>
<p><strong>b. 服务端TIME_WAIT过多</strong></p>
<ul>
<li>情况1：使用<strong>短连接</strong>，导致每次服务端响应完后会<strong>主动发起挥手断连</strong></li>
<li>情况2：<strong>长连接满了</strong>，最大长连接数设置得过小，导致连接满了，服务端主动关闭已经连接的，来腾出文件描述符给新新连接</li>
</ul>
<p><strong>5）服务端CLOSE_WAIT过多</strong></p>
<p><strong>CLOSE_WAIT</strong>是在服务端返回<code>FIN</code>且<code>close</code>关闭了连接时才会转成<strong>LAST_ACK</strong>状态等待客户端的<code>ACK</code>确认</p>
<p>因此可以判断<strong>CLOSE_WAIT</strong>过多可能是因为没有调用<code>close</code>关闭连接，导致服务端一直处于<strong>CLOSE_WAIT</strong>状态</p>
<h2 id="tcp的可靠性">1.4 TCP的可靠性</h2>
<p>TCP像<strong>三次握手四次挥手</strong>、<strong>ACK确认和序列号</strong>、<strong>重传机制</strong>、<strong>滑动窗口流量控制</strong>、<strong>拥塞控制</strong>等都是保证其<strong>可靠传输</strong>的重要机制</p>
<h3 id="tcp的滑动窗口与流量控制">1.4.1 TCP的滑动窗口与流量控制</h3>
<p>TCP滑动窗口分为<strong>发送端窗口</strong>和<strong>接收端窗口</strong>，主要作用是<strong>防止发送方发送过快导致接收方无法接收</strong>，并导致<strong>接收方被淹没</strong></p>
<p><strong>滑动窗口内的数据就是缓冲区，可以不用等上一个的ACK</strong>，连续发送<strong>滑动窗口大小的数据</strong></p>
<p><img src="/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/TCP_window.png" width="80%"></p>
<p>发送窗口<code>swnd</code>原则上是约等于接收窗口<code>rwnd</code>的，但是由于发送方维护者拥塞窗口<code>cwnd</code>，因此发送窗口<code>swnd</code>的大小实际上是</p>
<ul>
<li><code>swnd = min(rwnd, cwnd)</code></li>
</ul>
<h3 id="tcp的超时重传与拥塞控制">1.4.2 TCP的超时重传与拥塞控制</h3>
<h4 id="重传">1.4.2.1 重传</h4>
<p><strong>1）超时重传：时间驱动</strong></p>
<p>超时重传就是最朴素的，一个包发送出去后，如果在<strong>一定时间内</strong>没有收到ACK确认，那么就会<strong>重传</strong>这个包；</p>
<p>由于是以<strong>时间为驱动的，因此可能会出现重传较慢的问题</strong></p>
<p>这里有<strong>RTT为数据发送到接收ACK所需的往返时间</strong>，而<strong>RTO为重传超时时间</strong>，一般来说有：</p>
<ul>
<li><code>RTO &gt; RTT</code></li>
</ul>
<p><strong>2）快速重传：数据驱动</strong></p>
<p><strong>发送方收到3个重复的ACK就会进行快速重传</strong>，但是该重传<strong>一个呢？还是重传后面所有的包呢？</strong></p>
<ul>
<li>重传一个：如果下一个包也丢失的话，就要再次等3个相同ACK后才会重传</li>
<li>重传后面所有的包：如果后面的包没丢失，那么会浪费网络资源</li>
</ul>
<p>解决办法：用<code>SACK</code>来解决，即<strong>选择性重传</strong>，只重传丢失的包</p>
<p><img src="/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/TCP_resend.png" width="80%"></p>
<p><img src="/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/TCP_SACK.png" width="80%"></p>
<h4 id="拥塞控制">1.4.2.2 拥塞控制</h4>
<p>拥塞控制一般要经过以下步骤：</p>
<ul>
<li>慢启动（窗口大小指数上升），直到到达<strong>慢启动门限</strong></li>
<li>拥塞避免（窗口大小线性上升）</li>
<li>拥塞发生（<strong>更新慢启动门限、更新拥塞窗口</strong>）
<ul>
<li>方法1：<strong>超时重传</strong>
<ul>
<li>将<strong>慢启动门限</strong>设置为<strong>拥塞窗口的一半</strong></li>
<li>将<strong>拥塞窗口</strong>设置为<strong>1</strong>，会导致发送速度断崖式变慢</li>
<li>从<strong>慢启动</strong>开始<strong>指数</strong>增长
<img src="/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/TCP_congestion.png" width="80%"></li>
</ul></li>
<li>方法2：<strong>快速重传</strong>
<ul>
<li>将<strong>慢启动门限</strong>设置为<strong>拥塞窗口的一半</strong></li>
<li>将<strong>拥塞窗口</strong>设置为跟<strong>慢启动门限</strong></li>
<li>从<strong>拥塞避免</strong>开始<strong>线性</strong>增长
<img src="/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/TCP_congestion_2.png" width="80%"></li>
</ul></li>
</ul></li>
</ul>
<h2 id="tcp的拆包和粘包">1.5 TCP的拆包和粘包</h2>
<h3 id="拆包">1.5.1 拆包</h3>
<p>一个网络包的最大大小为<strong>MTU</strong>，一般为<strong>1500字节</strong></p>
<p>网络包中除开<strong>IP头和TCP头外</strong>外的数据包称为<strong>MSS</strong>，一般为<strong>1460字节</strong>，MSS中也包含了HTTP整个协议的头和content等内容</p>
<ul>
<li><code>MTU = IP头 + TCP头 + MSS</code></li>
</ul>
<p><img src="/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%B1%82/TCP_package.png" width="80%"></p>
<p>由于要求数据的最大大小为<strong>MSS</strong>，因此如果数据包大于<strong>MSS</strong>，那么就会<strong>拆包</strong>，将数据包拆分成多个包发送（也就是应用层的一个数据包被拆成多段进行发送）</p>
<h3 id="粘包">1.5.2 粘包</h3>
<p>TCP有一个<strong>Negle算法</strong>，会将多个小包合并成一个大包发送，这样可以减少网络包的数量，提高网络的利用率</p>
<p>但是由于TCP基于字节流是没有数据边界的，因此可能会出现<strong>粘包</strong>问题</p>
<p>解决办法是在<strong>应用层加一些边界（如HTTP、HTTPS协议）</strong></p>
<ul>
<li><strong>定长包</strong>：每个包的长度是固定的，不足的用空格填充</li>
<li><strong>特殊字符隔离</strong>：在每个包的末尾加上特殊字符，如<code>\r\n</code></li>
</ul>
<h1 id="二tcp和udp">二、TCP和UDP</h1>
<h2 id="tcp和udp的区别">2.1 TCP和UDP的区别</h2>
<p><strong>1）可靠性上</strong></p>
<ul>
<li>TCP：面向连接的协议，提供<strong>可靠传输</strong>，通过<strong>序列号</strong>和<strong>ACK确认</strong>机制保证数据的<strong>可靠传输</strong></li>
<li>UDP：无连接的协议，提供<strong>不可靠传输</strong></li>
</ul>
<p><strong>2）传输方式上</strong></p>
<ul>
<li>TCP：<strong>字节流传输</strong>，包没有边界（存在拆包粘包问题）</li>
<li>UDP：<strong>数据报传输</strong>，一个一个包发送的，包之间天然有边界</li>
</ul>
<p><strong>3）传输效率上</strong></p>
<ul>
<li>TCP：由于需要等待连接、等待重传、等待ACK确认等确保可靠性的机制，因此<strong>传输效率比UDP低</strong></li>
<li>UDP：传输效率高</li>
</ul>
<p><strong>4）应用场景</strong></p>
<ul>
<li>TCP：适用于<strong>要求可靠传输</strong>的场景，如<strong>文件传输</strong>、<strong>HTTP</strong>、<strong>HTTPS</strong>等</li>
<li>UDP：适用于<strong>实时性要求高</strong>的场景，如<strong>视频直播</strong>、<strong>语音通话</strong>、<strong>DNS</strong>等
<ul>
<li>如果视频用UDP，丢失数据只会丢失某一瞬间的画面，而TCP会等待重传，导致<strong>卡顿甚至卡死</strong></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络层</title>
    <url>/2024/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    <content><![CDATA[<blockquote>
<p>计算机网络层主要关注的就是<strong>IP、路由器、Ping-ICMP</strong>等内容，是<strong>传输层</strong>和<strong>应用层</strong>之间的桥梁，负责<strong>数据包的传输</strong>和<strong>路由选择</strong>等功能</p>
</blockquote>
<h2 id="一ip地址">一、IP地址</h2>
<p>IP用于在网络中<strong>唯一标识和定位网络中的设备</strong>，分为IPv4和IPv6两种，其中IPv4地址为32位(有地址枯竭问题)，IPv6地址为128位</p>
<ul>
<li>IPv4：划分为4个按点分，<strong>每部分8位</strong>，范围为0~255，如<code>255.255.255.0</code></li>
<li>IPv6：划分为8个按冒号分，<strong>每部分16位</strong>，如<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code></li>
</ul>
<p><strong>Mac地址与IP地址的区别：</strong></p>
<p>而Mac地址在数据链路层，是与<strong>网卡硬件</strong>绑定的，不会因为网络变化而变化，而<strong>IP地址是根据连接不同的网络而变化的</strong></p>
<ul>
<li>局域网中：通过Mac地址直接通信
<ul>
<li>mac是用于<strong>局域网设备</strong>通信的</li>
<li>mac地址在<strong>数据链路层</strong></li>
<li><strong>交换机</strong>工作在MAC层，主要实现<strong>局域网内</strong>的数据转发</li>
</ul></li>
<li>互联网中：通过IP地址路由传递信息的
<ul>
<li>IP用于<strong>不同网络之间</strong>的通信</li>
<li>IP地址在<strong>网络层</strong></li>
<li><strong>路由器</strong>工作在IP层，主要实现<strong>不同网络之间</strong>的数据转发</li>
</ul></li>
</ul>
<h2 id="二nat转换">二、NAT转换</h2>
<p>NAT转换协议是在<strong>网络层节约公有IP资源</strong>。</p>
<p>NAT转换可以将<strong>多个私有IP都转换成同一个公有IP</strong>，然后通过<strong>端口号</strong>来区分不同的设备，这样就可以<strong>减少公网IP的使用</strong></p>
<p><img src="/2024/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%B1%82/NAT.png" width="70%"></p>
<h2 id="三ping和icmp协议">三、Ping和ICMP协议</h2>
<p>ping是通过<strong>ICMP</strong>协议实现的，通过发送ICMP包给目标主机来测试目标主机是否可到达（ping是不带端口的，也就是包最高到达网络层，所以无法探测某个主机内的某个程序是否可达）</p>
<p><img src="/2024/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%B1%82/Ping.png" width="100%"></p>
<h2 id="四ddos攻击的预防">四、DDOS攻击的预防</h2>
<p>DDOS攻击是指黑客<strong>短时间内用大量的僵尸机发送请求，耗尽服务器资源</strong>，导致服务器无法正常工作</p>
<ul>
<li>应用层DDOS：DNS洪水攻击</li>
<li>传输层DDOS：SYN洪泛攻击</li>
<li>网络层DDOS</li>
</ul>
<p>预防方法：</p>
<ul>
<li><strong>限制某个IP访问频率</strong>、<strong>设置防火墙规则拉黑一些IP</strong></li>
<li>增加<strong>用户验证</strong></li>
<li>第三方DDOS防护服务</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式0：面对对象的8大设计原理</title>
    <url>/2024/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F0%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%9A%848%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p>从<strong>底层</strong>思维来理解，面向对象是<strong>继承、封装、多态</strong>。
从<strong>抽象</strong>思维层面来理解，面向对象能<strong>隔离变化</strong>，将变化带来的影响降到最低。
从<strong>微观</strong>层面来看，面向对象可以实现<strong>各司其职</strong>（采用相同的抽象接口，通过不同的具体类实现不同的功能）</p>
</blockquote>
<blockquote>
<p>使用设计模式的最大优势是能<strong>抵御变化</strong>、实现<strong>代码复用</strong></p>
</blockquote>
<h2 id="一为设计模式原则的理解提供前景代码例子c">一、为设计模式原则的理解提供前景代码例子(C++)</h2>
<h3 id="未优化的代码">1.1 未优化的代码</h3>
<ul>
<li>高层模块：<code>MainForm</code>窗体类 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainForm</span>:</span><span class="keyword">public</span> Form&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">        vector&lt;Line*&gt; lines;</span><br><span class="line">        vector&lt;Rect*&gt; rects;</span><br><span class="line">        <span class="comment">//画图程序用鼠标表达，用P1、P2表示鼠标的起始点和终点</span></span><br><span class="line">        Point P1;</span><br><span class="line">        Point P2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainForm</span>()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnMouseDown</span><span class="params">(MouseEventArgs e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnMouseUp</span><span class="params">(MouseEventArgs e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPaint</span><span class="params">(PaintEventArgs e)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainForm::OnMouseDown</span><span class="params">(MouseEventArgs e)</span></span>&#123;<span class="comment">//当鼠标按下时，记录鼠标两点的位置</span></span><br><span class="line">    P1.x = e.X;</span><br><span class="line">    P1.y = e.Y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    Form::<span class="built_in">OnMouseDown</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainForm::OnMouseUp</span><span class="params">(MouseEventArgs e)</span></span>&#123;<span class="comment">//当鼠标抬起时，记录鼠标两点的位置</span></span><br><span class="line">    P2.x = e.X;</span><br><span class="line">    P2.y = e.Y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rbLine.Checked)&#123;</span><br><span class="line">        lines.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Line</span>(P1, P2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rbRect.Checked)&#123;</span><br><span class="line">        <span class="comment">//P1和P2两点呈对角线，可以确定一个矩形</span></span><br><span class="line">        <span class="keyword">int</span> width = <span class="built_in">abs</span>(P1.x - P2.x);</span><br><span class="line">        <span class="keyword">int</span> height = <span class="built_in">abs</span>(P1.y - P2.y);</span><br><span class="line">        rects.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Rect</span>(P1, width, height));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">Refresh</span>();</span><br><span class="line"></span><br><span class="line">    Form::<span class="built_in">OnMouseUp</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainForm::OnPaint</span><span class="params">(PaintEventArgs e)</span></span>&#123;<span class="comment">//当执行Refresh()时，会调用OnPaint()方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//针对直线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        e.Graphics.<span class="built_in">DrawLine</span>(Pens::Black, </span><br><span class="line">        lines[i]-&gt;start.x, </span><br><span class="line">        lines[i]-&gt;start.y, </span><br><span class="line">        lines[i]-&gt;end.x, </span><br><span class="line">        lines[i]-&gt;end.y);<span class="comment">//取vector中的坐标点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//针对矩形</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rects.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        e.Graphics.<span class="built_in">DrawRectangle</span>(Pens::Black, </span><br><span class="line">        rects[i]-&gt;left_top;</span><br><span class="line">        rects[i]-&gt;width, </span><br><span class="line">        rects[i]-&gt;height);<span class="comment">//取vector中的坐标点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    Form::<span class="built_in">OnPaint</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>底层模块、细节类：<code>Line</code>和<code>Rect</code>操作类
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point start;</span><br><span class="line">    Point end;</span><br><span class="line">    <span class="built_in">Line</span>(Point start, Point end):<span class="built_in">start</span>(start), <span class="built_in">end</span>(end)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point left_top;</span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="built_in">Rect</span>(Point left_top, <span class="keyword">int</span> width, <span class="keyword">int</span> height):<span class="built_in">left_top</span>(left_top), <span class="built_in">width</span>(width), <span class="built_in">height</span>(height)&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>未优化代码的流程图 <img src="/2024/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F0%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%9A%848%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/1.png" width="80%" height="80%"></li>
</ul>
<h3 id="优化后的代码">1.2 优化后的代码</h3>
<ul>
<li>高层模块：<code>MainForm</code>窗体类 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainForm</span>:</span><span class="keyword">public</span> Form&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">        vector&lt;Shape*&gt; shapes;<span class="comment">//针对所有类型（Line和Rect），需要多态性的值一定要用指针，因为可能会有多种派生类型</span></span><br><span class="line">        <span class="comment">//画图程序用鼠标表达，用P1、P2表示鼠标的起始点和终点</span></span><br><span class="line">        Point P1;</span><br><span class="line">        Point P2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainForm</span>()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnMouseDown</span><span class="params">(MouseEventArgs e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnMouseUp</span><span class="params">(MouseEventArgs e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnPaint</span><span class="params">(PaintEventArgs e)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainForm::OnMouseDown</span><span class="params">(MouseEventArgs e)</span></span>&#123;<span class="comment">//当鼠标按下时，记录鼠标两点的位置</span></span><br><span class="line">    P1.x = e.X;</span><br><span class="line">    P1.y = e.Y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    Form::<span class="built_in">OnMouseDown</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainForm::OnMouseUp</span><span class="params">(MouseEventArgs e)</span></span>&#123;<span class="comment">//当鼠标抬起时，记录鼠标两点的位置</span></span><br><span class="line">    P2.x = e.X;</span><br><span class="line">    P2.y = e.Y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rbLine.Checked)&#123;</span><br><span class="line">        shapes.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Line</span>(P1, P2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rbRect.Checked)&#123;</span><br><span class="line">        <span class="comment">//P1和P2两点呈对角线，可以确定一个矩形</span></span><br><span class="line">        <span class="keyword">int</span> width = <span class="built_in">abs</span>(P1.x - P2.x);</span><br><span class="line">        <span class="keyword">int</span> height = <span class="built_in">abs</span>(P1.y - P2.y);</span><br><span class="line">        shapes.<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Rect</span>(P1, width, height));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">Refresh</span>();</span><br><span class="line"></span><br><span class="line">    Form::<span class="built_in">OnMouseUp</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainForm::OnPaint</span><span class="params">(PaintEventArgs e)</span></span>&#123;<span class="comment">//当执行Refresh()时，会调用OnPaint()方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//绘制时将直线和矩形统一绘制</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lines.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        shapes[i]-&gt;<span class="built_in">draw</span>(e.Graphics);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    Form::<span class="built_in">OnPaint</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>抽象：<code>Shape</code>抽象方法 &amp;&amp;
<code>Line</code>和<code>Rect</code>类继承于抽象方法 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Graphics g)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span>:</span><span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point start;</span><br><span class="line">    Point end;</span><br><span class="line">    <span class="built_in">Line</span>(Point start, Point end):<span class="built_in">start</span>(start), <span class="built_in">end</span>(end)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(Graphics g)</span></span>&#123;<span class="comment">//实现自己的绘画</span></span><br><span class="line">        g.<span class="built_in">DrawLine</span>(Pens::Black, </span><br><span class="line">        start.x, </span><br><span class="line">        start.y, </span><br><span class="line">        end.x, </span><br><span class="line">        end.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>:</span><span class="keyword">public</span> Shape&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point left_top;</span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="built_in">Rect</span>(Point left_top, <span class="keyword">int</span> width, <span class="keyword">int</span> height):<span class="built_in">left_top</span>(left_top), <span class="built_in">width</span>(width), <span class="built_in">height</span>(height)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">(Graphics g)</span></span>&#123;<span class="comment">//实现自己的绘画</span></span><br><span class="line">        g.<span class="built_in">DrawRectangle</span>(Pens::Black, </span><br><span class="line">        left_top,</span><br><span class="line">        width, </span><br><span class="line">        height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>未优化代码的流程图 <img src="/2024/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F0%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%9A%848%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/2.png" width="80%" height="80%"></li>
</ul>
<h3 id="优化后代码的优点说明">1.3 优化后代码的优点说明</h3>
<ul>
<li><p>假设现在客户需求发生了变化，需要增加一个<code>Circle</code>类，那么在<strong>1.1</strong>中的代码中除了需要增加<code>Circle</code>类外，在<code>MainForm</code>中的代码也需要进行修改，首先vector需要增加一种新类型来存储<code>Circle</code>类，其次在<code>OnMouseUp</code>和<code>OnPaint</code>中也需要增加对<code>Circle</code>类的处理，需要改动的部分很多</p></li>
<li><p>而在<strong>1.2</strong>中的代码中，只需要增加一个<code>Circle</code>类，然后在<code>MainForm</code>的<code>OnMouseUp</code>中增加对<code>Circle</code>类的处理，这样就实现了<strong>隔离变化</strong>，将变化带来的影响降到最低。因为绘制的实现都抽象出draw方法由各个类去实现了，因此也不需要改动<code>OnPaint</code>方法</p></li>
</ul>
<h2 id="二设计模式的八大设计原则">二、设计模式的八大设计原则</h2>
<h3 id="依赖倒置原则dip">1. 依赖倒置原则（DIP）</h3>
<blockquote>
<p>高层模块（稳定）不应该依赖于底层模块（变化），二者都应该依赖于抽象（稳定）。</p>
</blockquote>
<blockquote>
<p>抽象（稳定）不应该依赖于细节（变化），细节（变化）应该依赖于抽象（抽象）。</p>
</blockquote>
<p>从<strong>二</strong>中的代码例子来分析这两句话，可以将代码中的各种类划分为：</p>
<ul>
<li>高层模块：比如<code>MainForm</code>窗体类（稳定）</li>
<li>底层模块、细节类：比如<code>Line</code>和<code>Rect</code>操作类（变化）</li>
<li>抽象：比如<code>Shape</code>抽象方法（稳定）</li>
</ul>
<p><strong>对第一句话（高层模块不应该依赖于底层模块，二者都应该依赖于抽象）的理解：</strong></p>
<ul>
<li><p>当使用<strong>1.1</strong>中未优化的MainForm设计代码时，Line和Rect还未继承于统一接口的基类，那么在<strong>MainForm</strong>中创建相关对象就会<strong>依赖于变化的Line和Rect类</strong>，这样就会导致MainForm的稳定性受到影响。</p></li>
<li><p>而当使用了<strong>1.2</strong>的抽象方法后，MainForm就直接依赖于稳定的抽象方法，而Line和Rect类继承于抽象方法，相当于被<strong>隔离</strong>了，这样MainForm就稳定了，后续两个变化类的改动也不会影响到MainForm的使用</p></li>
</ul>
<p><img src="/2024/02/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F0%EF%BC%9A%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%9A%848%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/DIP1.png" width="80%" height="80%"></p>
<p><strong>对第二句话（抽象不应该依赖于细节，细节应该依赖于抽象）的理解：</strong></p>
<ul>
<li><p>在<strong>1.2</strong>中的代码中，抽象方法<code>Shape</code>不依赖于<code>Line</code>和<code>Rect</code>类，<strong>抽象方法提供的接口是稳定的、不变的</strong></p></li>
<li><p>而<code>Line</code>和<code>Rect</code>类依赖于<code>Shape</code>抽象方法提供的接口，这样就实现了抽象不依赖于细节，细节依赖于抽象的设计原则</p></li>
</ul>
<h3 id="开放封闭原则ocp">2. 开放封闭原则（OCP）</h3>
<blockquote>
<p>对<strong>扩展开放</strong>，对<strong>更改封闭</strong>。</p>
</blockquote>
<p><strong>对扩展开发、对更改封闭的理解：</strong></p>
<ul>
<li><p>这里的意思是指<strong>类模块应该是可扩展（被继承）的，但是不可修改（修改源类）的</strong></p></li>
<li><p>举个例子，有个家具加工厂，根据甲方要求生产了一批不防火的家具，后来甲方又要求生产防火家具</p>
<ul>
<li>这时候第一种做法是<strong>全面修改原来的家具生产线</strong>，但是这样会造成大量的修改工作，不符合开闭原则的类(生产原先家具的原始生产线不可修改)</li>
<li>而第二种做法是<strong>继承原来的家具生产线</strong>，然后在新的家具中添加（扩展）防火功能，比如涂上防火材料，这样就是符合对扩展开放，对更改封闭</li>
</ul></li>
<li><p>从上述例子可以看到，不符合OCP原则的话，会导致需要对源代码重新进行<strong>编译、测试、部署</strong>，<strong>改变的代价很高</strong></p></li>
<li><p>OPC要求我们在设计代码时：当<strong>需求变更</strong>的时候要求我们<strong>不要去改原始代码</strong>，而是<strong>去扩展原始代码</strong>，这样就能保证原始代码的稳定性</p></li>
</ul>
<h3 id="单一职责原则srp">3. 单一职责原则（SRP）</h3>
<blockquote>
<p>一个类应该<strong>只有一个引起它变化的原因</strong>
变化的方向隐含着类的责任</p>
</blockquote>
<p><strong>理解：</strong></p>
<ul>
<li><p>这个原则要求我们一个类的设计中不应该太臃肿，比如在一个类中存进了七八十种方法</p></li>
<li><p>在桥模式中，可以感受到这个原则的意义</p></li>
</ul>
<h3 id="liskov替换原则lsp----里氏替换原则">4. Liskov替换原则（LSP） --
里氏替换原则</h3>
<blockquote>
<p>子类必须能够替换它们的基类（IS-A）</p>
</blockquote>
<p><strong>理解：</strong></p>
<ul>
<li><p>这个原则是<strong>IS-A</strong>的另一种说法，意思就是说子类在继承父类是，必须是完全可以替换父类的，也就是说子类需要是可以继承并使用父类的所有公有接口的</p></li>
<li><p>比如当一个子类继承父类时，但是该子类又不可以用到父类中的某些方法，那么当他遇到这种使用父类的方法时就会出现问题，他可能会选择当Client用到这些方法时，选择直接抛出异常，这种就是不符合LSP原则的</p></li>
<li><p>又比如当两个类之间是组合关系时也不应该用继承关系，因为组合关系是<strong>HAS-A</strong>关系，而不是<strong>IS-A</strong>关系</p></li>
</ul>
<h3 id="接口隔离原则isp">5. 接口隔离原则（ISP）</h3>
<blockquote>
<p>不应该强迫客户程序依赖它们不用的方法 要求：接口要尽量小而完备</p>
</blockquote>
<p><strong>理解：</strong></p>
<ul>
<li><p>这个原则要求我们在设计类的公用接口时要谨慎，<strong>不要将一些客户端用不到的，仅有类内部使用的方法放到公用接口中</strong>。这种方法应该放在类的private中</p></li>
<li><p>因为一旦接口被设计成公有接口，客户端就会对这些公有接口产生依赖，这样一旦这些接口发生变化，就可能会导致客户端的代码也需要改动</p></li>
</ul>
<h3 id="优先使用对象组合而不是类继承cop">6.
优先使用对象组合，而不是类继承（COP）</h3>
<blockquote>
<p>类继承通常为<code>白箱复用</code>，对象组合通常为<code>黑箱复用</code></p>
</blockquote>
<p><strong>理解：</strong></p>
<ul>
<li>继承是<strong>强耦合</strong>的，比如父类发生改变，子类也会跟着改变，在某种程度上破坏了类的封装性</li>
<li>组合是<strong>弱耦合</strong>的，对象组合只要求被组合对象具有良好的接口</li>
</ul>
<h3 id="封装变化点">7. 封装变化点</h3>
<blockquote>
<p>封装<strong>变化点</strong>，就是封装那些可能变化的东西</p>
</blockquote>
<p><strong>理解：</strong></p>
<ul>
<li>这个原则要求我们在设计类的时候要<strong>尽量将可能变化的东西封装起来</strong>，比如将变化的东西抽象成一个接口，然后在类中使用这个接口，这样就可以实现<strong>隔离变化</strong>，将变化带来的影响降到最低（当设计者在具体类种进行修改时，对另一侧抽象类不造成影响）</li>
</ul>
<h3 id="针对接口编程而不是针对实现编程">8.
针对接口编程，而不是针对实现编程</h3>
<p><strong>理解：</strong></p>
<ul>
<li>这个原则要求我们在设计时，尽量不要将变量类型声明为某个特定的具体类，而是将其声明为某个接口（比如抽象接口）</li>
<li>这样可以减少代码的耦合</li>
<li>这个原则跟<strong>依赖倒置原则</strong>有一定的关联，一般违背了<strong>依赖倒置原则</strong>就会违背了<strong>针对接口编程，而不是针对实现编程原则</strong></li>
</ul>
<p><strong>举例说明</strong></p>
<ul>
<li>比如在<strong>1.1</strong>中的代码中，如果将<code>Line</code>和<code>Rect</code>类声明为具体类，那么在MainForm中的代码<code>vector&lt;Line*&gt; lines;``vector&lt;Rect*&gt; Rect;</code>就会导致MainForm对具体类的依赖</li>
<li>而如果像<strong>1.2</strong>中的代码一样，将<code>Line</code>和<code>Rect</code>类声明为抽象类<code>Shape</code>，那么MainForm就只依赖于抽象类，在代码中体现为<code>vector&lt;Shape*&gt; shapes;</code>，这样就实现了针对抽象接口Shape编程，而不是针对实现编程</li>
</ul>
<h2 id="三推荐一个讲得很好得设计模式课程">三、推荐一个讲得很好得设计模式课程</h2>
<ul>
<li><a href="https://www.bilibili.com/video/BV1Yr4y157Ci">C++设计模式入门</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式1：单例模式(C++)</title>
    <url>/2024/01/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p><a href="https://github.com/AkiraZheng/designPattern/tree/master/designPattern">本文中所有设计模式Github代码</a>
其中本文<strong>单例模式</strong>相关代码在<code>SingletonPattern.h</code>文件中</p>
</blockquote>
<h2 id="一单例模式的实现原理">一、单例模式的实现原理</h2>
<h3 id="什么是单例模式">1. 什么是单例模式</h3>
<p>单例模式是指某一个类在整个程序运行期间（系统生命周期），<strong>只有一个实例</strong>存在，因此要求构造函数是私有的(private)，同时在多线程场景下需要保证线程安全，即多个线程中不会创建多个实例对象。</p>
<h3 id="使用单例模式的优点">2. 使用单例模式的优点</h3>
<p><strong>节省资源：</strong>在内存中只有一个实例，<strong>减少了内存开销</strong>，可以<strong>避免对资源的多重占用</strong></p>
<p><strong>方便控制：</strong>设置全局访问点，严格控制访问范围，防止对象的重复创建，保证对象的唯一性，<strong>保证对象的线程安全</strong></p>
<h3 id="单例模式的应用场景">3. 单例模式的应用场景</h3>
<ul>
<li>要求生产唯一序列号</li>
<li>Web页面的计数器，不用每次刷新都在数据库中加一，使用单例可以在内存中缓存计数器值</li>
<li>创建一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等</li>
</ul>
<h3 id="单例模式的线程安全问题">4. 单例模式的线程安全问题</h3>
<p>一种最粗暴的线程安全方法就是在代码一运行就初始化创建实例</p>
<p>单例模式根据类中实例化对象的不同，可以分为<strong>饿汉式</strong>(线程不安全)和<strong>懒汉式</strong>(线程安全)</p>
<ul>
<li>饿汉式：在类加载时就创建对象实例，线程不安全，无法在多线程中保证单例</li>
<li>懒汉式：在类加载时不创建对象实例，而是在第一次调用时创建对象实例，可以在公有静态成员函数中，在实例化单例对象前进行同步加锁，保证线程安全</li>
</ul>
<h2 id="二单例模式的实现代码c">二、单例模式的实现代码（C++）</h2>
<p>单例模式在代码中的基本UML类图：</p>
<p><img src="/2024/01/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/Singleton.png" width="50%" heigh="50%"></p>
<p>单例模式代码实现的注意事项：</p>
<ul>
<li>类设计中<strong>构造方法置于私有区域</strong>，以防止外部创建对象</li>
<li>类中定义一个私有静态成员变量，用于指向单例对象
<ul>
<li>类中定义一个公有静态成员函数，用于获取单例对象
<code>static Singleton *getInstance()</code></li>
<li>根据该对象实例化的不同，可以分为<strong>饿汉式</strong>和<strong>懒汉式</strong></li>
</ul></li>
</ul>
<h3 id="饿汉式在类加载时就创建对象实例在代码一运行main之前就初始化创建实例">2.1
<strong>饿汉式：</strong>在类加载时就创建对象实例，在代码一运行main之前就初始化创建实例</h3>
<pre><code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonHungry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">SingletonHungry</span>()&#123;&#125;;              <span class="comment">// 构造函数私有化</span></span><br><span class="line">    <span class="keyword">static</span> SingletonHungry *instance; <span class="comment">// 静态成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止拷贝构造和赋值操作</span></span><br><span class="line">    <span class="built_in">SingletonHungry</span>(<span class="keyword">const</span> SingletonHungry &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    SingletonHungry &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> SingletonHungry &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试用</span></span><br><span class="line">    <span class="keyword">int</span> test_num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> SingletonHungry *<span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resetNum</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        test_num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test_num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类外定义，main开始执行前，该对象就存在了，本身就是线程安全的，整个程序中只有一个实例</span></span><br><span class="line">SingletonHungry *SingletonHungry::instance = <span class="keyword">new</span> <span class="built_in">SingletonHungry</span>();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSingletonHungry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;origin-&gt;getNum() = &quot;</span> &lt;&lt; SingletonHungry::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">getNum</span>() &lt;&lt; endl;</span><br><span class="line">    SingletonHungry *p1 = SingletonHungry::<span class="built_in">getInstance</span>();</span><br><span class="line">    SingletonHungry *p2 = SingletonHungry::<span class="built_in">getInstance</span>();</span><br><span class="line">    p1-&gt;<span class="built_in">resetNum</span>(<span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1-&gt;getNum() = &quot;</span> &lt;&lt; p1-&gt;<span class="built_in">getNum</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2-&gt;getNum() = &quot;</span> &lt;&lt; p2-&gt;<span class="built_in">getNum</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1 = &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2 = &quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">testSingletonHungry</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>
<h3 id="懒汉式在类加载时不创建对象实例而是在第一次调用时创建对象实例">2.2
<strong>懒汉式：</strong>在类加载时不创建对象实例，而是在第一次调用时创建对象实例</h3>
<h4 id="懒汉式的线程不安全形式">2.2.1 懒汉式的线程不安全形式</h4>
<pre><code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonLazy1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">SingletonLazy1</span>()&#123;&#125;;              <span class="comment">// 构造函数私有化</span></span><br><span class="line">    <span class="keyword">static</span> SingletonLazy1 *instance; <span class="comment">// 在类加载时不创建对象实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止拷贝构造和赋值操作</span></span><br><span class="line">    <span class="built_in">SingletonLazy1</span>(<span class="keyword">const</span> SingletonLazy1 &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    SingletonLazy1 &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> SingletonLazy1 &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> SingletonLazy1 *<span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">NULL</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="built_in">SingletonLazy1</span>(); <span class="comment">// 第一次调用时创建对象实例</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">SingletonLazy1 *SingletonLazy1::instance = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSingletonLazy1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SingletonLazy1 *p1 = SingletonLazy1::<span class="built_in">getInstance</span>();</span><br><span class="line">    SingletonLazy1 *p2 = SingletonLazy1::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1 = &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2 = &quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>
<h4 id="懒汉式的双重检查锁定dcl即-double-checked-locking">2.2.2
懒汉式的双重检查锁定（DCL，即 double-checked locking）</h4>
<pre><code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 在声明实例化对象时，使用volatile修饰保证线程安全，否则可能出现指令重排</span></span><br><span class="line"><span class="comment">* 也就是在一个线程内，执行instance = new SingletonLazy2_DCL();时，</span></span><br><span class="line"><span class="comment">  编译器可能会先分配内存空间，再初始化对象，最后将singleton指向分配的内存空间，</span></span><br><span class="line"><span class="comment">* 这样在多线程环境下，其他线程可能会在singleton初始化对象之后，</span></span><br><span class="line"><span class="comment">  指向分配的内存空间之前就访问了singleton，这样其他线程在执行if (instance == nullptr)时，会判断为false，但是此时singleton指向的对象还没指向内存空间，这样实际上其它线程返回的就是一个nuullptr指针，而不是一个实例化的对象</span></span><br><span class="line"><span class="comment">* 实现实例化 singleton = new Singleton() 可以分为3步</span></span><br><span class="line"><span class="comment">* 1.分配内存空间</span></span><br><span class="line"><span class="comment">* 2.初始化对象</span></span><br><span class="line"><span class="comment">* 3.将singleton指向分配的内存空间，避免指令重排</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonLazy2_DCL</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">SingletonLazy2_DCL</span>()&#123;&#125;;                       <span class="comment">// 构造函数私有化</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonLazy2_DCL *instance; <span class="comment">// 必须用volatile修饰</span></span><br><span class="line">    <span class="keyword">static</span> mutex mtx;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">volatile</span> <span class="keyword">static</span> SingletonLazy2_DCL *<span class="title">getInstance</span><span class="params">()</span> <span class="comment">// 需要进行同步加锁，保证线程安全</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;                                          <span class="comment">// 第一次检查</span></span><br><span class="line">            mtx.<span class="built_in">lock</span>(); <span class="comment">// 加锁</span></span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;                              <span class="comment">// 第二次检查,防止多个线程同时进入临界区</span></span><br><span class="line">                instance = <span class="keyword">new</span> <span class="built_in">SingletonLazy2_DCL</span>(); <span class="comment">// 创建实例</span></span><br><span class="line">            &#125;</span><br><span class="line">            mtx.<span class="built_in">unlock</span>(); <span class="comment">// 解锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">volatile</span> SingletonLazy2_DCL *SingletonLazy2_DCL::instance = <span class="literal">nullptr</span>;</span><br><span class="line">mutex SingletonLazy2_DCL::mtx;<span class="comment">// 静态成员变量需要在类外初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSingletonLazy2_DCL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> SingletonLazy2_DCL *p1 = SingletonLazy2_DCL::<span class="built_in">getInstance</span>();</span><br><span class="line">    <span class="keyword">volatile</span> SingletonLazy2_DCL *p2 = SingletonLazy2_DCL::<span class="built_in">getInstance</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1 = &quot;</span> &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2 = &quot;</span> &lt;&lt; p2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>
<p>指令重排在多线程下的危害如下：（线程B返回一个未初始化的instance对象）</p>
<p><img src="/2024/01/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/DCL.png" width="50%" heigh="50%"></p>
<h4 id="懒汉式的stdcall_oncec11保证某个函数在多线程环境中只被调用一次">2.2.3
懒汉式的<code>std::call_once</code>(C++11)，保证某个函数在多线程环境中只被调用一次</h4>
<pre><code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> Singleton* instance;</span><br><span class="line">    <span class="keyword">static</span> std::once_flag onceFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有化构造函数</span></span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁止拷贝构造和赋值操作</span></span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取单例对象的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::<span class="built_in">call_once</span>(onceFlag, []() &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></code></pre>
<h4 id="c11之后的局部静态变量是线程安全的">2.2.4
C++11之后的局部静态变量是线程安全的</h4>
<p>为了优雅地解决懒汉模式的线程安全问题，《Effective C++》（Item
04）中的提出另一种更优雅的单例模式实现，使用函数内的局部静态对象，这种方法不用加锁和解锁操作。(也就是将静态变量的声明放在函数内部，使其成为<strong>函数内的局部静态变量</strong>，而不是在类private或public中声明)</p>
<p>C++11之后，编译器要求保证局部静态变量的线程安全，所以这种方法不需要加锁也能由编译器自动保证线程安全的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">single</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">single</span>()&#123;&#125;</span><br><span class="line">    ~<span class="built_in">single</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> single* <span class="title">getinstance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">single* <span class="title">single::getinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> single obj;<span class="comment">//局部静态变量：线程安全的</span></span><br><span class="line">    <span class="keyword">return</span> &amp;obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三reference">三、Reference</h2>
<ol type="1">
<li><a href="https://blog.csdn.net/unonoi/article/details/121138176">【C++】C++
单例模式总结（5种单例实现方法）</a></li>
<li><a href="https://blog.csdn.net/trackxiaoxin321/article/details/110749781">C++设计模式之单例模式详解（懒汉模式、饿汉模式、双重锁）</a></li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式2：工厂方法模式(C++)</title>
    <url>/2024/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p><a href="https://github.com/AkiraZheng/designPattern/tree/master/designPattern">本文中所有设计模式Github代码</a>
其中本文<strong>工厂方法模式-简单工厂</strong>相关代码在<code>FactoryMethod_SimpleFactory.h</code>文件中
本文<strong>工厂方法模式-工厂方法</strong>相关代码在<code>FactoryMethod.h</code>文件中</p>
</blockquote>
<blockquote>
<p>工厂方法中，一般一个应用中每一个工厂系列只需要一个ConcreteFactory类的实例，因此设计工厂类时，通常将其设计为单例模式</p>
</blockquote>
<h2 id="一简单工厂">一、简单工厂</h2>
<h3 id="什么是简单工厂">1. 什么是简单工厂</h3>
<p>简单工厂中，设计的核心思想是<strong>将对象的创建和使用分离</strong>，即将对象的创建交给工厂类（非抽象类），而将对象的使用交给客户端。</p>
<p>在<strong>简单工厂</strong>设计中，工厂类采用通常使用<strong>switch-case</strong>语句来根据不同的条件创建不同的对象，这样的设计是<strong>不符合开闭原则</strong>的，因为每次添加新的产品都需要修改工厂类的代码(在switch-case语句中加入新产品的create代码)，代码灵活性很差。</p>
<p>因此需要将简单工厂的设计升级为工厂方法模式，在工厂类中使用纯虚函数方法(createProduct方法)将其设计成抽象类。</p>
<blockquote>
<p>开闭原则：对扩展开放、对修改关闭；
也就是说，我们可以添加代码，但是添加代码的时候<strong>不能够对现有的代码进行修改</strong></p>
</blockquote>
<h3 id="简单工厂的代码">2. 简单工厂的代码</h3>
<ul>
<li>代码UML类图
<img src="/2024/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/SimpleFactory.png" width="90%" heigh="90%"></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*产品类的设计：抽象基类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line">    <span class="comment">// 产品基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Phone</span>(string name):_phone_name(name)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Phone</span>()&#123;&#125;; <span class="comment">//基类应该被声明为虚析构函数</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _phone_name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iphone</span>:</span><span class="keyword">public</span> Phone&#123;</span><br><span class="line">    <span class="comment">// 产品派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Iphone</span>(string name):<span class="built_in">Phone</span>(name)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I have a phone named: &quot;</span> &lt;&lt; _phone_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaWei</span>:</span><span class="keyword">public</span> Phone&#123;</span><br><span class="line">    <span class="comment">// 产品派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HuaWei</span>(string name):<span class="built_in">Phone</span>(name)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I have a phone named: &quot;</span> &lt;&lt; _phone_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*工厂类的设计：非抽象类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span>&#123;</span></span><br><span class="line">    <span class="comment">// 工厂类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">phone_type</span>&#123;</span></span><br><span class="line">        IPHONE,</span><br><span class="line">        HUAWEI</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">Phone* <span class="title">createPhone</span><span class="params">(<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IPHONE:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Iphone</span>(<span class="string">&quot;iphone&quot;</span>);</span><br><span class="line">        <span class="keyword">case</span> HUAWEI:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">HuaWei</span>(<span class="string">&quot;huawei&quot;</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*测试函数*/</span></span><br><span class="line"><span class="comment">/*测试函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFactory_simpleFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PhoneFactory factory;</span><br><span class="line">    Phone* p1 = factory.<span class="built_in">createPhone</span>(PhoneFactory::IPHONE);</span><br><span class="line">    Phone* p2 = factory.<span class="built_in">createPhone</span>(PhoneFactory::HUAWEI);</span><br><span class="line">    p1-&gt;<span class="built_in">show</span>();</span><br><span class="line">    p2-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二工厂方法模式">二、工厂方法模式</h2>
<ol type="1">
<li><p>工厂方法相较于简单工厂的改进</p>
<ul>
<li>简单工厂中，<strong>产品基类</strong>是<strong>抽象</strong>的，而<strong>工厂类</strong>是<strong>非抽象</strong>的，这样的设计是不符合开闭原则的</li>
<li>工厂模式将<strong>工厂基类</strong>也设计成一个<strong>抽象</strong>的，并针对不同的产品类型设计不同的<strong>工厂派生类</strong>，这样在用户使用的时候可以很有目的性地选择对应的工厂派生类进行初始化，而不是简单工厂中的switch-case语句的随机性选择。</li>
</ul></li>
<li><p>工厂方法的缺点</p>
<ul>
<li>工厂方法模式的缺点是<strong>每增加一个产品，就需要增加一个产品工厂类</strong>，这样会导致工厂类的数量增加，增加了系统的复杂度。</li>
<li>工厂方法中的工厂类<strong>只有一个create方法</strong>，因此当产品不断增加时，需要的工厂派生类也不断增加，这样不利于管理，因此需要将工厂方法模式升级为<strong>抽象工厂模式</strong>。</li>
</ul></li>
</ol>
<h2 id="三工厂方法模式的实现代码c">三、工厂方法模式的实现代码（C++）</h2>
<blockquote>
<p>tips:使用智能指针需要引入头文件<code>#include &lt;memory&gt;</code>，使用普通指针<strong>new</strong>之后记得<strong>delete</strong></p>
</blockquote>
<ul>
<li>代码UML类图
<img src="/2024/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/FactoryMethod.png" width="90%" heigh="90%"></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*产品类的设计：抽象基类*/</span></span><br><span class="line"><span class="comment">//1. 产品抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line">    <span class="comment">// 产品基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Phone</span>(string name):_phone_name(name)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Phone</span>()&#123;&#125;; <span class="comment">//基类应该被声明为虚析构函数</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _phone_name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2. 产品派生具体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iphone</span>:</span><span class="keyword">public</span> Phone&#123;</span><br><span class="line">    <span class="comment">// 产品派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Iphone</span>(string name):<span class="built_in">Phone</span>(name)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I have a phone named: &quot;</span> &lt;&lt; _phone_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaWei</span>:</span><span class="keyword">public</span> Phone&#123;</span><br><span class="line">    <span class="comment">// 产品派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HuaWei</span>(string name):<span class="built_in">Phone</span>(name)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I have a phone named: &quot;</span> &lt;&lt; _phone_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>说明：在工厂抽象类设计时，具体工厂一一对应用于new一个具体产品，当具体工厂类创建时，不同具体产品要求的的参数不同时，可以将参数也设计成一个抽象基类，这样在具体工厂类中可以根据不同的参数创建不同的产品。
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*工厂类的设计：抽象基类*/</span></span><br><span class="line"><span class="comment">//1. 工厂抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span>&#123;</span></span><br><span class="line">    <span class="comment">// 工厂类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Phone* <span class="title">createPhone</span><span class="params">(string name)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">PhoneFactory</span>()&#123;&#125;; <span class="comment">//基类应该被声明为虚析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2. 工厂派生具体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IphoneFactory</span>:</span><span class="keyword">public</span> PhoneFactory&#123;</span><br><span class="line">    <span class="comment">// 工厂派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Phone* <span class="title">createPhone</span><span class="params">(string name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Iphone</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaWeiFactory</span>:</span><span class="keyword">public</span> PhoneFactory&#123;</span><br><span class="line">    <span class="comment">// 工厂派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Phone* <span class="title">createPhone</span><span class="params">(string name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">HuaWei</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*测试函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFactory_factoryMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;PhoneFactory&gt; <span class="title">iPhoneFactory</span><span class="params">(<span class="keyword">new</span> IphoneFactory())</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;PhoneFactory&gt; <span class="title">huaweiFactory</span><span class="params">(<span class="keyword">new</span> HuaWeiFactory())</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Phone&gt; <span class="title">iphone</span><span class="params">(iPhoneFactory-&gt;createPhone(<span class="string">&quot;iphone&quot;</span>))</span></span>;<span class="comment">//通过单独的Iphone工厂创建对应产品</span></span><br><span class="line">    <span class="function">unique_ptr&lt;Phone&gt; <span class="title">huawei</span><span class="params">(huaweiFactory-&gt;createPhone(<span class="string">&quot;huawei&quot;</span>))</span></span>;<span class="comment">//通过单独的HuaWei工厂创建对应产品</span></span><br><span class="line">    iphone-&gt;<span class="built_in">show</span>();</span><br><span class="line">    huawei-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="四reference">四、Reference</h2>
<ol type="1">
<li><a href="https://blog.csdn.net/m0_46308273/article/details/117126962">C++工厂模式（简单工厂、工厂方法、抽象工厂）</a></li>
<li><a href="https://github.com/youngyangyang04/kama-DesignPattern/blob/main/DesignPattern/2-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.md">工厂方法模式</a></li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式3：抽象工厂模式(C++)</title>
    <url>/2024/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3%EF%BC%9A%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p><a href="https://github.com/AkiraZheng/designPattern/tree/master/designPattern">本文中所有设计模式Github代码</a>
其中本文<strong>抽象工厂模式</strong>相关代码在<code>AbstractFactory.h</code>文件中</p>
</blockquote>
<h2 id="一抽象工厂模式">一、抽象工厂模式</h2>
<h3 id="什么是抽象工厂模式">1. 什么是抽象工厂模式</h3>
<p>抽象工厂模式是指<strong>提供一个创建一系列相关或相互依赖对象的接口</strong>，而无需指定它们具体的类。</p>
<p>抽象工厂模式是工厂方法模式的升级版：工厂方法中，一个工厂只能生产<strong>一种</strong>产品，当需要生产多种相关的产品时，如手机生产厂商<strong>既生产手机又生产手机壳</strong>，这时就需要使用抽象工厂模式，将手机和手机壳的生产分别交给两个工厂，再将工厂细分为具体的产品。</p>
<h3 id="抽象工厂模式优缺点">2. 抽象工厂模式优缺点</h3>
<h4 id="优点">优点</h4>
<ul>
<li><p>抽象工厂模式可以在<strong>不修改</strong>具体工厂类的情况下引入<strong>新的产品</strong>，即<strong>增加新的产品族</strong>，满足开闭原则</p></li>
<li><p>抽象工厂模式可以保证由<strong>同一个工厂类创建的产品</strong>之间的兼容性</p></li>
</ul>
<h4 id="缺点">缺点</h4>
<ul>
<li><p>抽象工厂模式的<strong>扩展性</strong>是有限的，<strong>增加新的产品族</strong>时，需要修改抽象工厂类，不符合开闭原则</p></li>
<li><p>客户(Client)必须知道抽象工厂的所有具体工厂类，才能根据需求创建对应的工厂实例</p></li>
</ul>
<h3 id="抽象工厂模式设计原理">3. 抽象工厂模式设计原理</h3>
<ul>
<li>依赖倒置原则：高层模块不应该依赖于底层模块，两者都应该依赖于抽象
<ul>
<li>这里的高层模块是指客户端，底层模块是指具体产品类，抽象工厂中客户端依赖于抽象工厂类，而不是具体工厂类，因此当工厂类产品系列更换时，只需要更换具体工厂类，客户端不需要修改代码</li>
</ul></li>
<li>开闭原则：对扩展开放、对修改关闭
<ul>
<li>当引入新的产品时，只需要增加对应产品的具体工厂类，而不需要修改抽象工厂类</li>
</ul></li>
<li>接口隔离原则：使用多个专门的接口，而不使用单一的总接口
<ul>
<li>抽象工厂模式中，每个具体工厂类都有自己的接口，而不是使用单一的总接口</li>
</ul></li>
</ul>
<h3 id="简单工厂工厂方法抽象工厂的区别">4.
简单工厂、工厂方法、抽象工厂的区别</h3>
<ul>
<li><p>简单工厂模式：一个工厂方法创建所有具体产品</p></li>
<li><p>工厂方法模式：一个工厂方法创建一个具体产品</p></li>
<li><p>抽象工厂模式：一个工厂方法可以创建一类具体产品</p></li>
</ul>
<h2 id="二抽象工厂模式的实现代码c">二、抽象工厂模式的实现代码（C++）</h2>
<ul>
<li>代码UML类图</li>
</ul>
<p><img src="/2024/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3%EF%BC%9A%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/AbstractFactory.png" width="100%" heigh="100%"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*手机产品类的设计*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line">    <span class="comment">// 产品基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Phone</span>(string name):_phone_name(name)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Phone</span>()&#123;&#125;; <span class="comment">//基类应该被声明为虚析构函数</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string _phone_name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone_Iphone</span>:</span><span class="keyword">public</span> Phone&#123;</span><br><span class="line">    <span class="comment">// 产品派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Phone_Iphone</span>(string name):<span class="built_in">Phone</span>(name)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;手机工厂生产具体产品: &quot;</span> &lt;&lt; _phone_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone_Huawei</span>:</span><span class="keyword">public</span> Phone&#123;</span><br><span class="line">    <span class="comment">// 产品派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Phone_Huawei</span>(string name):<span class="built_in">Phone</span>(name)&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;手机工厂生产具体产品: &quot;</span> &lt;&lt; _phone_name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*手机壳产品类的设计*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneShell</span>&#123;</span></span><br><span class="line">    <span class="comment">// 产品基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">PhoneShell</span>()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">PhoneShell</span>()&#123;&#125;; <span class="comment">//基类应该被声明为虚析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneShell_Iphone</span>:</span><span class="keyword">public</span> PhoneShell&#123;</span><br><span class="line">    <span class="comment">// 产品派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">PhoneShell_Iphone</span>()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;手机壳工厂生产具体产品: Iphone壳&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneShell_Huawei</span>:</span><span class="keyword">public</span> PhoneShell&#123;</span><br><span class="line">    <span class="comment">// 产品派生类</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">PhoneShell_Huawei</span>()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;手机壳工厂生产具体产品: Huawei壳&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*工厂类的设计*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span>&#123;</span></span><br><span class="line">    <span class="comment">// 抽象工厂类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Phone* <span class="title">createPhone</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> PhoneShell* <span class="title">createPhoneShell</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">AbstractFactory</span>()&#123;&#125;; <span class="comment">//基类应该被声明为虚析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory_Iphone</span>:</span><span class="keyword">public</span> AbstractFactory&#123;</span><br><span class="line">    <span class="comment">// 具体苹果工厂类</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function">Phone* <span class="title">createPhone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Phone_Iphone</span>(<span class="string">&quot;Iphone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">PhoneShell* <span class="title">createPhoneShell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">PhoneShell_Iphone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory_Huawei</span>:</span><span class="keyword">public</span> AbstractFactory&#123;</span><br><span class="line">    <span class="comment">// 具体华为工厂类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Phone* <span class="title">createPhone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Phone_Huawei</span>(<span class="string">&quot;Huawei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">PhoneShell* <span class="title">createPhoneShell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">PhoneShell_Huawei</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*测试函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAbstractFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">unique_ptr&lt;AbstractFactory&gt; <span class="title">iphoneFactory</span><span class="params">(<span class="keyword">new</span> PhoneFactory_Iphone())</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;AbstractFactory&gt; <span class="title">huaweiFactory</span><span class="params">(<span class="keyword">new</span> PhoneFactory_Huawei())</span></span>;</span><br><span class="line">    <span class="function">unique_ptr&lt;Phone&gt; <span class="title">iphone</span><span class="params">(iphoneFactory-&gt;createPhone())</span></span>;<span class="comment">//通过单独的Iphone工厂创建手机产品</span></span><br><span class="line">    <span class="function">unique_ptr&lt;PhoneShell&gt; <span class="title">iphoneShell</span><span class="params">(iphoneFactory-&gt;createPhoneShell())</span></span>;<span class="comment">//通过单独的Iphone工厂创建手机壳产品</span></span><br><span class="line">    <span class="function">unique_ptr&lt;Phone&gt; <span class="title">huawei</span><span class="params">(huaweiFactory-&gt;createPhone())</span></span>;<span class="comment">//通过单独的HuaWei工厂创建手机产品</span></span><br><span class="line">    <span class="function">unique_ptr&lt;PhoneShell&gt; <span class="title">huaweiShell</span><span class="params">(huaweiFactory-&gt;createPhoneShell())</span></span>;<span class="comment">//通过单独的HuaWei工厂创建手机壳产品</span></span><br><span class="line">    iphone-&gt;<span class="built_in">show</span>();</span><br><span class="line">    iphoneShell-&gt;<span class="built_in">display</span>();</span><br><span class="line">    huawei-&gt;<span class="built_in">show</span>();</span><br><span class="line">    huaweiShell-&gt;<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三reference">三、Reference</h2>
<ol type="1">
<li><a href="https://blog.csdn.net/m0_46308273/article/details/117126962">C++工厂模式（简单工厂、工厂方法、抽象工厂）</a></li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式4：代理模式(C++)</title>
    <url>/2024/02/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4%EF%BC%9A%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p><a href="https://github.com/AkiraZheng/designPattern/tree/master/designPattern">本文中所有设计模式Github代码</a>
其中本文<strong>代理模式</strong>相关代码在<code>ProxyPattern.h</code>文件中</p>
</blockquote>
<h2 id="一代理模式基础">一、代理模式基础</h2>
<h3 id="代理模式的使用场景">1. 代理模式的使用场景</h3>
<blockquote>
<p>当某些对象由于某些原因，<strong>不能直接访问另一个对象</strong>，需要<strong>通过一个代理对象来间接访问</strong>时，可以使用代理模式。</p>
</blockquote>
<blockquote>
<p>某些原因指的是比如：对象创建的开销大、某些操作需要安全控制、需要访问进程外的对象等。</p>
</blockquote>
<blockquote>
<p>在<strong>分布式系统</strong>中，代理模式的使用极其广泛，例如在分布式系统中，客户端和服务器端的交互，客户端无法直接访问服务器端的对象，需要通过代理对象来访问服务器端的对象。</p>
</blockquote>
<h3 id="代理模式的定义">2. 代理模式的定义</h3>
<p>代理模式是一种结构型设计模式，它可以<strong>为其他对象提供一种代理以控制对这个对象的访问</strong></p>
<p>代理类和被代理类<strong>有相同的接口</strong>（继承同一个基类），代理类主要负责为被代理类预处理消息、过滤消息、把消息转发给被代理类，以及事后处理消息等。</p>
<h2 id="二代理模式的实现c">二、代理模式的实现(C++)</h2>
<p>在没有使用代理模式时，Client有一个需求是需要new一个RealSubject对象，然后调用其方法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Isubject</span>&#123;</span></span><br><span class="line">    <span class="comment">// 抽象基类</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span>:</span><span class="keyword">public</span> Isubject&#123;</span><br><span class="line">    <span class="comment">// 真实主题类</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;RealSubject::Request()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span>&#123;</span></span><br><span class="line">    Isubject* _subject;</span><br><span class="line">    <span class="comment">// 客户端</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Client</span>()&#123;</span><br><span class="line">            _subject = <span class="keyword">new</span> <span class="built_in">RealSubject</span>();<span class="comment">//客户端需要使用一个RealSubject对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DoTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">            _subject-&gt;<span class="built_in">Request</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>从上面的代码中中，我们可以看到，Client需要new一个RealSubject对象，然后调用其方法。但是由于某些原因，Client是无法实现直接new一个RealSubject对象</p>
<p>那么这个时候需要通过<strong>一个代理对象Proxy</strong>来间接访问RealSubject对象</p>
<p>在代理模式中，<strong>代理类Proxy</strong>和<strong>被代理类RealSubject</strong>都<strong>继承自同一个基类Isubject</strong>，这样可以保证代理类和被代理类有相同的接口。Proxy就可以在这个接口上实现对RealSubject的一系列代理操作</p>
<p>Proxy在这个接口上可以创建一个RealSubject对象，然后调用其方法，Client通过Proxy来间接访问RealSubject对象；也可能在如<strong>分布式</strong>的场景下，Proxy在这个接口上可以通过网络访问RealSubject对象，然后调用其方法，Client通过Proxy来间接访问RealSubject对象。因此Proxy这个接口的实现方式是复杂多变的，这里介绍设计模式，因此将其简化了，旨在理解它的实现流程</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Isubject</span>&#123;</span></span><br><span class="line">    <span class="comment">// Proxy和RealSubject共同继承的抽象基类</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span>:</span><span class="keyword">public</span> Isubject&#123;</span><br><span class="line">    <span class="comment">// 真实主题类</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;RealSubject::Request()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>:</span><span class="keyword">public</span> Isubject&#123;</span><br><span class="line">    <span class="comment">// 代理类</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Request</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//实现一系列复杂的代理操作，来对RealSubject进行访问</span></span><br><span class="line">            <span class="comment">//有些框架会用自动工具来生成代理</span></span><br><span class="line">            <span class="comment">//不同代理类的内部实现粒度和方法都是相差很大的，但是具体实现思想是一致的（Proxy和RealSubject用相同的接口）</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span>&#123;</span></span><br><span class="line">    Isubject* _subject;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Client</span>()&#123;</span><br><span class="line">            _subject = <span class="keyword">new</span> <span class="built_in">Proxy</span>();<span class="comment">//客户端需要使用一个Proxy对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DoTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">            _subject-&gt;<span class="built_in">Request</span>();<span class="comment">//通过Proxy类间接访问RealSubject对象</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里Proxy和RealSubject共同继承的抽象基类Isubject，以通过同一个接口名的接口来实现Client实际想实现的对RealSubject的访问操作，好处是Client不用同时记住代理类和实际类的接口名，只需要知道抽象类的接口名就行，这种方法可以使客户端感觉是在对RealSubject进行操作。这种设计也是<strong>符合设计模式的开闭原则</strong>的，即对扩展开放，对修改关闭。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>从0开始实现线程池(C++)</title>
    <url>/2024/02/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88C++%EF%BC%89/</url>
    <content><![CDATA[<h2 id="一线程池概述">一、线程池概述</h2>
<h3 id="线程池的设计初衷">1. 线程池的设计初衷</h3>
<p>线程池是一种<strong>池式结构</strong>(内存池、消息队列也属于池式结构)，主要解决<strong>缓存问题</strong>，起缓冲作用</p>
<p>C++在进行多线程的创建和销毁时，会有比较大的开销，特别是在进行比快的线程操作时，会把很大的时间消耗在线程的创建和销毁上</p>
<p>为了减少在程序中反复创建和销毁线程，就引入了线程池的概念</p>
<p>线程池是在程序启动时，就创建一定数量的线程，放入一个<strong>线程队列</strong>中，当需要使用线程时，就从线程队列中取出一个线程，使用完毕后，再放回线程队列中</p>
<h3 id="线程池的主要作用">2. 线程池的主要作用</h3>
<p>线程池可以实现<strong>异步解耦</strong>，将任务分解为多个子任务，然后将子任务分配给线程池中的线程执行，从而提高程序的执行效率</p>
<p>线程池的使用举例：</p>
<p><strong>a. 服务器端处理客户端请求</strong></p>
<p>当有客户端请求时，服务器端就会创建一个线程来处理客户端的请求，但是如果客户端的请求量很大，服务器端就会创建很多线程，这样会导致服务器端的性能下降</p>
<p>因此可以使用线程池来解决这个问题，将客户端的请求放入线程池中，线程池中的线程来处理客户端的请求。具体实现如下：
1. 创建一个线程池，设置线程池的大小为n 2.
当有客户端请求时，就将客户端的请求放入线程池中 3.
线程池中的线程来处理客户端的请求 4.
处理完客户端的请求后，将线程归还给线程池</p>
<p><strong>b. 保存日志文件</strong></p>
<p>在日志保存时，需要进行文件的读写操作，性能会压在磁盘上，可以采用线程池实现异步解耦来解决这个问题</p>
<h2 id="二c多线程基础学习">二、C++多线程基础学习</h2>
<h3 id="互斥锁解决多线程数据共享问题">1.
互斥锁解决多线程数据共享问题</h3>
<p>多线程操作中，经常会需要在多个线程任务中同时使用同一资源（变量、文件等），如果不加锁往往会出现<strong>数据竞争</strong>问题</p>
<p>数据竞争问题会导致<strong>数据不一致性</strong>，比如对于同一个变量<code>a</code>，线程1对<code>a</code>进行修改，但是还没结束单条指令的时候，线程2就开始对<code>a</code>进行修改，那么最终<code>a</code>的值就会出现混乱</p>
<p>下面举一个例子（Windows下），我们开启两个线程对同一个<code>a</code>变量分别进行5000次的自增操作，然后打印<code>a</code>的值，我们会发现<code>a</code>的值并不是10000，而是一个小于10000的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">		a++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMultiThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">thread <span class="title">t1</span><span class="params">(func)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">t2</span><span class="params">(func)</span></span>;</span><br><span class="line">	t1.<span class="built_in">join</span>();</span><br><span class="line">	t2.<span class="built_in">join</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;final a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">testMultiThread</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时我们对两个线程共享的数据<code>a</code>进行加锁，就可以保证当一个线程拿到<code>a</code>变量的锁之后，另一个线程就无法对<code>a</code>进行修改，直到第一个线程释放锁unlock，下一个线程才可以执行对应的操作，保证了共享数据的安全性</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">mutex mtx;<span class="comment">//定义一个互斥锁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">		mtx.<span class="built_in">lock</span>();<span class="comment">//加锁</span></span><br><span class="line">		a++;</span><br><span class="line">		mtx.<span class="built_in">unlock</span>();<span class="comment">//解锁</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMultiThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">thread <span class="title">t1</span><span class="params">(func)</span></span>;</span><br><span class="line">	<span class="function">thread <span class="title">t2</span><span class="params">(func)</span></span>;</span><br><span class="line">	t1.<span class="built_in">join</span>();</span><br><span class="line">	t2.<span class="built_in">join</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;final a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">testMultiThread</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，此时经过两个线程各自进行5000次的自增操作后，<code>a</code>的值变为了10000，也就是实现了多线程对共享变量<code>a</code>的安全操作</p>
<h3 id="死锁问题的出现">2. 死锁问题的出现</h3>
<p><strong>1）造成死锁的条件</strong></p>
<p>造成死锁有四个<strong>必要条件</strong>：</p>
<ul>
<li><strong>互斥</strong>：一个资源每次只能被一个进程使用</li>
<li><strong>持有和等待</strong>：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li>
<li><strong>不可剥夺</strong>：进程已获得的资源，在未使用完之前，不能被其他进程强行剥夺<strong>（用定时释放解决）</strong></li>
<li><strong>循环等待</strong>：若干进程之间形成头尾相接的循环等待资源关系<strong>（通过顺序加锁减少出现概率）</strong></li>
</ul>
<p><strong>2）造成死锁的情况及对应解决方法</strong></p>
<p>造成死锁的情况可能有：</p>
<ul>
<li>忘记释放锁</li>
<li>重复加锁</li>
<li>循环等待：两个线程分别在等待对方释放锁</li>
</ul>
<p>对应的解决方法：</p>
<ul>
<li>检查锁的释放</li>
<li>多把锁按<strong>顺序加锁</strong></li>
<li>引入死锁检查模块</li>
<li>通过定时释放资源解决不可剥夺问题（设置<strong>过期时间</strong>）</li>
<li>通过死锁检查工具检查：
<ul>
<li>CPP用<code>gdb</code>+<code>pstack</code>等工具
<ul>
<li>用<code>pstack 进程pid</code>查看进程的堆栈信息，发现threadA和threadB一直在lock_wait</li>
<li>用<code>gdb -p 进程pid</code>进入进程，然后用<code>info thread</code>查看有多少个线程，最后用<code>thread 线程id</code>切换线程并查看发生死锁的线程的堆栈信息</li>
</ul></li>
<li>Go用<code>pprof</code>工具</li>
</ul></li>
</ul>
<p><strong>3）死锁中循环等待问题的例子</strong></p>
<p>死锁问题是指两个或多个线程互相等待对方释放资源，导致程序无法继续执行的问题</p>
<ul>
<li>举个例子，线程1和线程2分别都有两把锁<code>mtx1</code>和<code>mtx2</code>，线程1先对<code>mtx1</code>加锁，线程2先对<code>mtx2</code>加锁</li>
<li>然后线程1下一条指令是对<code>mtx2</code>加锁，但是此时<code>mtx2</code>已经被线程2加锁了，线程1就会等待线程2释放<code>mtx2</code>的锁</li>
<li>同时线程2下一条指令是对<code>mtx1</code>加锁，但是此时<code>mtx1</code>已经被线程1加锁了，线程2就会等待线程1释放<code>mtx1</code>的锁</li>
<li>这样就会导致线程1和线程2互相等待对方释放锁，导致程序一直卡着无法继续执行</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">std::mutex mtx1, mtx2;<span class="comment">//定义两把锁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        mtx1.<span class="built_in">lock</span>();<span class="comment">//step1</span></span><br><span class="line">        mtx2.<span class="built_in">lock</span>();<span class="comment">//step3:等待不到mxt2被释放，卡死</span></span><br><span class="line">        mtx2.<span class="built_in">unlock</span>();</span><br><span class="line">        mtx1.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        mtx2.<span class="built_in">lock</span>();<span class="comment">//step2</span></span><br><span class="line">        mtx1.<span class="built_in">lock</span>();<span class="comment">//step4:等待不到mxt1被释放，卡死</span></span><br><span class="line">        mtx1.<span class="built_in">unlock</span>();</span><br><span class="line">        mtx2.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMultiThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(func1)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(func2)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">testMultiThread</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此，我们在使用多线程的时候，需要注意避免死锁问题的出现：在多个线程中，尽量不要同时对多个锁进行加锁，如果需要同时对多个锁进行加锁，需要保持<strong>多个线程中对锁的加锁顺序一致</strong></p>
<p>同样采用上面的例子，我们可以将<code>func1</code>和<code>func2</code>中对锁的加锁顺序保持一致：</p>
<ul>
<li><code>func1</code>中先对<code>mtx1</code>加锁，此时由于<code>mtx1</code>被加锁了，第二个线程拿不到<code>mtx1</code>的锁，就会先等待<code>mtx1</code>被释放，此时<code>func1</code>就可以接着直接对<code>mtx2</code>加锁</li>
<li>等到<code>func1</code>释放<code>mtx1</code>的锁后，<code>func2</code>就可以开始对<code>mtx1</code>加锁，然后等待<code>func2</code>释放<code>mtx2</code>的锁</li>
<li>通过两个线程<strong>对锁的加锁顺序保持一致</strong>，就可以避免死锁问题的出现</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">std::mutex mtx1, mtx2;<span class="comment">//定义两把锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        mtx1.<span class="built_in">lock</span>();<span class="comment">//step1</span></span><br><span class="line">        mtx2.<span class="built_in">lock</span>();<span class="comment">//step2</span></span><br><span class="line">        mtx2.<span class="built_in">unlock</span>();<span class="comment">//step3</span></span><br><span class="line">        mtx1.<span class="built_in">unlock</span>();<span class="comment">//maybe step5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        mtx1.<span class="built_in">lock</span>();<span class="comment">//maybe step4</span></span><br><span class="line">        mtx2.<span class="built_in">lock</span>();<span class="comment">//maybe step6</span></span><br><span class="line">        mtx2.<span class="built_in">unlock</span>();</span><br><span class="line">        mtx1.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMultiThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">thread <span class="title">t1</span><span class="params">(func1)</span></span>;</span><br><span class="line">    <span class="function">thread <span class="title">t2</span><span class="params">(func2)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">testMultiThread</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="linux下互斥锁和条件变量的使用">3.
Linux下互斥锁和条件变量的使用</h3>
<p>Linux下c++互斥锁和条件变量的使用，需要引入<code>&lt;pthread.h&gt;</code>头文件，使用<code>pthread_mutex_t</code>和<code>pthread_cond_t</code>来定义互斥锁和条件变量</p>
<ul>
<li><strong>互斥锁</strong>是对多线程共享资源的保护</li>
<li><strong>条件变量</strong>是当多个线程需要<strong>等待某个条件满足时</strong>，就可以使用条件变量来<strong>进行线程的等待（进入阻塞）和唤醒</strong>。如果采用互车锁进行阻塞会造成死锁，所以加入条件变量来实现线程的等待和唤醒</li>
</ul>
<h4 id="pthread_mutex_t的简单使用">pthread_mutex_t的简单使用</h4>
<ul>
<li><code>pthread_mutex_t</code>定义一个互斥锁</li>
<li><code>pthread_mutex_init</code>初始化互斥锁，传入两个参数：第一个参数是互斥锁的地址，第二个参数是互斥锁的属性，一般传入<code>NULL</code></li>
<li><code>pthread_mutex_lock</code>实现加锁，传入一个参数：互斥锁的地址</li>
<li><code>pthread_mutex_unlock</code>实现解锁，传入一个参数：互斥锁的地址</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;<span class="comment">//定义一个互斥锁</span></span><br><span class="line"><span class="built_in">pthread_mutex_init</span>(&amp;mutex, <span class="literal">NULL</span>);<span class="comment">//初始化互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;mutex);<span class="comment">//加锁</span></span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;mutex);<span class="comment">//解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="pthread_cond_t的简单使用">pthread_cond_t的简单使用</h4>
<ul>
<li><code>pthread_cond_t</code>定义一个条件变量</li>
<li><code>pthread_cond_init</code>初始化条件变量，传入两个参数：第一个参数是条件变量的地址，第二个参数是条件变量的属性，一般传入<code>NULL</code></li>
<li><code>pthread_cond_wait</code>实现线程的等待（阻塞），传入两个参数：第一个参数是条件变量的地址，第二个参数是互斥锁的地址
<ul>
<li>该函数执行后，获得信号（signal函数）之前，将一直被阻塞。</li>
<li>该函数会在<strong>被阻塞之前</strong>以原子方式<strong>释放相关的互斥锁</strong></li>
<li>并在<strong>被唤醒时</strong>以原子方式<strong>再次获取该互斥锁</strong></li>
<li>所以我们在下面的线程池中，虽然被阻塞的时候会被释放互斥锁，但是在被唤醒时会再次获取互斥锁，所以<strong>唤醒后需要进行解锁</strong>操作</li>
</ul></li>
<li><code>pthread_cond_signal</code>实现线程的唤醒，传入一个参数：条件变量的地址</li>
<li><code>pthread_cond_destroy</code>销毁条件变量，传入一个参数：条件变量的地址</li>
<li><code>pthread_cond_broadcast</code>唤醒所有等待在条件变量上的线程</li>
</ul>
<p><strong>线程A等待条件的伪代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pthread_mutex_lock</span>(&amp;mutex); <span class="comment">// 拿到互斥锁，进入临界区</span></span><br><span class="line"><span class="keyword">while</span>( **条件为假**)</span><br><span class="line"><span class="comment">//如果不满足条件 就让线程A进入休眠 释放互斥锁，当有信号触发时，该线程重新获得锁 并继续往下执行。</span></span><br><span class="line">	<span class="built_in">pthread_cond_wait</span>(cond, mutex); <span class="comment">// 令进程等待在条件变量上</span></span><br><span class="line">**修改条件**</span><br><span class="line"><span class="built_in">pthread_mutex_unlock</span>(&amp;mutex); <span class="comment">// 释放互斥锁</span></span><br></pre></td></tr></table></figure>
<p><strong>线程B通知线程A的伪代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pthread_mutex_lock</span>(&amp;mutex); <span class="comment">// 拿到互斥锁，进入临界区</span></span><br><span class="line">设置条件为真</span><br><span class="line"><span class="built_in">pthread_cond_signal</span>(cond); <span class="comment">// 通知等待在条件变量上的消费者</span></span><br><span class="line"><span class="built_in">pthread_mutex_unlock</span>(&amp;mutex); <span class="comment">// 释放互斥锁</span></span><br></pre></td></tr></table></figure>
<p>至于条件变量的实际应用将在后面线程池的实现中进行详细讲解</p>
<h2 id="三线程池的实现源码及解析c">三、线程池的实现源码及解析(C++)</h2>
<h3 id="明确目标剖析线程池需要实现的模块框架">1.
明确目标：剖析线程池需要实现的模块(框架)</h3>
<ul>
<li>工作队列：控制线程池中的线程状态</li>
<li>任务队列：线程中的任务函数（任务对应的执行函数）</li>
<li>线程池控制管理：两把锁（一把控制操作的<strong>互斥锁</strong>，一把用于新任务加入时唤醒线程的<strong>条件锁</strong>）</li>
<li>管理者线程：用于自动管理线程池中线程数量</li>
<li>pthread_create的回调函数：回调函数是每个线程创建之后就开始执行的函数，该函数作为<strong>pthread_create的第三个参数传入</strong>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pthread_create函数原型：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_create</span><span class="params">(<span class="keyword">pthread_t</span> *tidp,<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *attr,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">void</span> *(*start_rtn)(<span class="keyword">void</span>*),<span class="keyword">void</span> *arg)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>pthread_create</code>函数的陷阱：函数原型中第三个参数为函数指针，指向处理线程函数的地址，该函数要求为静态函数，所以如果回调函数(worker)是类成员函数时，需要将<strong>worker函数设置为静态成员函数</strong></p>
<p>第四个参数<code>this</code>指针的陷阱：静态成员函数中没有<code>this</code>指针，所以如果需要在静态成员函数中调用类的成员函数，需要<strong>将代表当前实例化类对象的<code>this</code>指针作为参数传入</strong></p>
<p><img src="/2024/02/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88C++%EF%BC%89/structure_threadPooling.png" width="80%" height="80%"></p>
<p>线程池中的<strong>生产者和消费者模型</strong>：</p>
<p><img src="/2024/02/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88C++%EF%BC%89/thread_poll_model.png" width="80%" height="80%"></p>
<p>线程池中关于线程创建、销毁等的操作：</p>
<ul>
<li><code>pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);</code>：创建线程
<ul>
<li>thread：指向线程标识符的指针</li>
<li>attr：指向线程属性的指针,一般为传递NULL作为默认属性</li>
<li>start_routine：线程运行函数的起始地址。线程函数的返回类型必须为void<em>，且接受一个void</em>类型的参数。</li>
<li>arg：传递给线程函数的参数，通过void*进行传递</li>
</ul></li>
<li><code>pthread_join(pthread_t thread, void **retval);</code>：等待线程结束
<ul>
<li>thread：线程标识符</li>
<li>retval：用户定义的指针，用来存储被等待线程的返回值</li>
</ul></li>
<li><code>pthread_exit(void *retval);</code>：终止线程
<ul>
<li>retval：线程的返回值</li>
</ul></li>
<li><code>pthread_detach(pthread_t thread);</code>：分离线程
<ul>
<li>thread：线程标识符</li>
<li>该函数的作用是将参数thread标识的线程的状态设置为分离状态，这样线程在终止时会自动释放所有资源，而不用在其他线程中对其进行回收</li>
</ul></li>
</ul>
<p>下面进行线程池的实现讲解，其中在Linux下编译运行使用<code>Makefile</code>自动化脚本进行编译</p>
<p>对<code>Makefile</code>基础使用的讲解可参考我的博客：<a href="https://akirazheng.github.io/2024/03/03/WebServer%E5%AD%A6%E4%B9%A02%EF%BC%9A%E4%BB%8EConfig%E6%96%87%E4%BB%B6%E4%BA%86%E8%A7%A3Makefile%E7%BC%96%E8%AF%91/#/1-int-main-int-argc-char-argv4">WebServer学习2：从Config文件了解Makefile编译</a></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CXX = g++</span><br><span class="line">TARGET = test</span><br><span class="line"><span class="comment"># 自动实现把当前目录下的所有.cpp文件转换成.o文件</span></span><br><span class="line">SRC = <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line"><span class="comment"># SRC += $(wildcard timer/*.cpp)# 添加timer文件夹里的文件</span></span><br><span class="line">OBJS = <span class="variable">$(<span class="built_in">patsubst</span> %.cpp, %.o, <span class="variable">$(SRC)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译选项 -c 表示编译链接分开进行 -Wall 表示显示所有警告信息</span></span><br><span class="line">CXXFLAGS = -c -Wall</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line">	<span class="variable">$(CXX)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化所有的.o文件的生成规则</span></span><br><span class="line"><span class="section">%.o: %.cpp</span></span><br><span class="line">	<span class="variable">$(CXX)</span> <span class="variable">$(CXXFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.o <span class="variable">$(TARGET)</span></span><br></pre></td></tr></table></figure>
<h3 id="线程池中任务队列类的实现">2. 线程池中任务队列类的实现</h3>
<h4 id="单任务结构体的设计">2.1 单任务结构体的设计</h4>
<p>首先设计一个单任务结构体，用于封装任务的回调（执行）函数指针和回调函数对应的参数</p>
<p>在C++中，函数指针的声明方式为：<code>返回类型(*函数指针名)(参数类型1, 参数类型2, ...);</code></p>
<ul>
<li>这里我们的线程池任务结构体中，函数指针类型声明：<code>void(*)(void*)</code>
<ul>
<li>void: 表示函数的返回类型为 void，即不返回任何值。</li>
<li>(*): 表示这是一个指针。</li>
<li>(void<em>): 表示指针所指向的函数将接受一个 void</em>
类型的参数。</li>
</ul></li>
</ul>
<p>采用<code>using</code>的方式创建函数指针类型别名，方便后续使用（这里我们将别名定位<code>callback</code>代表回调函数）</p>
<p>采用别名后使用函数的方式：<code>callback func = &amp;func_name;</code>，<code>func(*args)</code>实现函数的调用</p>
<ul>
<li>TaskQueue.h</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义任务队列中单个任务的结构体:</span></span><br><span class="line"><span class="comment">* 包含回调函数指针和回调函数所要传递的参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> callback = <span class="built_in"><span class="keyword">void</span></span>(*)(<span class="keyword">void</span>*);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Task</span>&#123;</span></span><br><span class="line">    callback function;<span class="comment">//回调函数指针</span></span><br><span class="line">    <span class="keyword">void</span> *arg;<span class="comment">//回调函数所要传递的参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认构造函数</span></span><br><span class="line">    <span class="built_in">Task</span>()&#123;</span><br><span class="line">        function = <span class="literal">nullptr</span>;</span><br><span class="line">        arg = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传参构造函数</span></span><br><span class="line">    <span class="built_in">Task</span>(callback f, <span class="keyword">void</span> *a)&#123;</span><br><span class="line">        function = f;</span><br><span class="line">        arg = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="任务队列类的设计">2.2 任务队列类的设计</h4>
<p>设计一个任务队列类，用于存储任务队列中的任务</p>
<p><strong>任务队列</strong>是一种需要<strong>先进先出</strong>的数据结构，C++中有标准库中的<code>queue</code>容器可以方便地实现队列的功能</p>
<p>其中任务队列对于线程池来说一般只有一个，所以我们需要在多线程消费者使用任务队列的时候，对共享的数据进行加锁保护</p>
<p>这里共享的数据就是TaskQueue类中的<code>queue</code>容器，所以我们需要对<code>queue</code>容器进行加锁保护，以保证多线程对<code>queue</code>容器的安全操作</p>
<ul>
<li>TaskQueue.h</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义任务队列类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskQueue</span>&#123;</span></span><br><span class="line"><span class="comment">//共有接口</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TaskQueue</span>();</span><br><span class="line">    ~<span class="built_in">TaskQueue</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者（主程序中的用户）添加新任务到队列</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addTask</span><span class="params">(Task &amp;task)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addTask</span><span class="params">(callback function, <span class="keyword">void</span> *arg)</span></span>;<span class="comment">//重载，不使用封装好的Task结构体</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者（线程池中的线程）从队列中取任务</span></span><br><span class="line">    <span class="function">Task <span class="title">takeTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取当前队列中的总等待任务数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getTaskCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_queue.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//私有变量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::queue&lt;Task&gt; m_queue;<span class="comment">//任务队列</span></span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> m_mutex;<span class="comment">//互斥锁保护共享数据（任务队列）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>TaskQueue.cpp</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">TaskQueue::<span class="built_in">TaskQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化互斥锁为NULL</span></span><br><span class="line">    <span class="built_in">pthread_mutex_init</span>(&amp;m_mutex, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TaskQueue::~<span class="built_in">TaskQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//销毁互斥锁</span></span><br><span class="line">    <span class="built_in">pthread_mutex_destroy</span>(&amp;m_mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TaskQueue::addTask</span><span class="params">(Task &amp;task)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//加锁</span></span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;m_mutex);</span><br><span class="line">    <span class="comment">//将生产者给的任务加入就绪队列中</span></span><br><span class="line">    m_queue.<span class="built_in">push</span>(task);</span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;m_mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TaskQueue::addTask</span><span class="params">(callback function, <span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;m_mutex);</span><br><span class="line">    <span class="comment">//封装成Task结构再传入队列中</span></span><br><span class="line">    m_queue.<span class="built_in">push</span>(<span class="built_in">Task</span>(function, arg));</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;m_mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Task <span class="title">TaskQueue::takeTask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//任务队列中不为空才可以返回任务</span></span><br><span class="line">    Task task;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;m_mutex);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">getTaskCount</span>() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        task = m_queue.<span class="built_in">front</span>();</span><br><span class="line">        m_queue.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;m_mutex);</span><br><span class="line">    <span class="keyword">return</span> task;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="对当前的任务队列类进行测试">2.3 对当前的任务队列类进行测试</h4>
<ul>
<li>test.cpp</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">taskFunc</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = *(<span class="keyword">int</span>*)arg;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;thread &quot;</span> &lt;&lt; <span class="built_in">pthread_self</span>() &lt;&lt; <span class="string">&quot; is working, num = &quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testTaskQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TaskQueue taskQ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> *num = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(i);</span><br><span class="line">        <span class="function">Task <span class="title">task</span><span class="params">(taskFunc, num)</span></span>;</span><br><span class="line">        taskQ.<span class="built_in">addTask</span>(task);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Task task = taskQ.<span class="built_in">takeTask</span>();</span><br><span class="line">        task.<span class="built_in">function</span>(task.arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">testTaskQueue</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<p><img src="/2024/02/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88C++%EF%BC%89/TaskQueueTest.png"></p>
<h3 id="线程池的实现">3. 线程池的实现</h3>
<p>首先需要设计线程池类的<code>.h</code>声明文件，具体包括</p>
<ul>
<li>线程池的基本参数(私有变量)
<ul>
<li><strong>唯一的任务队列对象</strong></li>
<li>线程池中的线程对象（工作线程和管理者线程）、以及关于线程安全的<strong>共享互斥锁和条件变量</strong></li>
<li>线程池中的参数：线程池的大小、线程池中<strong>忙线程</strong>与<strong>存活线程</strong>的数量、管理者<strong>每次控制线程销毁/创建</strong>的数量、线程池是否关闭</li>
</ul></li>
<li>线程池的私有接口
<ul>
<li>静态函数：包括所有<strong>工作线程的回调函数worker</strong>、唯一<strong>管理者线程的回调函数manager</strong></li>
<li>成员函数:<strong>线程销毁</strong></li>
</ul></li>
<li>线程池的公有接口
<ul>
<li>类构造函数和析构函数</li>
<li>功能函数：添加任务、获取忙线程数、获取存活线程数</li>
</ul></li>
<li>ThreadPool.h</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span><span class="comment">//memset</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span><span class="comment">//sleep</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ThreadPool</span>(<span class="keyword">int</span> min, <span class="keyword">int</span> max);</span><br><span class="line">    ~<span class="built_in">ThreadPool</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池提供共用接口</span></span><br><span class="line">    <span class="comment">//1. 添加任务</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addTask</span><span class="params">(Task task)</span></span>;</span><br><span class="line">    <span class="comment">//2. 获取线程池中忙线程数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getBusyNum</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//3. 获取线程池中存活线程数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAliveNum</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//工作线程函数：从任务队列中取任务（回调函数）并执行</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">worker</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line">    <span class="comment">//管理者线程函数：管理线程数量</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">manger</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line">    <span class="comment">//销毁线程函数：销毁线程</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">threadExit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> m_mutex;<span class="comment">//互斥锁</span></span><br><span class="line">    <span class="keyword">pthread_cond_t</span> m_cond;<span class="comment">//条件变量锁</span></span><br><span class="line">    <span class="keyword">pthread_t</span> *m_threadIds;<span class="comment">//线程池数组：如果线程是存活的，那么数组中对应的位置就是对应线程的ID，否则应为0</span></span><br><span class="line">    <span class="keyword">pthread_t</span> m_mangerID;<span class="comment">//管理者线程ID</span></span><br><span class="line">    TaskQueue *m_taskQ;<span class="comment">//任务队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程池参数设置：</span></span><br><span class="line">    <span class="comment">//线程池中线程数量、任务队列大小、管理者可控制的最大和最少线程数、线程池是否销毁、线程池中忙线程数以及存活线程数</span></span><br><span class="line">    <span class="keyword">int</span> m_minThreads;</span><br><span class="line">    <span class="keyword">int</span> m_maxThreads;</span><br><span class="line">    <span class="keyword">int</span> m_busyThreads;<span class="comment">//在工作线程中更新的</span></span><br><span class="line">    <span class="keyword">int</span> m_aliveThreads;<span class="comment">//在管理者线程中更新的</span></span><br><span class="line">    <span class="keyword">int</span> m_exitThreads;<span class="comment">//管理者通知需要销毁的线程数</span></span><br><span class="line">    <span class="keyword">bool</span> m_shutDown;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MangerCtlThreadNum = <span class="number">2</span>;<span class="comment">//管理者线程每次销毁或创建的线程数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="线程池的构造函数和析构函数">3.1 线程池的构造函数和析构函数</h4>
<ul>
<li><p>构造函数负责初始化线程池<code>.h</code>中的基础参数，包括任务队列、锁、创建线程等</p></li>
<li><p>析构函数对应地<code>delete</code>线程池中的资源、并销毁线程（设置<code>m_shutDown</code>参数为1，使线程启动自杀销毁）</p></li>
<li><p>ThreadPool.cpp</p></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ThreadPool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">ThreadPool::<span class="built_in">ThreadPool</span>(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="comment">/*初始化&amp;实例化线程池参数*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化当前线程池的唯一任务队列</span></span><br><span class="line">        m_taskQ = <span class="keyword">new</span> TaskQueue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化线程池中的线程管理参数</span></span><br><span class="line">        m_minThreads = min;</span><br><span class="line">        m_maxThreads = max;</span><br><span class="line">        m_busyThreads = <span class="number">0</span>;</span><br><span class="line">        m_aliveThreads = m_minThreads;</span><br><span class="line">        m_shutDown = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化线程池中的线程数组:按照最大线程数创建数组（只是创建数组，并不创建线程）</span></span><br><span class="line">        m_threadIds = <span class="keyword">new</span> <span class="keyword">pthread_t</span>[m_maxThreads];</span><br><span class="line">        <span class="keyword">if</span>(m_threadIds == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="comment">//创建线程数组失败</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;new pthread_t[] failed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//创建失败，直接跳出并销毁资源</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(m_threadIds, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">pthread_t</span>)*m_maxThreads);<span class="comment">//数组内的线程ID初始化为0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化互斥锁和条件变量</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pthread_mutex_init</span>(&amp;m_mutex, <span class="literal">NULL</span>) != <span class="number">0</span> ||</span><br><span class="line">        <span class="built_in">pthread_cond_init</span>(&amp;m_cond, <span class="literal">NULL</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//初始化失败</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;init mutex or cond failed&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//初始化失败，直接跳出并销毁资源</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程池中的线程：只创建最小线程数m_minThreads个alive线程</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_minThreads; i++)&#123;</span><br><span class="line">            <span class="comment">//线程的回调函数为worker，参数为当前线程池对象</span></span><br><span class="line">            <span class="comment">//由于回调函数是静态函数，所以如果回调函数想取任务队列中的任务，必须将当前线程池对象传入才能访问任务队列</span></span><br><span class="line">            <span class="built_in">pthread_create</span>(&amp;m_threadIds[i], <span class="literal">NULL</span>, worker, <span class="keyword">this</span>);</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;create thread ID: &quot;</span> &lt;&lt; m_threadIds[i] &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建管理者线程：1个</span></span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;m_mangerID, <span class="literal">NULL</span>, manger, <span class="keyword">this</span>);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;create manger thread ID: &quot;</span> &lt;&lt; m_mangerID &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化失败，释放资源</span></span><br><span class="line">    <span class="keyword">if</span>(m_taskQ) <span class="keyword">delete</span> m_taskQ;</span><br><span class="line">    <span class="keyword">if</span>(m_threadIds) <span class="keyword">delete</span>[] m_threadIds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadPool::~<span class="built_in">ThreadPool</span>()</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关掉线程池工作</span></span><br><span class="line">    m_shutDown = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁管理者线程</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;manger thread ID: &quot;</span> &lt;&lt; m_mangerID &lt;&lt; <span class="string">&quot; is exiting&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">pthread_join</span>(m_mangerID, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//唤醒被阻塞的线程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_aliveThreads; i++)&#123;</span><br><span class="line">        <span class="built_in">pthread_cond_signal</span>(&amp;m_cond);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放new的堆内存</span></span><br><span class="line">    <span class="comment">// if(m_taskQ) delete m_taskQ;</span></span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; &quot;delete m_taskQ&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="comment">// if(m_threadIds) delete[] m_threadIds;</span></span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; &quot;delete m_threadIds&quot; &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁互斥锁和条件变量</span></span><br><span class="line">    <span class="built_in">pthread_mutex_destroy</span>(&amp;m_mutex);</span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; &quot;destroy m_mutex&quot; &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="built_in">pthread_cond_destroy</span>(&amp;m_cond);</span><br><span class="line">    <span class="comment">// std::cout &lt;&lt; &quot;destroy m_cond&quot; &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线程池的添加任务以及获取忙线程数和存活线程数">3.2
线程池的添加任务以及获取忙线程数和存活线程数</h4>
<p>注意这三个函数中涉及的关键参数都是pool中多线程的<strong>共享数据</strong>，所以记得进行<strong>加锁保护</strong></p>
<p>记得在添加任务后需要<strong>唤醒线程</strong>，让线程去取任务</p>
<ul>
<li>ThreadPool.cpp</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ThreadPool::addTask</span><span class="params">(Task task)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_shutDown)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//任务加入队列中</span></span><br><span class="line">    m_taskQ-&gt;<span class="built_in">addTask</span>(task);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//唤醒线程，让线程去取任务</span></span><br><span class="line">    <span class="built_in">pthread_cond_signal</span>(&amp;m_cond);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ThreadPool::getBusyNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> busyNum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;m_mutex);</span><br><span class="line">    busyNum = m_busyThreads;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;m_mutex);</span><br><span class="line">    <span class="keyword">return</span> busyNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ThreadPool::getAliveNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> aliveNum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;m_mutex);</span><br><span class="line">    aliveNum = m_aliveThreads;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;m_mutex);</span><br><span class="line">    <span class="keyword">return</span> aliveNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线程池中线程自我销毁的实现">3.3 线程池中线程自我销毁的实现</h4>
<p>线程自我销毁函数<code>threadExit</code>，是在某个具体工作线程<code>worker</code>中被调用的。</p>
<ul>
<li><p>当<code>threadExit</code>函数被调用时<strong>获取当前worker线程的ID</strong></p></li>
<li><p>然后<strong><em>找到线程池数组中对应的位置</em>置为0</strong>，表示线程处于被销毁（不存活）状态</p></li>
<li><p>最后再调用<code>pthread_exit(NULL)</code>函数实现<strong>执行当前程序的线程的自杀销毁</strong></p></li>
<li><p>ThreadPool.cpp</p></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程自杀</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ThreadPool::threadExit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前线程ID</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid = <span class="built_in">pthread_self</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从线程池数组中找到当前线程的ID，将其置为0，表示线程处于被销毁（不存活）状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_maxThreads; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_threadIds[i] == tid)&#123;</span><br><span class="line">            m_threadIds[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程退出</span></span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线程池的工作线程">3.4 线程池的工作线程</h4>
<p>线程池中所有工作线程的工作机制都是一样的，所以我们直接将工作线程的回调函数同一为<code>worker</code>，并在<code>worker</code>中实现工作线程的工作机制：</p>
<ul>
<li><code>worker</code>接受的参数是当前线程池对象，因为<code>worker</code>本身是静态函数，又需要访问线程池类中的共享参数，所以需要将线程池对象传入</li>
<li>当当前线程中，判断出任务队列中没有任务时，就会<strong>阻塞等待</strong>，直到有新任务加入队列，就会被唤醒
<ul>
<li>其中阻塞的时候会<strong>释放互斥锁</strong>，唤醒后会<strong>再次获取互斥锁</strong>，所以唤醒后记得需要进行<strong>解锁操作</strong></li>
</ul></li>
<li>一般有两种情况会唤醒线程：1. 有新任务加入队列 2.
线程池销毁，需要唤醒线程自杀（包括管理者控制）
<ul>
<li>当出现第1种情况时，<code>worker</code>被唤醒后会<strong>获取任务</strong>并<strong>执行任务</strong>，然后再次<strong>阻塞等待</strong></li>
<li>当出现第2种情况时，<code>worker</code>被唤醒后会<strong>判断标志销毁线程的参数是否被设置了</strong>，如果是就会<strong>自杀销毁</strong>（通过<code>threadExit</code>函数自杀）</li>
</ul></li>
<li>ThreadPool.cpp</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有工作线程的工作模式都一致</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">ThreadPool::worker</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ThreadPool* pool = <span class="keyword">static_cast</span>&lt;ThreadPool*&gt;(arg);<span class="comment">//传进来的是一个this指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//工作队列的循环：空队列时阻塞线程，非空队列时执行任务</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*1. 任务队列为空且线程池没被关闭：阻塞工作线程*/</span></span><br><span class="line">        <span class="keyword">while</span>(pool-&gt;m_taskQ-&gt;<span class="built_in">getTaskCount</span>() == <span class="number">0</span> &amp;&amp; !pool-&gt;m_shutDown)&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;thread &quot;</span> &lt;&lt; <span class="built_in">pthread_self</span>() &lt;&lt; <span class="string">&quot; is waiting&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            <span class="built_in">pthread_cond_wait</span>(&amp;pool-&gt;m_cond, &amp;pool-&gt;m_mutex);<span class="comment">//阻塞的时候当前线程的锁会被释放，等待被唤醒后会重新获得锁</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//解除阻塞后，判断是否销毁当前线程（由管理者线程控制的，因为如果是管理者唤醒线程而不是Task唤醒的话，说明管理者选中销毁当前空闲线程）</span></span><br><span class="line">            <span class="keyword">if</span>(pool-&gt;m_exitThreads &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//管理者选中销毁当前线程，会通知需要销毁m_exitThreads个线程</span></span><br><span class="line">                pool-&gt;m_exitThreads--;<span class="comment">//需要销毁的线程数减一</span></span><br><span class="line">                <span class="keyword">if</span>(pool-&gt;m_aliveThreads &gt; pool-&gt;m_minThreads)&#123;</span><br><span class="line">                    <span class="comment">//自杀</span></span><br><span class="line">                    pool-&gt;m_aliveThreads--;<span class="comment">//存活线程数减一</span></span><br><span class="line">                    std::cout &lt;&lt; <span class="string">&quot;manger kills thread ID: &quot;</span> &lt;&lt; <span class="built_in">pthread_self</span>() &lt;&lt; std::endl;</span><br><span class="line">                    <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_mutex);<span class="comment">//线程被唤醒重新获得阻塞前的锁，所以需要先解锁再销毁</span></span><br><span class="line">                    pool-&gt;<span class="built_in">threadExit</span>();<span class="comment">//销毁当前线程</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*2. 任务队列不为空：运行到当前位置的某个工作线程作为被选中的线程执行任务*/</span></span><br><span class="line">        <span class="comment">//这里是析构函数执行时，将m_shutDown设为true后唤醒线程，所有线程池的线程都会执行到这里实现自杀销毁</span></span><br><span class="line">        <span class="keyword">if</span>(pool-&gt;m_shutDown)&#123;</span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line">            pool-&gt;<span class="built_in">threadExit</span>();<span class="comment">//销毁当前线程</span></span><br><span class="line">            <span class="comment">//当线程调用 pthread_cond_wait 函数时，它会将自身置于条件变量的等待队列中，并释放之前持有的互斥锁。</span></span><br><span class="line">            <span class="comment">//当满足某个条件时，其他线程可以通过 pthread_cond_signal 或 pthread_cond_broadcast 函数唤醒等待的线程。</span></span><br><span class="line">            <span class="comment">// 一旦线程被唤醒，它会重新获得之前释放的互斥锁，并继续执行后续的操</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程还活着，取&amp;分配任务</span></span><br><span class="line">        Task task = pool-&gt;m_taskQ-&gt;<span class="built_in">takeTask</span>();</span><br><span class="line">        <span class="comment">//忙线程加一</span></span><br><span class="line">        pool-&gt;m_busyThreads++;</span><br><span class="line">        <span class="comment">//线程池解锁</span></span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行Task：每个Task都是独立的，所以对task的操作不需要加锁</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;thread &quot;</span> &lt;&lt; <span class="built_in">pthread_self</span>() &lt;&lt; <span class="string">&quot; is working&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        task.<span class="built_in">function</span>(task.arg);<span class="comment">//回调函数执行任务</span></span><br><span class="line">        <span class="comment">//任务执行完毕</span></span><br><span class="line">        <span class="keyword">delete</span> task.arg;<span class="comment">//释放任务参数内存</span></span><br><span class="line">        task.arg = <span class="literal">nullptr</span>;<span class="comment">//指针置空</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//任务处理结束，更新线程池参数：线程池里的共享数据需要加锁</span></span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;thread &quot;</span> &lt;&lt; <span class="built_in">pthread_self</span>() &lt;&lt; <span class="string">&quot; is idle&quot;</span> &lt;&lt; std::endl;<span class="comment">//需要放在锁中，否则会出现多个线程同时打印，导致乱序输出</span></span><br><span class="line">        pool-&gt;m_busyThreads--;</span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线程池的管理者线程">3.5 线程池的管理者线程</h4>
<p>管理者线程的工作机制是：<strong>根据线程池中的忙线程数和存活线程数，动态地管理线程池中的线程数量</strong>，manger只要在保证线程数不小于最小值，也不大于最大值的范围内，动态地控制线程数量就行</p>
<p>一个pool中<strong>只需要有唯一的一个管理者线程</strong>，管理者线程的回调函数设为<code>manger</code>，并在<code>manger</code>中实现管理者线程的工作机制：</p>
<ul>
<li><code>manger</code>接受的参数同样是当前线程池对象，因为<code>manger</code>本身是静态函数，所以需要将线程池对象传入</li>
<li>管理者线程根据一定的间隔时间<code>t</code>（代码中设为3s）来轮询线程池的线程情况（每3s判断一次是否进行<strong>新增/销毁线程</strong>）</li>
<li><strong>扩增线程</strong>：当任务数过多，线程池中的<strong>alive线程</strong>较小<strong>不够用</strong>时，创建线程
<ul>
<li>创建线程的条件：任务数task &gt;
存活线程数(表示线程池不够用，需要扩大线程池），且存活线程数 &lt;
最大线程数(表示线程池还能扩大)</li>
<li>管理者线程每次创建线程数量为2（本代码中）</li>
<li>创建线程直接从<strong>线程池数组</strong>中找到一个<strong>空闲的位置</strong>（值为0），直接调用<code>pthread_create</code>创建线程，并更新存活线程数</li>
</ul></li>
<li><strong>销毁线程</strong>：当线程池中<strong>忙的线程数过小</strong>（线程池过于清闲了），且存活线程数大于最小线程数时（说明还没到最小线程数），销毁线程
<ul>
<li>销毁线程的条件：忙线程数*2 &lt;
存活线程数(表示线程池冗余过大)，且存活线程数 &gt;
最小线程数(表示线程池还能缩小)</li>
<li>管理者线程每次销毁线程数量为2（本代码中），需要共享数据<code>m_exitThreads</code>来通知工作线程销毁线程</li>
<li>销毁的方式是再管理者线程中唤醒空闲的线程，此时空闲线程的<code>worker</code>会发现<code>m_exitThreads</code>不为0，就会自杀销毁（也就是上述唤醒<code>worker</code>线程的<strong>第2种情况</strong>）</li>
</ul></li>
<li>ThreadPool.cpp</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//管理者线程：动态管理线程数量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">ThreadPool::manger</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ThreadPool* pool = <span class="keyword">static_cast</span>&lt;ThreadPool*&gt;(arg);</span><br><span class="line">    <span class="keyword">while</span>(!pool-&gt;m_shutDown)&#123;</span><br><span class="line">        <span class="comment">//管理者线程每次管理的时间间隔</span></span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出线程池中的相关共享参数，需要加锁</span></span><br><span class="line">        <span class="built_in">pthread_mutex_lock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line">        <span class="keyword">int</span> taskSize = pool-&gt;m_taskQ-&gt;<span class="built_in">getTaskCount</span>();<span class="comment">//获取任务队列中的任务数</span></span><br><span class="line">        <span class="keyword">int</span> aliveNum = pool-&gt;m_aliveThreads;<span class="comment">//获取存活线程数(包含阻塞中和工作中的)：创建线程需要</span></span><br><span class="line">        <span class="keyword">int</span> busyNum = pool-&gt;m_busyThreads;<span class="comment">//获取忙线程数(工作中的线程)：销毁线程需要</span></span><br><span class="line">        <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 当任务数过多，线程池中的alive线程较小不够用时，创建线程</span></span><br><span class="line">        <span class="comment">//创建线程的条件：任务数task &gt; 存活线程数(表示线程池不够用，需要扩大线程池），且存活线程数 &lt; 最大线程数(表示线程池还能扩大)</span></span><br><span class="line">        <span class="keyword">if</span>(taskSize &gt; aliveNum &amp;&amp; aliveNum &lt; pool-&gt;m_maxThreads)&#123;</span><br><span class="line">            <span class="comment">// 由于销毁创建线程需要对pool里的线程数组进行操作，所以需要加锁</span></span><br><span class="line">            <span class="built_in">pthread_mutex_lock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//记录本次已扩充的线程数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pool-&gt;m_maxThreads &amp;&amp; count &lt; MangerCtlThreadNum; i++)&#123;<span class="comment">//最多每次只允许扩充MangerCtlThreadNum个线程</span></span><br><span class="line">                <span class="comment">//开始创建线程</span></span><br><span class="line">                <span class="keyword">if</span>(pool-&gt;m_threadIds[i] == <span class="number">0</span>)&#123;<span class="comment">//说明当前数组中的线程还没有被创建（没有存活）</span></span><br><span class="line">                    <span class="built_in">pthread_create</span>(&amp;pool-&gt;m_threadIds[i], <span class="literal">NULL</span>, worker, pool);<span class="comment">//在i处创建线程</span></span><br><span class="line">                    std::cout &lt;&lt; <span class="string">&quot;manger creates thread ID: &quot;</span> &lt;&lt; pool-&gt;m_threadIds[i] &lt;&lt; std::endl;</span><br><span class="line">                    count++;<span class="comment">//创建成功，计数器加一</span></span><br><span class="line">                    pool-&gt;m_aliveThreads++;<span class="comment">//存活线程数加一</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 当线程池中忙的线程数过小（线程池冗余过大了），且存活线程数大于最小线程数时（说明还没到最小线程数），销毁线程</span></span><br><span class="line">        <span class="comment">//销毁线程的条件：忙线程数*2 &lt; 存活线程数(表示线程池冗余过大)，且存活线程数 &gt; 最小线程数(表示线程池还能缩小)</span></span><br><span class="line">        <span class="keyword">if</span>(busyNum*<span class="number">2</span> &lt; aliveNum &amp;&amp; aliveNum &gt; pool-&gt;m_minThreads)&#123;</span><br><span class="line">            <span class="comment">// 由于销毁创建线程需要对pool里的线程数组进行操作，所以需要加锁</span></span><br><span class="line">            <span class="built_in">pthread_mutex_lock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line">            pool-&gt;m_exitThreads = MangerCtlThreadNum;<span class="comment">//告知pool对象要销毁多少个线程</span></span><br><span class="line">            <span class="built_in">pthread_mutex_unlock</span>(&amp;pool-&gt;m_mutex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//唤醒空闲被阻塞的MangerCtlThreadNum个线程，让这些线程自杀（也就是唤醒线程后让线程worker进入自杀状态）</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MangerCtlThreadNum; i++)&#123;</span><br><span class="line">                <span class="built_in">pthread_cond_signal</span>(&amp;pool-&gt;m_cond);<span class="comment">//唤醒线程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pool-&gt;threadExit();//销毁管理者线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线程池的测试">4. 线程池的测试</h3>
<p>通过创建<code>10</code>个Task的任务队列来测试线程池的工作情况（重点关注管理者的工作模式）</p>
<p>其中对于<code>10</code>个Task的任务，在每次执行Task任务后都会sleep
<code>2s</code>，所以如果在单线程模式下最少需要<code>20s</code>才能执行完毕</p>
<p>因此我们将<code>main</code>中创建完线程后的sleep时间也设为<code>20s</code>，主要是为了观察采用线程池后的工作效率，同时也能保证<code>main</code>函数不会提前结束，导致线程池资源被提前销毁</p>
<p>根据测试结果我们是可以看到采用线程池后，很快就会执行完所有Task，然后等待一段时间（等到<code>main</code>中的20s延迟完后）整个程序才会结束，线程池的资源才会被销毁，说明<strong>通过线程池确实会节省时间，提高效率</strong></p>
<ul>
<li>test.cpp</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TaskQueue.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ThreadPool.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程池中线程的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">taskFunc</span><span class="params">(<span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = *(<span class="keyword">int</span>*)arg;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;thread &quot;</span> &lt;&lt; <span class="built_in">pthread_self</span>() &lt;&lt; <span class="string">&quot; is working, num = &quot;</span> &lt;&lt; num &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试任务队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testTaskQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TaskQueue taskQ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> *num = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(i);</span><br><span class="line">        <span class="function">Task <span class="title">task</span><span class="params">(taskFunc, num)</span></span>;</span><br><span class="line">        taskQ.<span class="built_in">addTask</span>(task);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Task task = taskQ.<span class="built_in">takeTask</span>();</span><br><span class="line">        task.<span class="built_in">function</span>(task.arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试线程池</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testThreadPool</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    <span class="function">ThreadPool <span class="title">pool</span><span class="params">(<span class="number">3</span>, <span class="number">12</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往线程池中添加100个任务，观察线程池的动态增长（管理者模式的工作）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        pool.<span class="built_in">addTask</span>(<span class="built_in">Task</span>(taskFunc, <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(i)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">20</span>);<span class="comment">//睡眠40秒,防止主线程结束后线程池执行销毁，尚未完成任务（等待线程池处理完Task）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// testTaskQueue();//测试任务队列</span></span><br><span class="line">    <span class="built_in">testThreadPool</span>();<span class="comment">//测试线程池</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译运行：</p>
<p><img src="/2024/02/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88C++%EF%BC%89/make_threadPool.png"></p>
<p>测试结果：</p>
<p><img src="/2024/02/07/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%88C++%EF%BC%89/run_threadPool.png"></p>
<h3 id="本文线程池代码仓库">5. 本文线程池代码仓库</h3>
<ul>
<li><a href="https://github.com/AkiraZheng/MyWebServer/tree/Demos_of_Webserver">C++线程池ThreadPool</a></li>
</ul>
<h2 id="四阻塞队列的实现">四、阻塞队列的实现</h2>
<p>以<strong>异步日志</strong>的实现为例，阻塞队列中，各个线程<strong>生产者</strong>负责往阻塞队列中<code>push</code>日志消息，<strong>消费者</strong>线程负责从阻塞队列中<code>pop</code>日志消息并写入日志文件</p>
<p><strong>异步日志</strong>中的<strong>消费者</strong>为<strong>日志线程</strong>，因此<strong>日志线程</strong>的<code>worker</code>函数中需要不断地从阻塞队列中取出日志消息并写入日志文件。也就是<code>worker</code>函数作为<strong>消费者</strong><code>pop</code>队列中的数据时，遇到队列为空时需要通过<strong>条件变量阻塞等待</strong>，直到<strong>生产者</strong>线程往队列中<code>push</code>数据后唤醒<strong>日志线程</strong>，继续<code>pop</code>队列中的数据写进日志文件缓冲区中。</p>
<p>具体以<strong>异步日志</strong>为例的<strong>阻塞队列</strong>的实现细节参考本人的另一篇关于WebServer的博客：<a href></a></p>
<h2 id="五线程池work-stealing优化">五、线程池work stealing优化</h2>
<h2 id="未完待续..."><strong>未完待续...</strong></h2>
<h2 id="六reference">六、Reference</h2>
<ul>
<li><a href="https://blog.csdn.net/ACMer_L/article/details/107578636">C/C++手撕线程池（线程池的封装和实现）</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/367309864">基于C++11实现线程池</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/444375447">当我谈线程池时我谈些什么——线程池学习笔记</a></li>
</ul>
]]></content>
      <categories>
        <category>WebServer项目（C++）</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式5：模板方法</title>
    <url>/2024/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5%EF%BC%9A%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p><a href="https://github.com/AkiraZheng/designPattern/tree/master/designPattern">本文中所有设计模式Github代码</a>
其中本文<strong>模板方法</strong>相关代码在<code>TemplateMethodPattern.h</code>文件中</p>
</blockquote>
<h2 id="一模板方法基础">一、模板方法基础</h2>
<h3 id="模板方法的提出">1. 模板方法的提出</h3>
<blockquote>
<p>对于某项具体任务，模板方法模式常常拥有<strong>稳定的整体操作结构</strong>，但各个<strong>子步骤</strong>的具体实现可能<strong>各不相同</strong>（改变的）。那么如何在稳定的操作结构前提下，灵活<strong>应变各个子步骤的变化</strong>或者晚期实现需求？</p>
</blockquote>
<h3 id="模板方法的设计思想代码实现c">2.
模板方法的设计思想&amp;&amp;代码实现（C++）</h3>
<p>已知在程序开发中，框架开发人员（程序库开发人员）常常会提供一些<strong>稳定的操作结构和方法</strong>，而一些可变的具体的操作步骤则由<strong>应用开发人员</strong>来实现。这种情况下，框架开发人员可以使用<strong>模板方法模式</strong>来实现</p>
<h4 id="模板方法使用场景示例">2.1 模板方法使用场景示例</h4>
<p>假设我们需要设定一系列<strong>步骤step1~step5</strong>来实现某项功能，其中<strong>step1、step3、step5</strong>的实现是<strong>稳定的</strong>，可以在<strong>程序库lib开发</strong>中实现</p>
<p>但是<strong>step2和step4</strong>的实现是<strong>不稳定</strong>的，需要在<strong>应用开发</strong>中实现</p>
<p>而<strong>整体的step1~step5</strong>的步骤顺序和使用框架是<strong>稳定</strong>的</p>
<p><img src="/2024/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5%EF%BC%9A%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/step.png"></p>
<h4 id="未使用模板方法的代码实现思路">2.2
未使用模板方法的代码实现思路</h4>
<p>当我们没有采用模板方法模式时，我们会在<strong>程序库lib开发</strong>中提供<strong>step1、step3、step5</strong>的<strong>稳定</strong>实现，然后在<strong>应用开发</strong>中提供<strong>step2和step4</strong>的<strong>不稳定</strong>实现。最后在main程序中实现<strong>step1~step5</strong>的调用来实现具体功能</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程序库开发人员</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">step1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Library::step1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">step3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Library::step3()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">step5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Library::step5()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 应用程序开发人员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">step2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Application::step2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">step4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Application::step4()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Library lib;</span><br><span class="line">    Application app;</span><br><span class="line"></span><br><span class="line">    lib.<span class="built_in">step1</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(app.<span class="built_in">step2</span>())&#123;<span class="comment">//step2的实现是不稳定的</span></span><br><span class="line">        lib.<span class="built_in">step3</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">        app.<span class="built_in">step4</span>();<span class="comment">//step4的实现是不稳定的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lib.<span class="built_in">step5</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法属于<strong>早绑定</strong>的实现方式，在<strong>结构化</strong>的设计思维，也就是<strong>晚实现的应用程序人员开发程序</strong>去调用<strong>更早实现的lib库</strong></p>
<p><img src="/2024/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5%EF%BC%9A%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/early_bind.png"></p>
<p>这种实现方法是有缺点的：对于稳定的<strong>step1~step5</strong>的调用是<strong>分散</strong>的，<strong>不利于维护</strong></p>
<h4 id="使用模板方法的代码实现思路">2.3 使用模板方法的代码实现思路</h4>
<p>解决上述问题的方法思路是：</p>
<p>将<strong>稳定的</strong>main函数中的<strong>整体步骤实现</strong>也放在稳定的程序库lib中，然后在应用开发中实现不稳定的步骤</p>
<p>由于lib库中也需要用到app的实现，因此我们可以将两个不稳定的函数<strong>作为lib库的虚函数</strong>，交由<strong>应用程序开发人员继承实现</strong></p>
<p>这样在main中直接创建一个lib库的多态指针，然后调用lib的<strong>整体实现步骤框架函数</strong>就可以</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程序库开发人员</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">step1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Library::step1()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">step3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Library::step3()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">step5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Library::step5()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">step1</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">step2</span>())&#123;<span class="comment">//支持变化 ==&gt; 虚函数的多态调用</span></span><br><span class="line">            <span class="built_in">step3</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="built_in">step4</span>();<span class="comment">//支持变化 ==&gt; 虚函数的多态调用</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">step5</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">step2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">step4</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Library</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 应用程序开发人员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>:</span><span class="keyword">public</span> Library</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">step2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Application::step2()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">step4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Application::step4()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Library* plib = <span class="keyword">new</span> <span class="built_in">Application</span>();</span><br><span class="line">    plib-&gt;<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">delete</span> plib;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法属于<strong>晚绑定</strong>的实现方式，是<strong>面向对象开发</strong>的设计思维，也就是<strong>早实现的lib库</strong>通过开发稳定的算法骨架（Run函数），并将一些步骤延迟（延迟也就是虚函数）到<strong>晚实现的应用程序开发人员</strong>去实现</p>
<p><img src="/2024/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5%EF%BC%9A%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/late_bind.png"></p>
<h2 id="二总结">二、总结</h2>
<ul>
<li><p>在面向对象的设计中，我们要将<strong>稳定的代码</strong>写成<strong>非虚函数</strong>，将<strong>不稳定</strong>的代码写成<strong>虚函数</strong>，这样可以实现<strong>稳定代码的复用</strong>，<strong>不稳定代码的延迟实现</strong></p></li>
<li><p>设计模式的假设是必须有一个稳定点，那么当所有代码都是不稳定的时候，就不适合使用设计模式了</p></li>
<li><p><strong>设计模式</strong>最大的特点是在<strong>变化和稳定</strong>中间寻找隔离点，将变化的部分通过虚函数隔离出来，使得稳定的部分不受影响</p></li>
<li><p>虚函数是面向对象里面最核心的晚绑定实现技术</p></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式6：策略模式</title>
    <url>/2024/02/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6%EF%BC%9A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p><a href="https://github.com/AkiraZheng/designPattern/tree/master/designPattern">本文中所有设计模式Github代码</a>
其中本文<strong>策略模式</strong>相关代码在<code>StrategyPattern.h</code>文件中</p>
</blockquote>
<h2 id="一策略模式基础">一、策略模式基础</h2>
<h3 id="策略模式的提出">1. 策略模式的提出</h3>
<blockquote>
<p>在代码构建过程中，某些<strong>对象的算法可能有多种实现</strong>（例如不同的排序算法、查找算法等），我们可以根据环境或者条件的不同选择不同的算法来完成任务。
如果<strong>将这些算法都封装到对象中</strong>，将会使对象变得很复杂，有时候支持不需要的算法也是一种<strong>负担</strong>。
那么如何<strong>在运行时根据环境或者条件的不同选择不同的算法</strong>来完成任务？</p>
</blockquote>
<h3 id="策略模式的设计思想代码实现c">2.
策略模式的设计思想&amp;&amp;代码实现（C++）</h3>
<h4 id="策略模式使用场景示例">2.1 策略模式使用场景示例</h4>
<p>假设我们需要实现一个<strong>不同国家的税率计算算法</strong>，我们需要面对不同国家具有不同税率的问题</p>
<h4 id="未使用策略模式的代码实现思路">2.2
未使用策略模式的代码实现思路</h4>
<p>当我们没有采用策略模式时，我们会在<strong>一个类</strong>中提供<strong>不同国家的税率计算算法</strong>，然后在main程序中实现<strong>不同国家的税率计算算法</strong>的调用来实现具体功能</p>
<p>在这种情况下，我们可能会想到通过枚举方法来代表不同的国家，然后在类中通过if-else语句来判断不同国家的税率计算算法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 未使用策略模式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TexType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    CN_TAX,</span><br><span class="line">    US_TAX,</span><br><span class="line">    JP_TAX</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesOrder</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TexType type;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">CalculateTax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == CN_TAX)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == US_TAX)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == JP_TAX)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>但是很多情况下，业务需求变化是很快的，我们可能随时需要增加对新国家的税率计算算法，这样的话，我们就需要修改<code>SalesOrder</code>类，也要改变枚举值，这样的话，我们就违反了<strong>开闭原则</strong>，所以我们需要使用策略模式来解决这个问题</p>
<p>策略模式通常还需要结合<strong>工厂模式</strong>来使用，这样可以更好的解耦</p>
<h4 id="使用策略模式的代码实现思路">2.3 使用策略模式的代码实现思路</h4>
<p>当我们采用策略模式时，我们会在<strong>一个类</strong>中提供一个<strong>抽象的策略类</strong>，然后在<strong>不同国家的税率计算算法</strong>中继承这个抽象的策略类，然后在main程序中实现<strong>不同国家的税率计算算法</strong>的调用来实现具体功能</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用策略模式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxStrategy</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calculate</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//将税率计算算法抽象为一个虚函数</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">TaxStrategy</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNTax</span> :</span> <span class="keyword">public</span> TaxStrategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">USTax</span> :</span> <span class="keyword">public</span> TaxStrategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JPTax</span> :</span> <span class="keyword">public</span> TaxStrategy</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesOrder</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TaxStrategy* strategy;<span class="comment">//提供一个抽象的策略类的多态指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SalesOrder</span>(TaxStrategy* strategy)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">CalculateTax</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy-&gt;<span class="built_in">Calculate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">SalesOrder</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SalesOrder* order = <span class="keyword">new</span> <span class="built_in">SalesOrder</span>(<span class="keyword">new</span> <span class="built_in">CNTax</span>());<span class="comment">//new CNTax()这里可以通过工厂模式将其抽象出来</span></span><br><span class="line">    cout &lt;&lt; order-&gt;<span class="built_in">CalculateTax</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> order;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这种情况下，我们只需要添加一个继承自<code>TaxStrategy</code>的新类，不需要修改<code>SalesOrder</code>类，这样就符合了<strong>开闭原则</strong></p>
<h4 id="策略模式结合简单工厂抽象化">2.4 策略模式结合简单工厂抽象化</h4>
<p>在上述代码中，我们可以看到<code>new CNTax()</code>这里可以通过简单工厂方法将其抽象出来，这样可以更好的解耦</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxStrategyFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> TaxStrategy* <span class="title">CreateTaxStrategy</span><span class="params">(TexType type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> CN_TAX:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">CNTax</span>();</span><br><span class="line">        <span class="keyword">case</span> US_TAX:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">USTax</span>();</span><br><span class="line">        <span class="keyword">case</span> JP_TAX:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">JPTax</span>();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SalesOrder* order = <span class="keyword">new</span> <span class="built_in">SalesOrder</span>(TaxStrategyFactory::<span class="built_in">CreateTaxStrategy</span>(CN_TAX));</span><br><span class="line">    cout &lt;&lt; order-&gt;<span class="built_in">CalculateTax</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span> order;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以通过工厂模式将<code>new CNTax()</code>这里抽象出来，这样可以更好的解耦，当然<code>TaxStrategyFactory</code>的实现还可以进一步设计成抽象接口，将其改造为工厂方法模式，这里就不再赘述</p>
<h2 id="二总结">二、总结</h2>
<ul>
<li><p>策略模式使得<strong>算法可以独立于客户程序</strong>（稳定，如SalesOrder）而变化（不稳定、扩展，如CNTax、USTax、JPTax）</p></li>
<li><p>策略模式提供一系列可变的算法，客户程序在运行时只需要<strong>关心接口</strong>，不需要关心算法的内部实现细节</p></li>
<li><p>在代码中当出现<strong>if-else</strong>语句 or
<strong>switch-case</strong>语句时，一般就是<strong>需要使用策略模式</strong>的时候了（使用策略模式抽象化代替if-else语句
or
switch-case语句）(只有在if-else是绝对不变的情况下可以不用将其优化为策略模式，比如一周只有7天，这种确定情况下就不需要优化为策略模式)</p></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>调度项目1：环境部署</title>
    <url>/2024/06/14/%E8%B0%83%E5%BA%A6%E9%A1%B9%E7%9B%AE1%EF%BC%9A%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="错误密码，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dc5a892ed425fd85bdc756233a1903749426e5f06263287f31cbe049ab33956f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">填入密码才可访问阅读</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>任务调度项目</category>
      </categories>
      <tags>
        <tag>任务调度项目</tag>
      </tags>
  </entry>
  <entry>
    <title>调度项目2：整体设计思路</title>
    <url>/2024/07/15/%E8%B0%83%E5%BA%A6%E9%A1%B9%E7%9B%AE2%EF%BC%9A%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="错误密码，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="081056f8a24e3431569f5c780a06694ce35d629b318df9fb9babab3d55cde62a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">填入密码才可访问阅读</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>任务调度项目</category>
      </categories>
      <tags>
        <tag>任务调度项目</tag>
      </tags>
  </entry>
  <entry>
    <title>调度项目3：FlowSvr的设计</title>
    <url>/2024/07/15/%E8%B0%83%E5%BA%A6%E9%A1%B9%E7%9B%AE3%EF%BC%9AFlowSvr%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="错误密码，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6c060808eba7bcb01701bfc5f7cb3ed2a72b0c56bdceff31df50df150081c3e3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">填入密码才可访问阅读</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>任务调度项目</category>
      </categories>
      <tags>
        <tag>任务调度项目</tag>
      </tags>
  </entry>
  <entry>
    <title>调度项目4：Worker的设计</title>
    <url>/2024/08/18/%E8%B0%83%E5%BA%A6%E9%A1%B9%E7%9B%AE4%EF%BC%9AWorker%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="错误密码，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="54a09f0446c368130862a2aa0097b31376f8c3b6efac94461ce8c9d62c0b92b0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">填入密码才可访问阅读</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>任务调度项目</category>
      </categories>
      <tags>
        <tag>任务调度项目</tag>
      </tags>
  </entry>
  <entry>
    <title>调度项目5：flowsvr开发</title>
    <url>/2024/09/14/%E8%B0%83%E5%BA%A6%E9%A1%B9%E7%9B%AE5%EF%BC%9Aflowsvr%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="错误密码，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a8e9d68f7ae1bf87cb8f9d3d0af57ea9b75646dc01e8d4c56708e53dd17cf305">e67aaf3b219a461d5f53a135dd966c7ed313e5550d2d49756e11bc26ec95b706e3bb7855030ea2fc79bf3630fdc61f31e513d21f7ca4a1dd6ed20eb8673b53c8d8a919ab20673f1867abfd38d211c72311e7880258f30c6a9cd0ef7951c6c85621a004d07b30c6a7e21199c3c88e0b15d358b69f01655d06836f8a61a8b8dec87b75df92036337dee7918b9bba4cdf7833bd39a18f869e20f0107d9d43faad780966520aa6c7baf695e4d512662a11b3111c106fc956bf2ea2cad56d103322f5c2a37d3747b3516151172453c6f7c30e5e41cb1fde31553465d5e04271403861437ccae08aa51ea616b2497518cad559f65da0fc42cc5a5554bd677b5295b80c19d5221d83d0593c2186620197130f4a1ae4b7879a03a6bce1f42690d84bcbc22fd5df07737ce3187f397a485c4a1703d7f8d2cb0c2e122e9f0ddcf55f828c05a29ea9e3c5a9de6c79ef2034de20f2a2054363da6663124f1fd79db1c9559a934ebfca8cca544f039666e5887c238cd051a1df752bbe1085a89f505713058eee4f9e3b716ba1d05feb1b3bba36b74973d35a3c10a3b9ae895f70bc5dffb31c9722d17092e3047a82ccf4b77c2efbfa843e6563ffd49a7efb92bf9a2baf7b72c64f7dcb0316580252915d308fe45eaba24cc2482600a579d9b158284b169dcf7895daa9afc7d351145ba3c1652036eb7bb521e0753cbdd6d12fe17713d932931fa8c1af34304b56d44d9d03369ddd34e405e8921efc0c69cd6b7211a1fbf50b9f574caff1033e65c44d53756a02f40d71886485d96fe04fec42fa2fad3ccc55255a59fb10e39a9e74ab4d9bb700f8f5e979d3b9e9ae25735f8f0c414efe73519c67169c808ca6741fcaac4604118d5091709d20d3932149f2689e37962d0f6a8d3ef2e29ed0e77b2b7ee5a3b9c6963b98b94a55d652a81e3462067842f6c3d6ce7652abbb0e97f099c8f9d94d1cb8e43855f6edc20065e7b1957a02856fdc4cbf7f7af59b4ca47cdc21f0a69867ed8078e59e82aa482faff9652fec76688a0ea941a22b9952c62b5c86c7ef48b146b695a2333773bf89d4da0d7da7d6c943488aa818c8a88d812874f72e6e97655e6f8fbdaed5d0caf9e13d62268cce9351137b96231096041d496de00c25d276b2bee83aa6176b92f2f6702f371d7a0ea23df5865556f5fccdee8043cfe4be90551fbf061cfbe320c1148a6cf062edd7a81fd4f1999d66eb1eea969a9a5f62d277cb3c8d82a17496299dbb824f18ca8368e02da0ed75c7717aadbf1c0f36ca2f0520ba7ca4f4fb9d9e53aaa2fe8e0ca04e0bbdf1350f332ca9b810c394ab87e3eea8e697663f7fa7a7d8a5a66e0fa42cde7cff0bc6935790dd2f3fc9026a8bd76a577d08d68bfb0f805fcdfe000938f88bb40a38f053916c0ae0f147d0e5b7aa0291d699f56ee36e4780d89a0450ab9ff2975e33459b02ccc0c25b43dc8b657e66ba50de26f86a8e7323438f6fe26deed3f6a6dd91007852b218163c40c9ceab4e07ce5d2552c3553083c78c72804aaddc05d46124190c1d2bebeb718e09679b1cc590ae7d402278ae64b7f1fa629cf088c8f384faea38138658822383a8efd6026cb87a2143a6660dec05c79e6705aa290fc418e9fae5d0237bc754603f39fc4b0e467e0fe5a7dd4fb168245a9e83732d54794e07968ebc8f6989f4449c0d7bfdc3bb7e458709051a822279324e8d98792750c52d0ccb8cd1d7b56b0b00deb4976dc521413f1a8b247a4779b216946352e852a255a0adf5f6cbea69d84448955e7ba0cec9ac8ca3909ba127d6b4814eaadf25588b7cd1b5fb2f00f93d3f9540e4031d0f3aa24c0f2708de8a57e200b2a1aafbd75d4a088d600410d611e840b6778a954efba7594a2a05defb6b90be9e7d50dc26d0a0678feed86965792eb9571abb07bdb3177af34cd83016f05c5304ac51d0da0cfce32f37bf56a3dd84da3304dade5870362fe93f9e4f0b5ba5b12eba9627af7d254968eb91abd8c8e376e606d542c2165cff8a9c8844a48eabdacde55e957731083cdee1406d5e84e56c712e15345c6dfcefe23f32903dafeadb6d4a44e1149c016818d800a29f899705b696da7789232c51c131d5c0c962990fdc9d372999b535ea8b1de6e92f2bc79c021aa0edf8684ef9337afceb1ffe1b0b0186da2bff6ca65015a7af4d2907589ec0cbcc292d77ba2024c835f23691a2112dc50ff9fbe7567132549ee2d0e3033f26c19cd129d028262114d7a6adc0d00f5dd546b91cc95329f31d3b76cde4317d3788f1faa6a6d6bf1dc363aa8d318eee0ee250bc03199b5d5fb0a2330a15ed5fd63b71e51ecac11d61bac6bdbe2f89eeb55e46ca3ba33ea0d27ef9d1e9db8018698d982ac719c10990a643db1a29b9f1f82d4ae04408941a20e35fb642b5d07d0845b6f214e53b4ef0b9cae5e9924ff116d3c22b939fe7e4ac269e0c4cadfef62000cd8916a9ecdadffc88ddddd10cba69b516d79e0126f2a8234a386511cec66249618c739cc6259916c0f7d48f2f6a4f3c76764b7b13aec2c8d2e9c7ce8023a048065118627edc0ff7c5ee72b1107ad330764ead6bad230a467681352e3a509f00b610a3da070971347948cf4a7f5fcca01e928def727bdfc68c0acb40290598f907248ac1ca2be724e72bc8f940a758fd4871cf9724e846dc71b995747d159e03046fab844f53d035a5b5d583c62296336c7cc1527da43e2e2a6a5d820301057892372e2e801266c961d74453e8aecad0af11f5572bd903258c6b86c074424c66ac4da7c025fed6d56742ce957a854f655f7583d428224314e7a12e040cf9e6cd7c09de15646cfd4cdb06722f557c0561d46baaad95b1e0adda77ba1ef78d217c7a594f122b6c5e575430a7d6dbd82c25ba29967d5fd521c7267535f573b295fa1a2c21312267a787d703465854308874806b42c0f5ea6e760bb8c3fc2cb90cdf8cf0351263e27cb97a4a1d09e3343b63eff40beb5ef9d3cac758e9d3b323c0b2797f0c6d5d055206f95d5bc1726a1bd732a8d88d5d2ab8e760f06919f12dce3ed96e38872d6801d859f806244dee339e3b0fb280d40a80bff940d7bcb7d2f9fa06645af1b47f87345245e7288972a7f385e1da65dd10431c2ff170ca76a37c38992a7d5326aa4e91d9437552214d7067b6448197dddaf6207eac18c105f78016f82e7b6f6be1fb09b0e8b59144db6b9d9396176c4810c2c2ff74e1c91a5d28e40058e7acd2f77be7525becba81c88a1f8b806e9cf1bab60e8bcc76e3234cba7451f5a58bc73d2e72297d491e9f5b02b5df2840706974067fe18d2b50d59d8a7a5d004ebb52f0d5452ae9c002a4b1af7ca1a09593b2d680deb6d4248e34a5fc3ff810d773be1769f7356650bb5a217e6194b9469b5b0c16b029b3e522855f89175d81b6558bf4ebe62af55353ec0ae68c180e3d806fcb6f7ba840f7b2cef740fbbfe5ba55b140bd5f7cd6cab9d15225cfc81a4f949e41e43ccca7ebc24374248a82f35b6f4d4f6f8022d86f6d8d4e9d7a07dd64a2ce9ce6f2fd1a7cbf854fc0cba757a9655cfa46ed6c575b688efa3afa577d22c7407f7b43c8e21511f3f40814d7663d8ef17fa61922b4b4e94b5bfffce211adbeed2adf0b46fc615fba1e4236bed9df16c0c97748870945b7c2c4ecf708b241562b9c34d9bb7b303dac33d2cd9257b2e64a399e49fb3caee9f160c2ecf40d2c74b656229ca98403e7f6d3d1e3ba2e140c8d9ef399c1f62b7a98bdba3bc14906de81e3f7a5cf2f10b87ffadee8391db0171ff720d07bf4677be3b5b0014dfdc4a81b15827a87ef0e394c1c4f330fdfe59652cf5f626232288b315a12e26a9be2f4272eb2a5d928f904b3e7b583f173c1abca5f54127bde67bd3972ebf0b8e80646816910b27f29acc6483b5f00600d2931c604b536f130c9f7d400a962e96bd9b922186fe72637d6ed0d602f8c10d060bddce26bbcb6485ff2c9e1c9b79272e5494844b6a22e6aeb56564a18210d6ffa894094acafc7c5db5e3399e4f911e94d8aaf5e5aaac71d0c133983097a7211ef1f4364aed48ba7e8f0f4fac18da550c7631012460f2dcabb47c2d9fa81cf401561d869c0fcf02d0da420c3e6767bf84f6a3bdcae5c62eb8f5c734482a1a99a3ddb17a711ce94e5ec4ed9238a51d4666cb28ec8e9c56ce694e68484582c94efef0c612052f5f65beb4840238703d0d83625b43f71925289ee49335e1fbe6afbb88a2c10182e8107526d92e5143889e9f74fadb390ab1fd5d85c81b11d7e6a20d4f2019bdd6ad6e21e9a556e29f6ade65d4190adae3be1cace7d803dc4c3cf8ae61f46eb99a6ce973b1f3e52b7a5cfdda519f1d8accb990af38693de81135f92acaf5dbcc256a77c8c00702cd8db86e2c494b3ea213da22d3d576f7342ce09c02264fdc2cc4637eddcd3e941830aced474d8bc346f6f1335842ae8faf17f210f0e45f77e7f941f4382ea212373d45982589c2f6db7d64c15b08ea4a9b6f308aa9f3185967ca716c5781099c266f158d5b448449e6c93ad1cfbad142c9ba84b2367dfafb778caa36293c9fb2a7bbb8bc20a93f827f0fc60c8a8f1cad30c2597b7b8887f1d390bb594e59ef6a771edddcb3c149c1931ca6500adcb20dab3a3a9573a222a8294fbd128e1e1bca2c43689dd8e242da0b17e6b6ca68aa5d683064042bcd6819858c8ad633f25226de89ebebd325d1162f253f15c4f96b392736d76a11350dabb410d02ae6d7a3eef81af0c137fb05dc67ec4e6bb885b2f36f4687cf74b607a5859e04c19b1d658683eda69af8c545314b02219ce9c6548cf91128152867bcc505c1a39ec7d8f5129f639748cbf6a32d0cf6a963fcdbcd5adc51b4959ca127c8271195df336a34e7aa8b56ac5ecfb1acf1aa39cb1944248d9c35e55fde9248127e29882c652108bc3d768edaaf794bc76acabe875d5c6e2a62668bdd24c76b99ae968d09973e7e5cb23af7dc7824d24620eddf67427276d67b8ffe8ad58b1cbb8752a98700cfdc6b655e37ec96f3eeb6dd5eb9c63edc9a4be57e58e78639c53e0115fdd85c5eb153be640c65200280a8af9caf683b2b0c8f817f1f27d60e1179ce50009b161969d31e9f2485a33b9742605c4a610aab34b348799f5ae1a5c2608801bc1b4c58efff06f33b11bb939b0555a676ba68abd50071ddf81720b3bff3af0ecf9e1e5b2ff3eca3a601f80d7e6a1610e55e275707d95637d57cc9942875c3b4bca5e0e836fd915189444f8d5e4f9c10f048d1ef922c67cf6009bc8b1f52ba72e19c29b0759db313d11913a53e8414deecfbc45d799849ee9bc7533ea3ae3f7d76d0fbeec6321775af88371e12c3acc5ebdf860f8e91ab94706f562b4703098d72edf57b051c1b5dd85a349b17231df0ff6ba394545e443710cbb70c724ae802c3dcbc8db5faba8f81ae843ee80a3b4704e1f1a5dc259ec1ad84a8e6aa01be898cf4b8ea9b7191f01d77e1b859796c7c27c9bd51823c4f031f25300b10deff716b63f0c22f472df5959283d3d6a700c6f65851619b7d4503792c31c624b792d7b6153ce73f2facaa06b5ff90a0221f244a4bac43e48623b7d10b5df48fc41209f3eebbc2eb8c41764b808999f47f927b8bd7d20aef03ec55eb95e522da24aacf3660ec302ed898446225603b19e51e378673e023ca0ddc79417e630006b058f743f5cd2a4b8256efc62469e25378773cb0488dec5aa90b4acc52701f2d682d8299372e8b4972ad051abc19c6c03084243ec3e123a116450ec83d302729c0522abbb2a9cc3f1a06294d9e7cce954fa12c3d89cdcaaebdeb88a1954693413e5b40d5f2bbff0dfa49bd807e03c179009fa5973611199c6d5e687ca608ae74f428257c746f38ebea9380e8a6d74f9e798d13e490880842b2361b9f9018d1dd6a9e936825bb5ff23cd32d4db440bfced015b97143f0d325beae1d79a775835ff2939362c7fc5cc72234cd87074a78ff0124c6954bd0af786b838f8b773daf55349ccba2b62d5299ff207a1d47ff0561daa0a7ab8e20c2dc52c6f769c2bbf04c7b0a545866a235d46a29f65b20a42cf75249dc042916b47c9e4534fd08ff3ce148f200573cad871fd28a889ec7c7dbfe2df0586ad43064266f0f7268d2d169f6e82ea6852de5f260cf8d2a5fecf2a36e43fa6c082c63603edac5a5ffa0aebbd19777d4ddb9987a93d451c3f8711b7150f810ecb56a59b2b14a1cdc006a57339d43a50b354219dd7bc574f7a4a3b20dea9b546d84f705753ee05b8373921388c7a3af8cc1748398baa61210d3042648012908105a4aa103a6efe5cf87850993b8aef7de7b760e81a47c3a46ccd602884d59fa9717e1ebaee8502d6cba399844186b5633ef9727a5f6c4229cae7c7de407446ae28827f8838380d352896f93684561b916a93dbf21283090647463d532ed5a92d8c802dc1a2a66a2a5f08100396739f8414480522c70b6c1dca9d2fa99b5c504e571ad8e5cb22ae4c368758feb114adedbc712c948f6b145c79ffd13ba96e6b71e4a66b35c30027d25a549c232658024e9aed24370ac0f956e8add62b6db44020eff889b8d645e1b3bf29ae5b54333a25278e52243cc311ffe690288c5db4e3c26f1635bcd5a08cfe5eb9ee1ad35df776b2664aa5f9b7e5f1111bf46eb9390cd8fc138fb4b2fcb498afafee604ab3c04d39004858ad6670109b1954e555e6730562374b1b0e3db048aa67db47692bdb3bffbe91722fb1bbb80b0453e23cc4f9236d767dce1d5847e8d00f9eaa367df955c3485648037a2fc8b452c1808d486223d0aae54a2601dc0ec233afbff6bd5da571a3e6ca473b146c2a5ace28e9aff4b6080f9a09813ba74f64ed0ef2c75d1e1a3b313d3ec510e07a4e5c551655385dc5a928738af931ac20e06f2a3403bb17cb65fa9150be6683a19a4f6fbb78a0165115669222f82723c5da6e9aa3aadecaf92e6b885be2af56459846f6deebac843efe11906d6b12bb20ee1e03a94a5c2d4994df3192977a26d5b30233dc5297d66c07c2ec4ca48f13c57a0e8cf9b32f03cba515faa50a4688b0a9c07259e257269a17af98f552c643e837ecd4ce912f3be97cbe4bf315f2d5aa8bce2581ced9df5a7cfc1b6dce0073586f652d2fd9121bb2b3700912598a8f2c6b5bffa54ddda6e766cf17d0ec92af75c3db19641915ec45120eecdb8764332af15dcb2da928187136e6eb076041f367fa34cac813575f568b656741eebc7309803bad7efd8c247d9d800380e8066f29d8ea81833dfa6e7c581a45d76ce2864db818f5dce9af537c5dac03ea75d9dff36ff1a6080e02c44d2a62c302d20a8736c17c20ce0ae7b42e700302b9d30075955748b97ff6cd87c55072a4975d3dc10fb3b3bf843288c151eda9a9f69b5a1f0a80b63e99043b950d2fcf3ed2157a3fe74c04c0be38a8083ba9afb535d4af5e1d6e85d6426b5314c4c53e279383a852c8870caed63349e847337d5df9bd6d5352547148ffd8fcb5c78fbe4e9b4e063322b7fa2061f01a58d5df5a69958467f00b66f54f88031c2c8ee44eab11032dbf861c57379eb1e8ee662f23dd43c91779dd25d1454efc75cdc96e66b6e0b19499cfedd177dea4ba84c12423e629fc1f271ff7930e4352b617c73dea28dea2f7cb331ae3a9c71d413aafe120440445e923d165785b3d8af356a929b8ee261ff2a1e2b0f2f1338ef535ecd24d0f436d18c25776d3316dd69ca86f1a29f6b3a9746c4daa46303cab3b34ab9e4b930cf255df47a4b6fe460d807ac2be66ed0acfb2d6dc033e10855fbc070e288452d8f2cf0e46e03bad1be1404ae1daccb7d36ce31e3fa8fed6d919a912165ff0b7e5ef2c70652aa6866c4a9c0f7c7e39a90925272a768e32df84348f4e9111b80e989983ddc1de053fb9fb80de45a00e15f68d9f7abe6b97f94ef772826053243e87f2eca2f611b3205dacec99229911610358d8b6db983d932660ff64bf38f4143f9d544926c36b052987b80764476fef2567e25776bd65e7541fbc36aa5ccbe4b9da31420dddf756e8113c5fc46872805b9e36534a92b5fb3aa1b1d6d4ed99939ebddf90bd2a8c0a18d09235c0896b179a9976f083915426c75fddb9f21ba5997f6ef4a22a48cfa994ff0c09c6c899b01ceb6aeb68a1c7065e6314341a8b61e975331e1e64197b855e6733925f57c3baf10eafb23028020dbb8f503a4367c09dd5136671430981d3e405789bd918eae5928035e6286abad03262a029754e80519b752976273df5c4d919da3130f192c334db9461306ebaa0914678cb0256dfa4361295d49d0a402c98a31d9b0b08d8d1bae59ee77702afc47239bef6f904f8ee8c43b220db094dc864d555cb535832d5dd2709f384faaccb7da504890193f2233d14839fe24824d80e30318fe7695c4887a7613931913c732d680f528c85d46c981ccf0e2b210221984eca70d080e384c8c2d53b1f1fb589ad5a74350ab4474b2f23e42c6b5c6334a0565d33f18fdad3ab08f6e25d534a06befda1ebf54cf0c73d6a7d2e3aa3cf7e80c59da7543949f288fe56aeda986eddf1d6357c50d1d819cbcd1e1102597065825414ec2fb5ec56fdc694704a99f9313935ec2640d086f3dd8c4769408965ffa8ce787aaa83583fd00495f7267e7d5cd8e1460ddd1d69b9dfaa096c631e1cbcab41948ca49d5794b152ef673de5726ca75bf3513cf472680041e097a0da7d3ac813008583015ada95080cd1f4ee4d45363e486346de98bf5a3c4b00368b3cc471f2ed566ea456b116b388a1b62aac6fe8b6b03b068c188279c33750364cc960b7c39f41d4709cac08ca8636220d6778b9ba3065c1e3164693727610945a722ba4c79c301eb40d79171f6f36a7a9158df4c0fafc3d094cd80831222eb125a4b78860804416e5043d190aa439f6a49f9d25f2ab495e47b9a4479968c2db6b24d8ee70ac820db7cb6576dfffeb35b242697bcf3a31da5bf94239a53441e0fbccbca4ee719fce18eceb1e83dbc5b303a00bf64e54c51d0692ec9dcf55b37690946cac0636a6f7a09441fdca85a809685bc0e9b57188f18d623a5aad233711036f42f476511b9711a66f0c91cb529def71e0553be9fe2987ee18de17b463b9a181a7d6e1fbd885c9b30f1cb369de7da33f26e0c4ef335bd66cb6b45556c3f8c2cb36c3a97fde87760fb2716b519f594455cdad7729c32758a94c0ba4ffff1a686675a9b0b57b496eb56b3057effc80476194799f9690edbcb58db8bec8f7b83a1ca4e6fbf6ca3a5674ecc02d235376d447c751a4dbcca361697297142edfee94e73c6e3c70b02c7beedb8ae9582245ffbb87c479b14a5c9be72cc0e25618854be2176689ed0dd369df9430ba8cc861ebf9ca2851dc2a9bd023ed3ac68ec9bf829ecee7e9e653599d7a09d1ec3adb981bd9aac8d420de7b09721dff8886098fa6ade5f013e450b5e699368ba8b450ee8392d9ead073739ae70309a122534abb97e0f66c2eee69efe6556f049fad8a88b4a3c9109f88e9bc8063db6c93225592f8b1048299decb696722f7da5c50cc8718fa04f6d832ba3d436a48a237c13e6a763a24e0da7944a5514864f5f093f427ed6edf67f06fd9ada2deb69d0536caca3f1818e712680bc9588f70c1bbc0b9c2ede4502d3243f6a6ec8e358d3042d93c9d4580d95aa092ea35ef7581640bf9e3f2d9cd1d7fd229af6f0b9cca616c98131f46671b30e6750526fb8cb91301229f00212f354c48a4c6b200b1805b596c9d9618b50820edbbc37cc2ff6e4168b334f16b90f061745d7ff903c1117144dcd58d510f1aedca603f7484f9533dc4fd0dfe0dedcd66265075eafd3265763dbcbf9dd51a642e6a89d55636b5d29db94f1d068ddd76a79be3925fdda2754c7a6f9c737d16177f9f952baa2d06dc712c215307e9955785c867b9b6ce96ac35d545defe234733db4af102d84728b838ce78a32f4c7a224e1bdc19e0893f60083bab26824cd74edb03989eb1f2f0d742a206f5f6f10e296b8285f35d441ac66e4c2dff04031a80867c51363fd0e0c65634c5ac04d618a665856c70c729bde9fa1446ea743b1f399131c357ec23c4edce2dfe4548bfd3105bd6a16453e3f48874036c37f295b0b9d652d46633fa271f9c40a1d60803fd9449c6752b50189227ce9b0a1f51c50fcd76d63f023410b349ebad01b100167cff517491fec8e1b370b8ac0a2e72ce23163a968f79b8b7ad108c836faaa154216a6f8e631a5c67f8040a5a82920fc99f0a390663ae022df6e2a8c262821036b8c2e781624d690c86c6d384c7488ebf880e68562c53152496dd27a588cf86ae2d32d36ad6e2b3a09ab7669b7e96ce0526b78b3ff899436fc741da71a05731bf65d3f2d6f7f18a625c9398cd3a95a2dd448cc37309d3ff0fc8e55c660cfd62bf9139b0cd34ee4986a77932903c751bea0bebbb75a338f2b560b18d7a17ea1653b57f2e84d896d1cfbd4aecb8e2c2e5709b2db1601301db5e0980d1d6fadb1ac6c974c5424496631928dc9f404a226190e01b382c7b411fd4cb5ef86e296d5f256419353875c5bb798a6f520eef1d40c3bbb41a061d70079f45fc9b72e59ea0900e0908e0ac603dd3ac748ed301969b5d20c9d383493062ba7a8e71dc3ad09e9aa62b45113505b62e86c5fa9cf0ae681d3e858565a259343798d2a0d5e63ba29fe7b596dbe1c996af71e5bfd51b3e543c8bf62ed32f4934b71584e6b3e1995af852bce31ab320f891388a3fffa746b6d950728a9d7453ba75ea33fab00f0a64f349d756f6264c021aaf76eaa8d09e907d7df9b0496d2fba89c86d0d2e38022614b1993e7567ccba8b054567526b60377e286e19757974f29c28d53917a40638d63446384b178b4bbf8ddb5ce6f4c8ced1d6e6a195c9daeeb254b3f2c97907082856bbc7df2c662771d8a8141c97072980acad7beb4a4db8f32983119e7b994c0277b1c944063eaf97042e4eb73d0fc61ba08fd04dd240adc30b3173caa5a2fb35a80e058fe7a0dac88ab161fa695e5dde87aad5c92d3e3d9ee54b14b4b454b0deeff2a418c648255741f1ff8e840deadb8c23fdcbb15627b1c3901f9d958ebd3fc84c6a58bed24d9b37a8cd7c0f9d48895bdb544e83afbd0e67e8f3c3181d01f6ab1876ae0790d39a5bbf69faae4de296bb17a2a18f907c5dd4e2dbe90ff58b16cb01834e5e97a01398e44eba540caa086f2bb84782f856f6d511a198f1a9f592562c064fbf5ce72615b3bb576600243c9e7fb23091c2efeb236b66508ac7f8cdb94c806220fe9593dae63ec2c17ca07ad28af24ba3e7a621719f6adb39805e6580ed1be86c875975a2bcd8d889591bd8387fe4473470911fdc90d66b8aed831079871acc9c6ae059e3ec4396515d2df2363e6dd8dffa818a896c5f4b9eebe50c6dfdb8ffedf5ae163d0e8bdd3beb232087edb7ec259f5873ab8eb245e6a07cead4b4fcd18a221882fc1aed9a0c615b5b724ae51bfc4678463e75a60733dbb84b9dcc58e21db7fa99ca95d6eb840ee9cb90a17c7c0028eed53caae42ec876d37b16d24e1e65b469392c6f161ee55e2c320f38082cd10321778ca04b2ea041d6ed8a1e44adb2f3849639475724b626aa62b435610136bf9529c3dfd259e70743ccc4142c998d42b121b2e63634054c202d9b087c7cf3661f9f41262c3c2ae081ff343f97d98231007897da80d6cc2f43d72c0b1d4bc193bff67a2a410d574ebe7edf04c15366bd665c7489a36a326e142280aace8ac9d8b42ce29b81af8b2f364724e19f638012ac460132c2619eb3667fb7244399ebf0158b1cfe9fce5cc5760a0a1953a32c14cd84490eaf6909a42b5f9706339dedb771f8cea5323d3402f37fd42b98bdbe8e8332bb73ab2323a739efd2495e63c9456fe815e1a82ca869a855875dde6ae07bd6f45898e29d5ae84c3a3351109b7686cebb902593863a6c06acc9be38d5dfe7ceb4d62aa7cb4f2486e9f1e1c4c000f868fd756dbe16705f24a015580580614e4b581a25f0fa62911647076be0d5c5cd60b64bc3e2376a08231e543168a68309cf5965acd2fe76849fffb3bb4928e92fb0eaa1e113a0929df3c0fe0040ec088b6a58191fdcd0cbe74a02310737ba4eba4a69e660316a07810fd3524c3c0ec36a5a7ee03752e518ed7d79450ec8face3decc77e34c8fa2dd85d3aa929ddd9dda72a7c7fce3d4cc528b4980e519896c05d44e0ac83d135c261aba4f474a1982baa8298c9c9c0c05a1cb3cba6033ba94349a9da6911cdba48eb8859387c64170d1eb9a3d5857ba059fcfe584ca2b4de99496a807fa7dca77b403cd78a3d8619c97e320093aca0958600eb70b5fbf801b9f4eca0f465ecd8182ed9c21b02bb9378adf8137b4a6142164c672576a163d768536396ed3bfc7d216ca2ead5122dc999323053ab6ca0bb4b4e846090504244f9d5ca850b4ef943cde90c03a5f3e60a97955322dd9f13853dfeaa70287307ef8f4109e3a937be7a8ade6288347eb71ee602e5f3742d83e90e8473cca93ed59ce37109448b50ecc27d69f0f813b1df682c16e14373f5a44e5f3079b8fe4316a542624f14848bca58d3be2c184cea5f95142563cadb26cca5d1c6c2e239657300a88c1698e861bcd95dd9d2075346d8164c74c1dfd1abe3c7c43436fa1152ddae8d281744d67e85acbe7b204ffc343330922eeaaa25d9aa15f0d6a91fef1348b8549deb039ae81f0d95d0d4d66cd44ffc0a51b623c4397c887905f30c866446d31bf53f3d8bb126eea2f876140035a679576ba154aecb6c3656ca63fba142339cd32567f6f991c9bdfd08681e988f062ccef2c3732a58634cd032561961117c1cac613dbcfa213e639a2075b7f7cb99a9f71b04eff01ff67d41a75b717d3299022cab6d26004fa93938746bd41964f6a3b5365a4ae203a241c205fd9cb6df1033d03e79e8b47749372eb789a79a10ee1f4ea714eaca1f26beb328f8c2ecc60bffff94b474664f5ed2e0857b2b9f5741746355866ad934d98d34c29a2cf493d6b3fa4cae2b2656793c860c4c91a231357a0ce2ea6fd2113b013f5e1429222cff582d39cd6496eb9cacdfec01362ebf206e92e79f702bcd894099bac2680150c9661fddd8188e1181354f2f025bf6b6e7d4ceb2de29ea410ba237ac224f0e136d77aa5c5a5c40b81aa53b05d189296d68405e9fde86a964acdc45a30e710af282d9ece74d2bb47e0f1facf08e327a98e614bfe8fe81dd6da86c7a5fffd5a9b05bb79eeb05a8739c2ae00c6d8baa4be9d6b544ec9a6a5950811b53c4ac08b983586e9f7321ade6c6020809ada0f636f5c431094fe632d4b5224677874f5695bd8f3ab906c47783c88e4271eab49bc391d7519cb1484ee878e842406c8f9dae83566c4e6abb6e1a1c6618cef17dc6b9708c15f5592472a53cbe7827d91656c78279cf632fe5a5bb8c6b50df447d1bf37cc5c0a065bac72bed2bcfb7e08d24b40d741e36b1a3aa0bb4fcddc1ad355878966cb1c58930fe104eb5f0836643701fc6f87d029136be30d5eac348e276fdaeda6e5d0e295c391ff037f6857e62c510a7236abd4fdde5f210ba357eb91fed890faa56a79ad65af0da262e2f9e92f4a27cdeda0b4aaa88ff453ca82df1ce534ec6592ec07a44d03a1fa1ff8d54b5f578edf74539aaa3162ae09f9c58237efc1db4938cd5617bd12b9b8662bfd250ed63f3dbae2f7069ab9f48a0a053564dab40b3b47da026dcd65a049645fefdeeb952b33017fb28f3a21c61c405f48e484c50c1e0e95a0f04eb862a4e0939ff007fcb2418ab6495f023a755e664af5c6f7ec716cf5e4bce186147dba9c27b8330f3a11e8661a908e767a95907eceb452f5abb097500f642a00fe688ee56d33abf36864334a79022faa8c9b44c740e104758fcabe3c9d3d7fecbb3eccefda57ef8227c8944959b2b0042dc075433cca82ae92600347afd3d1b19df30a742e84541f323c151fee3312808a6669f77d33f6f44fe36377eb0512f242fc92b8674571abbdbff29e3e2e070e350ff101726bf8ef924501076bc36eb9582c79f734f0ccb0c22231494406ac2bc337ab55edb28f2d71aac635833125f986ce553c95cc1227fcf1b33f1ce2ee4b532926f1a81dcf52893623185c93cebb3eaecec1ece8e9f3fe645c0f526398d19cea4d25102ba959c15bb493c5dffa31d1940e18e1703f7e417a8faa368e0d8f2193ec2ee16afec6a19c0c680d315cc9be53ce17fe06e24301644fdc6286b5b4e8f0e793d958fe2263772be2961368318b53f038c2dc6c77f2a914b181890cbf5b7752969ef47a9628ebac3baca61ac1201bb5a698631d08c1073f0e7787e2486cc091ac84f8cb226c1252e48689d859e23eca16ca8b3e9dad7776d9c9f703b4ca84dcf15b1cc234a4744b00b93b3fe41e3e47d18b60f14c95b5093ef60170e14ed5f989a8e0639c21e0b2bb19736225ec0676a07c0ebd950bbd2759d5e16b4a751b3e5cf0d4be2242eb804799190c026d05e0028328e10eb75e3d9dc05af08d549fe82aa7d3bfafc652a85f1c23fc1eb5513001c8249ea1bc371ed91b5e2b8c6aba11da7b16a0713efdbfb986ca43f450e40fe3608b83ec67228824c2e007b5f76f4d83dc3278943790da59eca5b08f6eeab63c51a6730f874c2c705ad53c2dbcf041d2664af91f6d7b974c594b91f8ab6b2f965cd484762a7808a2c0ba150c7aea560c39ce99e934f7f6ea9bd2fe4b7c826b1c09e9ad35a1f4092c06140772e909ad3155ae53960661172658a8d6b10574b760fc7091d1234b6e044df17e530dc9bfa54a7006be31520e321df81ed7160a055a14b16ba4a0486c5035fe03cca5cdf9889be11af3b9b09925eedfc83c184ce6fc4e147a608cc88c5f512444fe1901718e904487acc556173183d44e75fd9397af670f7425c71f9fdcb487a5e080dd3fc3ecfe4dc33cd41511567376e012e456ecac797c5f44e165486456f26e5bbeca2aaadc975335f288f90b3e2c42a920d4e4632057bd87ae370493e01d3c74f9d103aa32ea11e393d2776dda6d51c329056166ef9cb12c837833dd4e7a3d82c48f28ce765c92c4850ae7d33bfe0eec4278b655ce2a7fb4a5a3a73967b3261654865fe90cc783c034301fc164a20774c88438cc71e23e835cb07d4aa5f212696b9431a0a0b2a4fb1911ca84e6912f615cbbbe4c07c8d66980e2a9a069ec175148176e4bbf489fd24682f1ae63c3a3e7e5d8e1a7b6184129c4b1e39c5ab2e890a1b9b438bfce9c1e525ce0b421aca56ec71536e896c19c546be2d134446361139e463efc0cdfc28d0e507d4dc94c618afcd5081f52797b483d597a32369e1820bbc7dfe0eab29886f7120dc4532bfd0faa0a69f67b9dd9abe6c191dc06c53cbefe44be9a89827ecc6e06bea4c85f3932d55162965a5f1ced48170feeb18a7ba7f35f067e7888dd20259e5ec80972febe26480b6f6b97d9f0913020a2b46a01e8c500f23b3496f39c4ba893bf5725e27321339fce6b73ab74c038b131a2de3afb83ba857c1edb0787dbda569219595b401e5d85723785e2eede7392628a187d213506f9c38ca4d7b3e767b241ad176c3ce955898a05ec2433267ca4dce93472119462f7e293c563a47ba4355dc4bba4705da0d33f74be6704431c5b029272be7684ee07044b61802ae72e7025bd0831b4ba04dc6832570a813e15c20139570fc0d95f9f9a7352fb3593ba56618cc46c642846635094f1072e220e2aeff4134fa0dcfb63224d002ed972ca28d647f429ae4bbc1e8419580367ef7276fbb4cee7ad33c7fa1d7d45bb2920f596e216f1038df75eed4dba1cbf11a76c6fc2108e20fa40f0e51008e1f8d7a59fc8937100d5b7529eafbebdd57b8fa288f637dd4a89ac259e7928d32048dc90fd5c1a44f00f80988b2b7894a48165adab7cc8069268cd659e34d13849651a47e97c53bc4bfb5f12d10d1149b3b7f7697e27b8d2045379332d9c7b91ce42b8abd83c3dd94e1cb8b980d45aaf25fe6817f9240c59cdf43b2cc5d8c78d56c8d30c77da09533919c1993572b9ad943b7e83ebcc5da87a8e1a8b25eabb70e945f7e9362995afbe2e0527450136b016fbed4960aa380a810a8b15eb128e2391cc8aa3650a2087ba1d5a7940c8bd54e771ff1f296ce1d6b0b15271c8bf6c7430df3afee15418bd8853e32165aee46ecbe4a27b2117ffaa6ce81da2efaf5948aa4faaf0abb7023d98e86e42cdaadbf60f75d3dbbc26a0fab5e54f1cc328491362419b2c169cb38313206bab661e6ffb12b715c79fff0c9d881c5bd8c0ba506d8398ca7900f63a433bd911b4ce516d3ed33453ffe6cb113f7d74eb91cd189b0d8aec72fe1ab35d601bda19fd64211bcaac6cba45526379d0afaf1f84f932a0260cf1b6e359e0f6b3dab3d2e631d7f534804430c791fd2c39f7b1c82e83529f1facb02cef548e4a1e161b888f9c43bc1fbaf773491659ff4684abab1770893566db921f0c141bfbf5dfb5a0620838b385d3eb2d19bb5dc82494712d7a3e5c5df25dfd7d5d31560e00b0b9ce5835dd4f43afb739a6daa17b113d30f80b6cc7ba5fe9316f3813091da3276a36cf82bbb3b091357aaf7fd6a69f1ae0d3b2154732ea6268691fb20db9637d7466deed7fbc8b71a110a4bdc275dab22e51111ec7c5b66987dbfdae3d7eac855625261253ea4dd6ef47db7e434a027cb3aceb5057ff162ef98645ba261de34cf8ab50d1dda0715ff01a0a96a5c988b348c27892262f06dfbe2bbabbf64470d13b85b90600861298818695a70f3252d3bf3c311ddef29503adf67816be09d78c13c0b96cf5706cc69900e7d2c97df337d67f26374d21a25cb7278191e53c949a4fc33369898ce82ecc972dd7bb766e1194fdc16b7ca4ce96ab12a3fa1a7e658ee879e0343947bcd1be61b767d16869c94ede3301efa68c1e45d2c451f0f6c4e86ceb378dda60524d24684472c0966dc3f4e3fe4d794f995c205ed69b10f2914e17c57cdb0181067fcb1d4c2bf03ac2fd60726c3820ec1083a1827b4e66698290077e98ecfb0f2e225d9033c65ac402ff394265f64617b293b073dacff28062ad2353d2a7afbe27b19501eac3cd32474bdb65ec2491489df865b9fed51591174bb918523d2da18f097d92f271fa657221cb913fc7dab0e9cd724f09c6304c4155806b83f8fd3fc09af90bcfa8cb317993723190bceb46c719df47cd3c54a6156ef54f11527e76d9a41a9237d7f0404055d1b1d63429be3fd1cdb13f2397c0e16790f145b835df0988f4fa37e88927e2fad81e94a8735671c892c9cc03a5890e3e913f37a7113ea0f31cccd9f4fb92d148a000f143566fa47c9f93c5f526180806b17f1b4c05370f2f1ecf26d976780a3b37fc5c924163b993ee98fb3a4976d8d9af57143c040e254a805cc5e0b01dfe5864c04987bb99a5336785aade7e3dd07cae4ec9e92861da534f27955c85ec28227d099dce2ff2e1fe4a0d31c125531bc78bdb1000e4b1232f26adedd31eca19f55ce5ce14a439c233c5afcea590491924ddb9fbac6abb78b04e0af677c8aae0d8b076135e071429aa4a2cba7dd8d8650a0f843c040e5683d75489b99d62065892f49b01837c0e45789fca8cc8694f20b2a32646325d7956a9dd82a967caad8244223570994a3e8296ee4216768658f79a56a44648e6af5df5de979f30a775ed332c54a67683dceb86a1c91d8b872059d9cbbb6e0e5f6aa8b989741acab62fba4a10a567a1b23957f6c4b18ef43f1a6c7d3f0b9674e02a04aeeea2f8aa53301e970c5b950c87ba89807c7c5d71326456397788ee00dc390ba22a54298c160712e37d47efce838e7583068f9f40c78734f80995b7c3ec458198f690694d5e7f82eea87a772d8c727f9e20bc2fd7e6b59006d8daf0b00731af512d8fc097588f10f5897009d084a08f4d86e3605d836da13461353997505ed5196b3bf1a6ebdcc535f267080db5033bc416ec2e23d79962f114ed26ef4049b9c1f2480c1cdab14624abc5092664de98f011e6220ae1d978ccdc3d78557f5499bbf36c668c2c6a7ffa34a68604e201235fa17a6dab8652bb4d7a0d1908222ed4d0c333b103d23f8ed56a8a0610e824d080fcc12908673c2bc36506391b19ec359db799b86ca069780ed6cc1cde3af7803678d2f43183113d6248044011254dea785533e6dc70cc6dd7299468ad17b487d4ee6b787617c35181572863b7763eb7c538293441c1732c08cc644b30e3f15b7af03b236c2624a4a1b9957bb8cc52c69208d855f287defa16d00d1055525e88022ccc4dbea54365d433c551094ca59c2fba254d02db1ab676997dfd2ef176189344cf4a505217e245a2484425e97e617beee89f5d134883edad46f3b516d9e4d0e72db97f4c70955d2deaf9e47380ca7ad9a5be61c85f849676c189f410d52a27b50dc8907421a15057bf9bfb1050101196cfa45d7b0672d3ee2c2545123068006ea5baa0e3b950520e52bee24266674b44cd37915f65bf62b75d52456419daa08045176e3c491e95e07ea098e73e53bf04f6524c35ee1a8409883524ae95ce9d0fd10e4fcd18ce24ff46a55879aec11ee951b97b59a8877e9898022742d45051168c4bcfe1b915be67070db21c88139dc39af969d8f90377f2e411a11442998626b41a558e15d173cf7b75145db12c6364eb18c0d59170644b053a9fab5602d3f243410362ef8405d9b7ede3f637725176d4f817595003626844ff4da8cfa210d706811fafe91a7b300fe3ece87d29919584be7b1baf1111bfa2b9c2bffd31f08a1d54c9e550b226bb6d44578b754256be0d22ad8eb0ca131be38d5551e567355ad327c10316013b927c511b4be8ad85241cd470ed7e9825f626911647fea0ab0843da9d51feb5a83af220808e8b843f6867afb80e0a508625dbf8815c8e3a83ef35b5d54344d778a993267e005e7d6af6e8aa32a4a7fe885ac1cc58b1da42e1941b2ec263838ca3f6b59e9d60c8be893ad904d5b1e16d9a4bb3027acb8d84c94fe1bb0da64e22507beddbb928088ef1768b3fce379d87e6e51c3fc50edea386d28c612322eb0cea589409354bb4849db69309847ab27281147139bd9e2a36ef67d72f954bd3f638f0a84a0849a2bf47e2ead1737ec09b664ba394be7b50a21473e1d28c90c490d08c947647c32e53cdc2edf68322b2be10d6545b15105a5a5edd3ab6a5ed05eec6cc20e7925f6b8c899aa95ca3b6c2abb51c5dc77e3815fe9679ffe8b0a2706b211f52265cb3260bf36440c81e6d34dd3c17958bdda148bb9574da8343638dcd9870202adb0a0784a9b0e5575d9fcfc9a8cf944aa817178d5b4e2917d8c18912ce7c728b64724d6291867a01f4efbb3bf517ece84e0e2a5c7747eea6fe14ba533feafaa685ac35fbf7d76f8bfbcba283a4fe6c446c12c9e50b36ae2d8ca60e440db9cb27f36e41b2308b659230f9ee778e9f3d6fcef9c206d124ca6f659ba541b9c0e6d81a91fd4dc7091f6a28ffec69982684f259e0fc55e85071a5d103f24c3ad0a421f3300704b4718224b7d0048c1257cceafeb168a2253e9370ae98519267c43771b5f25fabb0e62aa74a20a30a393713f50f8237628d0ef2f4c25e85dd42717bb503bc69d37da42e74b9d4a1acc624e96b7e4cc10af7e3a7098f7a6d6a4b126a5736573f1eb1086df2525f507841ae9a8f256ab5e3624503800eb34d5accdb4f29c09d735cbb502fc583438624ce4156a36d5add712ebcd9788682552a58640db44b2dc51dbec7bcfafccfb5f272045501688f44496f33e948d11b3d23f9fa3fbfaa77d6e6593c6dacc02d6b72e4ee920a86e4b178b6b5f23a6c29a4cf32d1059100595280a7ae5be30bcf6734bdba23330c5eda7b724d73384545e391aa3bfe00b05c376764a5cb484b6214aef8613b96f6adadaf25ec399e3de2b6b981a3dc91fa334572c171df348e6f51b6cceaeca6e369548c658ca94871ea46bb6e1a405bfe7583f8dad3b417e5576951f631ffa96682096262207e424efd815b4afb971ebb660df00a1910367a04e7a5989102485080ed566caec208eed1d9a3e6a67183a458e98baa4255b7e3c173bb9771fc4a1ae4b978ffc3f516fc9e8fb250e23a6f6e3444549f4fad2c6afae389ecaaa7b5ab6fc9fbe95425498f62fa718f125c99c5783c3f802fb56e2cab97a91c530560ff05ced13dd64014ca30aa251233b6cbdc466a7f734c6fcfe88d4341bc8ec177fe0cc8a43862cceec1120c77d494a9df56ddc2ab20a0f352d7047b790f3fc6f2f0d48e51525d3906f297c6d889c668f005ac64dc8e9ecc88ce3a65f07f2d347a68adb5ed2529cb5c08c50196b06ee20c53bc6860ceddbcfe05f40ae9554d22062bab493712dc670457456d6ddd4ca1dcb0ddfbe728626717607045d301265ec9c574632fc569ff11fc28dc232d831db56caa566efa523c265c7cc159047bb150edaf89ff8e9df329dac099717538ac0c46cb7db2bf014df00591b2f05d812d0634fc56b89c5f24af53289a18a12a741a8e870e6b93b088f458c000c33bfde87d7eb4f9699ae03f61df9b0bcbf95d75d08bc2f721fc558ee9de9f24ff17cd97995c76852da7cc0fa26512cc093289fc08423b6a0afc8c5f6f8bb113405dfeec29342c347c5c259f25540d93ce2b808f1ff04dc8601efc8ce461df8a44e8f5159037999ae8f058319caff695c1f370e792963789f62564b52deb563d6971d313e6b21d0b28e0ef538a8db32fc5c09c760b691c4401348b410e05f650473e7cb438733b0a255e3c5adf5299c39a90367e2bb00394d496a4bdac0954c5912e7efd85a89daa399dae43b893b28fda0731d9641c1ba669e8eb0fd32fce805ddf4f20a25998b7d2b623065f6394df5836466d1d06483922dee05908dc203aef1897b29a157bc161ca76f748f8f61ee4cfb3eaccbaacab62073ac917731828edc9ae5aa61c1aa119485d65bab23164d5685aa8a0d6485be6e82a203a34828b05a380ae06641cc26368ac17f1c7c8f34f46c2d2a93467560bc0598d867fac832170aebacc5b79153012168cfd6018761b7c37421f9a16eb9b7f1f17b9e6742deefc73f04533f0815c6dec8d9aaae90fb26fc88e8a1a4fb37d7fef98b6eeb5a7795e3a1fc967ada8315825b93d212dad44e408313bc4d834ec1f639ba2d539747ea7a1b59363c21fa237d61bcfed08ab7553cb6cc90c6add242881047af915db2e3ec47dfa898471b693678d536585bf7ea7840f8c22abe65bdebd0fd6f4e64c7c48b4fde6af0281c6a5503a13ec3650afd17bb5d723a3574e8b720644123b62d401e45ceb986e6dc2597b0c8103f8c38543eca0d8bf3d447de7ef3c85b5ac11f4501e3f4084c7155c955f40329194064292681c119ec3fbd12459507901da966bc7638615c8392032e6f4afcceee1967c50b06d1e90d7bfba7f98040b08edf56dc55cbe8a4b6b845bab42e870c26a0a0fe6ad6cf01dd61a246aaba054d2d024384d1f972dcc149d3e3a4067a91478cbbac4386a64af6325915506e0a2dfc2e0975e82d509936636ab3675429e42781cfef9fcbccd715a920e37bea036b07c61c3d3b206a20eb6961bf08b823aa400eafda06ad0155e15ee520cc234ea4828f4c06195c8fb30ba7139e0e34ee069b27aa3d9b9f06ffd1ecdcc3b1929824b7372dc2679073d06d9316b85490c70944a99aad072cee84db3eed5dff3b2beb295dbbe825ee2e7a71b3745cdf5fb08541acad7549f9627812d6082a080b8d0bf5641c30f4fa425437d87019c786d93fe880b6f11b6cab7205ad91e94152459ac9a279daa5f5c67c34e74105ae05e03635dafc3050bd30b124f4402dfbb7d0b900229d33d8d61702426c9aea05a677a51101227f09a6537dcdac4c2f874e340e53d0ec14a2de898a8d6c00627edf6d9dd754bb70dcc8a2bda20fc7cab25e09928d93c0f370483acdc42588670db77abcaea944efce45c5810ff1bd81328a0a77384b960abe2012f7d53f4a84756372d1f4c324bcd0142aff5f53d72b3096177e1d69cef5230abccdce4e4ea375bdb8ff3184b426d694b6bebda4ec9e413ea80ead3ca236e47fe5c881aee089f859371df155a4295b3c29cf65cf17b169f0bf4b8e1720fd931adb855797b87b5014f7c4f937314dc4f8fcf481778e1120ce7ab36273a18494c6cae7fa1f31df455a3e0abd4730de58eed2710e875dc9bf467e97df944d17e3d5598419d5842ef0f59b70da946c9cbae5d424946127e2ead7bb6dce8413b53cb197931d6d21fa611791a4a1b20331bac2ac75a9dd09c45703e906afd7190d71d19856a89c86e518dd4aa239c4b1e49813d2e637a2cab8238144c037daa44470b6c5a0c5759cfe617e9a0023aa75f0b9592e3f9e300e79216b78f93b86a18eb2cec9f8d25ab6ccc5f892867ea85c5d81ceb474b289f075a331be41190307af23cfd2dad75cf2ca0ad2e9d5068e735880a06f4f375916f381a36fe11d47660853fa5ac2f116ab13a99df500f727f12cb040368904c9e5e15d70468dee0e900c9651b80870952ac0b2bf4aecaee5ae2ab71bdcd82c066fb44eefe4a7ce79d33e4e56f6736d0aaf64fef1ec1e66836392c3bdefdd271fc62ed4bc920138060e134871d140cbb3dfe73d479b00c50e86ca35fcf04a22ac49bda42581eeddb11c63415aafd90a2510f280805aaefaac68da0523a95772fb4992a088bba51b79be899066553f7805fa1c4661c27e51d5492a1c491b40f93656f0543d9ea304b2617307229c91fb6bd38a1833b21fb6d1c3ac03e5057af3de05d2c21be70b7a8b89fbcc612be0cce1e43afc9683abb3244ee117e53c6c77bcb5e84d4429ca323c2921f225158f406ca7c9e2dcfaa524c408f24a8d3726e4eb7b5919dec7ad8d7999c8599aafb61fba7db6f99be0a3f8e919f630a062d6fd8184f663e7ea3548b45529e0fcf17940a8258d0476d09c606e4c0ff330348171672e9f463398dd0d1e9c2758a672b9357a292652a54bc32932d8f2a1ea6fb9505c1e0cf2a215e2eb34049b2d7f0adbb77d7fde0c4a7c78f27a23b8f220817d1da60474f47a8e004ebf23ed9a5a1bd0df13ffae9b4f9b8c631b4ff869452e73e19ed211e5a43870232a2863bcdfff8c897923024ed4241e9fcaeb8d46036ba821cdff3384c1907298a6882091744af5f4c9838dbb5d511f26b9af2ebc3fcff43966ef759e6d65f5f6da99410d296f6c7c719b15019b90967494b2f7e7c829bc01a01cd037734a4fa0a4ff37bb3360382d3ceefbf692d54a12010967ba0f6770bf87dc8870e99d13ee1309f6683b39ffe5ca51073c563940d0de0289f64f60498a6e733ef196b3e85afd43fbe46cd0c3d8633809a1b3cca054ab88eab101795246a3f11753f1fdfd7ce6961cfd14433285f60c86b50d058dd4f6a1a2d005cd1f3c580a2251915ffdeb32786c47aba9bcb13dfabe774461675f16c37a1f3bb04f1e78a1546905a3509b04091f3cb77cd5957441e96785e9f15de90f8cdb441183f157a53c139241af80afe142c0005c3681251b55ef08f72b44540001a7b6f109531bc58d582d0d53eb486d60ad865b0f224320e18de0fa95d7fdb8625cf1f5e2ec421ac467b7e1678a77ce28376d10ede50476ee2ef0793ed497135699930599133da20efcdf14f2cb7e68dcaec151603b5d704b8570c31a4961ae324a1d885a2be1d1804a0ca3eed4b6f49e7252f628507a7b7a0dcfa3ccc35dd87b1dad06164f3e5026acdeea6fc3cc5f550a018e501372853f2398003368376af0bdfc43dcdf8d5aabf06e1733f5d6bd3098704d3bc24fc46016c3f7ea3c77a3e0ba991b4b03676a260191c8703c31a93cb0f505e02083506b38ea3bab3e16019dc453a5043d1c9ac6ea7967574f84a68084dcac4b9c877cbf7bfd10c7ef6ac2a4ff1c87be3cb6b25cab3b9284dd974e745d30fed3b99db803331bd9c2529ee85c160264b084c17a649d7f3961dda7827f54e2517d00efcde59e207e32242218d282ff74677d66e3e512378171da63b120ce5428a7d212913bbcb211f8a88e2796e76a58ec8b242ed3ec1a5ec6ea07d30ec7ebe83243766c69151f21a32b7bfba55cffbc249e49e838b52124dbe2616d655f46e7e3f40086ccfd00c086fa19072c2ac1a8b838ee8113f9fa2ede6d0ce0b23fa934715cff709dd35b6d6180bfe3b502950450bbe1d0cc3f54912763c42c0f8dfd9ab4462ecbd68d502f45dbca96df0214b82a8335e511413b02dbf3a7d5920037fd7e3173ce5c3bd5e8429d6808b53bfab315049440e6510491cb3408e583c8d179e49bba63fae877b14dc450ecad969b156f26e86fa1d78b980206baafffe4e5c281c746923c49f2418a7e8e313f3130bb3aef947a48f7ff2052d8d35d1dd1ff6b916c4ccd3092f3f390bec26aa953eeccc4471dd7be88f34c508048c5c6475c03807128a41e9c7b9e52c69207800514ce46121ae0388da2dcb21eb4594303fb8448898e53631a156e7d22c7a875e97059a8e18808cb4e5b8e75fc858d4e1e822c2beb243834a33566aa122f3a55ddd2b3fd1f465f4f129e468f2957ec795c4a5f6fc81759f75a27aaad150d64c3c758e3749f18d61de659c6ac8fd8ff6cbcc1e6d1b8edfabd5a36fe31f9e33c195cb5a8c62b404e406e360632632dc250007fb3d080282118c1a1e637fe3cef64be2207245ecdf692862ff677f5c4f4c798bab2a2c4450197c3fd269641ff37d51ce5a1c05a7350fcce787fe25ca77d9addedf25481cc504bbde5c255e32afd639b921893fa322e3d68c03f86ea335a559668970cce50c816e092ad221cbf94f6109a5c11731009a95bb9b5743e8de0f89063906fe89cc43447ca7903b724e8f68c25e9657fe937bad3dbd7cfca7a107e1077d32c7709cfa50a5c0361744d9ad6b118ae3e7e4e653e06af0e5ed0afc5464caa69f3a46a929efa508488f0ca69aac8f3f9332657bd18423d067f1024d72d18d0d240dc6592e0e244bf64924456e7e9c4989b0fe3580c8d24c7468e37a642833175e43e758f248cf3a81d20b6363910f6047bb03b727d3cd09ffae7752c18130ac85b561a7c7c88afa430f5b55e9c6a320052d872f8532f3fdc0036866135eb4b7aab85e2c9d652ac5752bbad59cbb4045d417726347ef6c1aaff2f3e3fb215792dbc2f51963f6cc611e1b14a98c3f4e28858ecb75b0992596f7f547c7f9c7aa691e42256166744efaebdda2155b156403ec5867e891c1cd09f2377b805f523f418557a2181ed7eae2b3583e29f039994a9830ab37a464171f4805e6b14e59bf418b64e027e4e1c24e8f393d52c0c32c0777ebbf9b10af6863b25bfe88062cdcf755ed6377f35de8d5ee274952aaf32732ec662277ae39e38cf7c4cfa04fd925100fc2599055d9c12e34f405dcd6f838e6c6ebd4be3f51510b4e74085c96bd8a3bd7df618548ea0e9082611eb2d3c2cba4289379b72ce6e9044b3acac838ee6e49677ac3322c5558be58b04c3267fbac2c5a926d9c96cee47faab56bba17a28c656af591a2a4e14df05869d9027b452b8a0f519fa33717fd2a59edf52ae4b7ad7ec77619c742ccd1bc8ee19f65f18c9c221ed1f52e8d5efb99c8cfa1ba1d0457848058a63f1973ce3714a2386723c8380f42d3b6fcb8f97ceb565b169305cf40e0dec11e497345c436de94d4529781a67fa31daaa7ce09569ee4b51ac892bfd10aa2ffa8eb56a7950734fe8e98aa857a4ba1aeee84de41e8d6064e8c10210785e55b9854f71e03c782e6ad6690f8532dd4f53fa037d7d5bd283194f3ebfecc42e8896d56bd9d4eb74924c3de31cd275b74085875dfe1fb562202cec243a81152a01d719cb45cc02f3ee84f9097cabaa5b2eb23837d6a2ccac76bad8478d79f5ca6f028ebe3de81c4c7f1242ba0b098e1db62ff958ba7d136d30db4303a5d57cb4232e00185087fe5b1b65df0564d76d1245a34f5e00b13fbdeb8bbd500595387db787bbd820134ce7eec680d320471aa10ce6f686831f438df803dc679e30882cb1a49f19ca601d8c7e64ca7fea8795876bd7208457f4cbeec74074e370db70daf6155cf07d2f07728f93616959db78a5e6d2ce137a81af7bc344d190e494a7ddb7ee3164c8d87e0eab4f563ff92ea84a47295dbc0a08903dec5e1ea2ec9bc974f58a03ae372887b7780d8e7674c8833f044fe326002d039080c1ec9e046498db6e802aeae41fbf44d7c35fce5372f0288514c57a532895113f9423cb84d9c7e58c5dc1711225e17c181020e3e52398f74f1f8d21a76de7711445eb24bed3eef743b2ed9d83bde06ed15f15b3a3d2b268ae30a23bb49339b0bdd1d4d30a02574ad5b7913bb81c14211a3366fffdfc0f5b965f8fe1b9fc93176425bf459430e9207b24321505fa5c73c79783b10974e1cd9cda5eea1677c4dc33015dbdfeb6c3232518839e0048342d9994fb4b3837fecd096d51e761c3e94789c29756f623a9ae1f21d8657a7d234f171329a96c318e730a63506055a9c08ab662b451492d4f7c97e30ad6901ece971badb8d5ccfaa51288d8a47f2c38ef03154a2077f4e1086c764e7d27af253db31699b936aafe82a5e66c6940ba401f5f9d26560e3a83d49e8b661449e94df06c5d09056a8e11c9d65dcffdd3c52a81f530177f7d234e7b0b85361b93eba516407f7cd567b50567ee5048232ea5843d3a46429786dfe69743980f951ed2208e6a623edad9c0146de78b62009178eb0b41965459f94b90f9634b4e0101a2b68b67e6a058734f350ecdb58b77a9248263f62034db74275d665461101e21b795555c3fef9b5e7d2154a9180afabbfe3a12cc59e44bd2ea348a4799d9410ea5e41b48638fd727f22353c09a7404767a019ff7bd92faf543240253e0cc662329428055873abea5cc21cca70ac42ca395e0c19071ee17a13524384852496ced604b12031f40eaff0ab1ac4073b291a1bacfc1ef9365f624b0588976ba3461170c35fe8aefb8627566f989e0a7e5ba73ca4cb43f43cd40c523741bdfeb6b267b784c6e19b61042257cc99cbac618eb0099c1c6c44756d8507ecc25927f99bfc4e176ac505b344e6367e3ef55058b196dfd0cf18581d9c3bfc339b2f360ff7c05c7bc95163bce7e8c94fe42185f1c430e57a3a0cf52cde0242af2df9dc72cb3d6e44b2e21278fbb33ae208c2b6007172541efc49f9d443f780f2d4adcb6bfabb1f845c8728432966fc5ef8b0a75fc60192a3b982d710abdac542cb08663966e2f84a320778fae1073b9a968a8d4f9ef84780cb1ec2fc5a6fb45561cdb005107a33dabc622c539ddf3843438ae4ee3fd0d67fbf31360560882f569215d6724df22598b6ab812bb4ec0bc27ac5b8420b4d3adadd0ef01538e4a57ed3bb8ded09b24073511fae17fd92567e8609450fa4c35f7d58cdb42c2e0202a5ac196dde7f97635ba5737ae4d1b873445567b6d3d960471f02e84e2364f1c22b0ad3e0a47ed81720ed598ad16da3678c6afd60650f15f0eb5ee06888a7b7580659a092f065362c52978973e2beedba958da3e511464abefca34f955fac024ddabc1efb78ac8de33f37bc4cf39ff684f06b5a32c90b0bf819ed4d80c4265e05a9398b20a8e4e016b61123bd3d8ba5a7af9471addec6b7ea68c3b154f310c6ce858e937a2e04020ad26b4e2ec0a2b8b690b5d5bc077433319a6472df18a940a062f43c0f68e64b3853823d0f96b2c8ab9b812738fecdb53a0ff0dbe8c18b990681c0b7ebe936cfc1d9901a557a3a6b5b79f6a3ff7baab0733ed9ba81222b545a1db3af487bd2ded97d8dba772b713a705fb36b454612a2666e52abeb67e67481180c4de9fe59937ee302b11afd17522ef876255e6336f2bf19aabdc01185ff84d7fc0bec68d20c410cb0dcf8af98bbf10c03894376214d5728862477b2473603c3e5cac6efb125f87870dce3c65955aacd8a11f9ccc1b50c14c57e6b5066da3d1037e26dc004433eef0adb505e4cb25eb5e95175f4fcebadfca22c0cd6450f5cb89c4c11d6ccf92a658e825e01f4d1e6ffcac27ae604880170952b578f89e573f1bb1119c1671a101ebb84ce39e85577e379e9b3a6d1a08fb5e3e666e83e3f107cb72f46de678fefbdef52459a3e6f3c1cf268190f3d0db104cba0fe30c2e7f8643e6048701dcb9bb22b7f5096ca9c345e3809f633c14fd1e03ba2112ccc81c529af04beea621a7420972000a17fabb7a058748a2f3e7fd9bade3d90236fcfba4fe8a478ca8a888b56bcf6ccbf18253da57a4fc5c702562143c3a45349db0bd679e55e46c5c4bb1c891dca0bf3547ba7103886efd96aada2e61a5dff7d7124d2d1a7a07ed28aa66fff79e2522cd7579ca05fb59eaa949942afb14bdb2c65f1ef22418a2e1edb931f5ef3cde83fa76e130f5d359a0d4885cf7ef0b5c7e4b5099310245e8f844a66a64a8cec2f3ffe5a1ad07b200d4662cfa109b67113ea33e4379a09bb13901dc46e9f89e3c91722efc85d824d2235c9900808a37cc9069cc1c30a79f2c1b9447eee92db57662417587c07738b6287002cdd3d9b4363e874f5a58f8875edd62c7bd7eb22e7fb9e6aae1923f3fab4a5a9e6e4cf2650e35c780832d77c3c405efcbbc40233b824fe5aa07379cd5b09373044b26735b4d2d77584cdb63f9c8b8b5bda40395269a08bb556698aa1d953432ec9e32919233b86956a2db6718e4ea7c543d53afeb08558ae160a0874489d21594a1104e5fe298c8a61287e91475b90611564f65e08e66587e512e1c1530e232fa323e948b51953ea4b5f4c91d4c7b98e740fac7be141a97aa7ce9276534aa84ee2991c46b7e7b17f4ec6495689d9d2cda462bb92f3da4c101f9822cfa95ec47f982d66297d10b1870aef9aa0be50e4c70ca171e5aee6b9495bb19746d454548a013b6a43ac8a1591d70a8943ade54695ff753494145c837ddbe6d76dc7297aa36e26cd1aab47bfbef07526330e68f38763b310815c7b26f33c4c0b770feca9d61c9e7954937d4632ff90d02a94ff95660aab2fcfd13959899cc5e0ffc4d5f475dc9cde57513c6773b80ba92c67aa53d5d063149c46668fe6b3cd1d8f45010e5dfd6e5ae5d4c54ebd58bb413e8d3fb75dff619357594c416604555ed1615a6c31937289ee27babe769f4f5496f6b4a222a71dff88ddba9254e16beb5c729ee822a5daf5e1f9d0347067a8aaaa1595b6dbb6962de0d53f3766b1a289c3d972ea663796ae5967993747d84d632a1b241aac9b704f9a0aeac03b07d143bf98ce7624a77141fd79194d685ca2205c8dd974f48b921fff50025cc1e1ad43b133ee70025978c3c6bb9fbd16d872c1d05921db8636ebfe9f0ff8d1b322f5545a5dc4855d2e21cf0156a3a794fcf22f2e75fca05af2ca204a574a51c3e5218d10bff6953febeeae0657a4e80f8197c395627630da1d0606b9ad2b87f42e628dfc0760bd05483a8d6817bd1691682f4c77078c3fbe18e96c95128ee4c793e0b6425ab5823c184201ccf4a2737668b0e12c69a53d48ddacbda4e162203ccd8c645a0b3a0e17c7854beebe5ec45be928e89ae81310a49db118d284ce2356d7088c31aa1f24be80126054152a18550922d3221e872dabf7e97764915a6aa014998e788164e1c50ed752256bdeab25ab8959c460a0fa9dbf7db7a405754f140622b4f0e768c91c1d0824256b021ab1d2c54528d5861bad593068b0f0fed2e4e902dfc79e512779271a7f1005a97bf4b3c8d6750b81f49bb7a3b317e25cc66c7cbfde2ff15053119e722e4047e8282f2e0bc9f16819dace37c93890c30247900e9d7f33b83fc914d19558a503c85e58f80ac62218ca558cf8c1c17efcb77e009819779240b720ada3fae7f2188de35988fee2cc3b60d0279c91ac9dcf10a6ba5e892b99420ece8737f9f1210a825e445d98070a5c96676f1727e9db13ac1de89be4807f441463a3679844de1834a9f7fa627686afe0f5c4ab9cf4fec3e183db6bbf268fc5fc24a68502d6534cfe5ff212dff3c6356487bbdd49afd085ccd501e81461d45aed75e4b242c8477f81004b2eded4e01a608579b8aba133a865fb65856390e15afa6387a25eb7906faf1d9727ad2921dcac3b496dea4aff16808ebeaf4cd1018329808e76290db326abd067f73a1595561d4c2718eaa002c4a6f0946321a89d9ca6258dddbb06d44e96c1ca030e6da2bf7a9cd0a7dccedbcf19eb53a142fae938d8feba8e7310beece0ecc1a1784737858dc06417bc1aa104143093465a180c867716131a667534eb7cf16ed3496c24a1bc3db0ed646575a45f529e36d4964c9157b09fc6e1f25e8f6c553e0028eed203e013d5afd09415ca56da2158423f640a4191f0e27f21e018c4ee73c0375d16d149364a7e4b1f41ea54d9aee4d6e98f1c98f0ba1811fc66b1f35464cfe7ca760557304d8f56298a023a364e48ecc2cfa1d380981ef153285e5f56f51f43360e701b69bf0a7e3c3328ec3add811eb26351a4b1a9757cb0d48404bcaa9e629e4ae19d6157ef739a947efede85ea92e213dfc956df5b1e986126362ea747536c7bcdc5297cac72873798effd534cb77796851f3415a84511ae826a3d5fe6d9023e1058bfac30b7faeb098ce2432464a4218f098624513983e65ad8101783ee410b6b02483ae8b407d08882b9e1bd02aac7f215afa2cfc86f3fc4c6859df712cdaa92635ac4eddef500f44ab1c6cc73c589ffdfab04c7ef53149b9ad495b3495e5e922bd3007f347e0f0eeea88a255e03da7cd07537fa02067bcfee814b8a63138b3bdeaab35bea983c8b647ef75d93e5e852e21b24421331abb56041fd83836c85af1d53ebc5b1492f6e489249cf7ec5c89584ae351a0ae939300c72ee2118d78d7f4b123b758749477d457dc08cc1f3db58541ad4dec349c685521e8cf5e593becff5a571f8f00afcaefaafdaad27ae88639566a6ad95228248ade020c0fb102a6e3efa9e4486d3b323f100b05a827fe0b2486425f241cbff17425f5e4ce52e945cfff573bb540c7b3af416ef85d0e6fa565c888aff5c19f7b1269e3b14afa6f3f54f30d9234c7a3c35cec8fa0c19bb92b9d815626774f46a710778c4e0994d9d5bd13c5d315d6484bee0e73ceff2e09a92eee0b54639c0126fc15b69c261f21f77ece22f9ce2e0a35f68b3f30c6386bf385dc682b702b5d615fbff7b5282641994c755bd3ae910e39ef134f5f306d462e4253bb09a905d29b2b662c59b3f3cd561e3068e0fb49924cd6dc12d04fd60c0d5c7b22bb0c7f3b28d26855132f60a23b58f983b73ce950393463d7f51b71d3e175425b7377bfdd32127a0b1aa8ee8980f52a6de3c9f2cbc7b88893b688add3e810699c08961873e98b0a90f0c2ec829014c2de2183961ab730db520c77a60932a52b191ee5488a13fd1bf30f1970055a47683784346bac553f35aec2325a179bc2e430e1a02d3a0e707707b862fb54288f8e3c888cf758b7d2103c9e3b40bf1abb19d065e225af4944e6099d436e0f0e45e44e461be5668301a7593f830c963b437ec9b72ab2331c7919c1aad860bccad6b9c5d2da7212551512cb1a26ce9ab376f93b8bf5bac5c937feb55c322305e612a33ab2045dcda08ef9cfc0a2768f7d5fa873396070da1d292c0982cca6ee9f4ce97dbd139ac53e4c97a38018f947d986c80a2ccd53a5f6751bc96c12d6912f252d2099187371f1277e5ed9648a72aeb2dd8611dd6005190fd42391ed6971b227e98b95dff9ffb2bb2e3c5bdce852121f9f588673cb42335d0e31ce729c7d522c789ba4599f95cc20bfb7d40819fd0cc7aa13df53402f1d91249a173cef770d2953d8f33ffceb64cb4e5485be647094d037894f254f2d9ffd2e2d3e495d894754728389aeb659d7477e96755d08050fb84b5059795ef60bcdd0bd830afa3de43a4903a4c359845ea64cc8ae375df0cd21f14e53fb402352cfaa354b17b30f88075e64bb00fc91a674c59141c28e8c5ab1ad38d64fc7d14247d8be20eb61c9f77af1378afa0da8d6942cd038551395a1da8d5496b274846685fe477ad7b288a774ceae4d1a2ebcc43d45a94db63933aeb76ee3d8b402689ceeeda5f7b6fd39873c999c36cb757f9ed3e9c3a35b6be7ec3456b1e27442f920b37825c31641ec023ee933100f5e15e7813acacce1331e10cb5a717e2afc0478a867c7c2212d4856c36eb10d2ee453ac0e85b42cf89bafc8473075ac1a6ebb7a21695fa68826cefa2814ba740c70207a7d4180413836616da54ce0b2c2bd011546da70a792afd99dd25829315b0e99e552bc5d8414ad39ea180c5cbdf59c031cfb301c3c244067a07a8720cf8d9626a8d6de518456ec72917dff742c94885ab43dcaa67e06fa8ac48b5da31f2fc22a9cbc205686e5729d8375d3b5b84bbc79ab892cf228174fc6f0932673b89037ccebad9f1145b827fe3fa4b74d83e2f4a14f8821165c4d6946aa566e39f16eb29c0ede65991817983d5715b3e93c119df5492f766892c65c14c94b967b072149901a8da3f3d0677b749256565125582ad5b161810b5e3b88bbb8523bf1ac76003d57cf62c30be8c13a593c27097c814d5f5db00ac7731dd1d12b6ca679c624cfbdf0e5789e9241d09da5c950a8906c061770bbdd6515b578ccce86c2793958a3fd10b0e60932a929d1d1721b39c595860ee1806823e17349fd938738e27521da58f0e7897531a7326cf82c01aab231f8e9eb27280a3dfd1f634516d5501a4bed8ded3a0f5d0ed2fef386d5b5a3db3e3832bf35be1b1fe566698c65840d2292c8fba35b300801cabb2f56384f07ad97d9ad0b41192935c5a531dc8468d65042b035fdf1d850289a52ae47267b60b8f964c2aca6b46413bc19b59a5962afa770aa61d9515acfb74438d983c52496463cf2a31705ebebe7816093c0de138ee96a64a16770732e5428beeda5981f49a3acf6b7fe0e403ba4c53f48a746bcf785d9beaf31d47707bd196064a0602ae9eaaf516405fc857d9f549578eea06fb199d04de6876d386957ca02238ba466f5d015aaf6338186b0a2e08724ebe9bab08caa7eab4a70a04cbfa7eac56f17865a577cf264b8f466628f9fbe955467643598003c743976eda4d97fd35a6c9b4f0ec16a49bb092c7255262bb6afb3635b665b2679c1acec10dfab1bb2a13612c335927c132f1e581acf4fe8708c5e6a170273d6a380a66478fd026624fb04b2e2d659a3e8a59c5a2998aab0fca94826abe7d14e11d6f5e3b44f21faf88a8b4d9feb8a4179066097878d042f185c01a924ae386bfce77db3f2eba2fd7497ba48392f19c1532b53177bc7435b8e6689b86a3686462be52cab102ba8c4d9bc2c8c9186f9a100eac47ecf9845eb3a73570a71183d5f5abc70107127c5176cc348c1eb5892364b1a08f2cbf59170a485518e45f0101e2fb7e58538e1e2647e304d3d860219ac85b0af3db5be2657a26ae076a14d4b1299253928f94f9a98fc98269d1b0f14477da5112136b5dd9c6d2a9d2f3118c9d0797c17f78a50523e8e3ba0841a349ff3a7ca9759e2a57901c0e2451aef1ae9a4648851d423a06a42932a17c925fe882ad9200b607df040636a0e840d83245bc915d39d96d4f4a7bf2611ca6f107102ece3b31d7a397b062b5ee69f44fee59af773301dccb0cf813faba4961f7139d1ea96a60cba09dbc64f0da56094866520ccde0b12a81b44ac86af658435cb2c3b7f416cc4433cfc914f70a06c03c63134aa97a3d36ef616c0d906cd731042fea8fe38642f467627ecd6113f5225d468e3ffffded050a914941b357128b27a4f810f7379563ddb1305d96543df251c1ae1cd17a38e90dd625727be6d072e12cf9fa146a7b4affe25cd6d1adc6f4a4736273bd2d602cf71366236541787b915d86c4037ef8eb4f9f9288e3e90215119ad3b4b14ef1d19ab84f04a63373603697a60944d33aaef65add077a856174e1f7ed02b4981103b9de948e141ab6672be98a6f17f2c909b44bfbd3e196a61b939d2c37cef6bea4d43d894f836ce40098333fd8903edd86ca9c4515137b0db992de6dd3cc270f4219edd831f1c3eefeac4d8756548bfa7dcd10533cdde678ada09ab3b87fe01deac8492dea76472e6fca87f855244af98f3b4a08f3820f7e9d813bbfda89036e13e13fe0a4e940876b69fa33682e42a950e217524e2166e686bdc081cad6637e9d01b8a5fa2837d15cc869687823516f145573fa2c1c5942bd40a91fbf85b73f63bd818796d26084f8fedb3dcc5e995bc22bea8b798d99bce80ff2c7db67e7d76eb525ef9cc15301cd31864c3054802f5d9521235269d22817ce9ab02e54e583f00c6844521e3c5c4c34deafab92309e07ed9504e17e7fe226926459691c7814416b86788eaf68092fa4c45fccb2a2c265790169166df4a21f96e591e582e7a0263de3110d4d29a7fc68954fb6f3b0ab4fdfb0adb77f6cca6766ff95c85d47beb3dce4e4d5af16d89fe99d24398e058d6d0f88c3bf669a3da8c2fd55235990bad28a480505f8496fcd69092eae6d1a060d0b3c2457ec5fc5af7018e6f4b1c7ae072b71ef2f104f3cd2f9d09a5a08bd1425c450435bed1b5cea2c3f675b9ed525ed83ecd54b26afd0fd5cac05d622d786d349e54c45f13baca67cc4a9d8e0e4df8c75b313f6a5fa80f5b24a1bd3e6ad8eefd03be541e9162e76a99a3a231a856ce88e35663c7ef0fc61cf6d2b6f2285fcdc37902878c649b44226a913cd2fbfb484dd0519deab2171089fcc81d2bed06fba6acbe170c9f2daf95ec973b7e4de26cba05b0d33a3cba8436477885f3db7d90a780a398af21c56729b1caaa70d8818d2d82c9347850c5211827fc9c196c6db9f9da1152aa85554152adb890541562ec987a3d758106f93bdc04b68f8c92af60c242cefe15b2e3e918316c2e7943009745c62c8a86a1a0fb5e44f41e7356a6d15536348f2082c7d6f9ff78c92adc55f54316f7f6e83f914dd8ff70e3d88edf8b27a9a0969058f6e1b6e7b3340a5ce4cd0cc49c3f36fae3e6c9bba513fa3df37e91a21abec91e89e004c99cbc9d1d19cd96d56d897b7d2016643be577a2a9a7bdd99e6d8e2c97462fa468659ce0ed6d2cbc91209bf85b7d30f0b9808f331523830c90f65047d53800d5b37a4a2459deec9624f37209e0f2ea0b7156bbb146958f2a9295a59fed51e577b8fa6d37de9cc557353811bd996881415b598d882f8e8a62622336ec76550bc39142f490542893cb89cac0c9115f19c0b2fef9ecdccece9b25755eb3d8e1eac4cfb158767497fb9aca783757ddf3b5f9be48ba54c620f365e30864ec441b7674924be75bf70df27443f06b2c9e269fbce6587e73622fd0ef2be5d464f5dbcf2f42839895b31d99d34a1c917da3a34f50c93590eab8dc579f957eeac2f8e54160eff1722bdf19108a626a2f4cf409a05e8333e7f571da028eef0b6207cfa1eb73c89a66385caf45773e7eedc6fea8b6df9fa039a9665bf3e0dd7e0e768a0078b6aee01c84cf1f3de5adaa58851408499277c5dc2e03f25119f9ab131b08041cb8fa9b87824c8aeaa077c3455664adc9e2556aedcee1ca974f665f4e69c436741c8474a2276bf533e644ecf17f529b9fab587e17de0d51b546d7d4631c0902d74cb758cbbc01e181475d7ef460222081129d111c267d008841a9d94322ad135dea115d882b5d84992cd8a626f71c8a2c4835943f54ba87fb7fbcc5a51db79fd54a7a91b52179306a33185394e8061fc15dc0cd2a45f8e8b3bda17698a807c3f85a1d3d2f9814b6d9c6c6088f27923d6de1ac176b45c7f7a64706dd99a4f710810104ca3538bbad7563cb567f6bdac025d43adc9533348791c204abfecc51631cf6e76f8461481582d537992a0dd248f0e203972233774a77d975312393be15c16a3f38af60ae7d89f3a31205169600b04e8b7bb21e12861dd8767b6be3e8a7d4f8e50ae28b70b81c71dede07de4b36e0e3f57da78dc02c59a424ac978cb2664523f408cbebb6eeda91e91ef82edf6ae46a9bed9475d0f3b24e6c95c28ab2599af9e3ba5dbd77d97ab9508edd8a52d67352bf0b1fac02583ec2a1d9a2434884f8051bb4480ac792eb1c0e01ed5b8cef3d5d13b22cca8a8deab8f09f02a743de45c019e3d624d7a30dc032ef86910b6d6ba884060d409f3c64e1326355de9a77f50333f6e96b43e5aa7beeff564d4406d4e192fb94a1b63d0986c0a7f943b8d382fd745fd6503be6a874094777bc5a944cb4abf00538955fafd4ef0a0be471ed3e2257a72aa0afce9bf5e39b9f93f09be7743b5569f279b572d0431162e6bce6fac289e57810874c412e2b1544ce4a92f3d1169ae0d14cf5972d3aa920e683ada3a8586363aad1fcfe3d9c47162ad68059ceff26020046b142fc0e0d24c9bdc573da625176ed986416632b9bab2e1a58e8c2f7b6c0e67271177b86f44416e4557c7b08d9cef0ba57c06095f260c3167017cd4e328dbea3c60a97e419dbe6fb8c50ed736749b2f84b9699d50fab3f5bd0ec2c7dbfc8d5a185930e10680199111070d2a5663f55ac84233d7864f1a0225ae8ce2338299d3c4db17287f6c93309b13618ba531edfbc31c60d80cfb250eebfc7181390289efcc69c7139c85ca84e840491f3d0b6d24b59ca8bbdedad027957c0eb9546054b86a7fb353be138a9baeb39e8fd27fad96e9615a876532aa0abc85927ff78ca6c84dcc54d48e0640c3c5249edb4578d8e9d21e9f3865280d8fbd5bb63a89ac7cd13f31fbcb8b6b2604e56d59697c33a3ab052ca7c58b36851a067aaece2581b61ad0c8eba2973e7df7a786013085abefaf3b6dfd4653dec32d4b64dfaea27ad4df70ab33b0f78af77692adb680363b111ec57dc0618b4a1b6cb3767e188d29c529a19e9f0ed174b2e6941641d1fd6963a0dd6aeb5242a9257714c9a49659ae4ad1ada3e7dec32791a5b94d7b9449a0c24335ed94ddf46c9c1e7f7b3a3b9c05f579cbfa613d5337366bfeda8762c950bb8e65e32a4d6e29e6b97973eb570aa684902c5c6f4a84360683828c6ae0169aa36d7ea7ed09cc35e1976f463c618223032dc031f8882ddb26df88c92a8f0c5591aae4bbb0540df61af676de63255048a83ae6024a820fd31513b8d4ab470fdd142c35bd023036e934247f52456bcb6edc60116fefeaeb378baa4e285ed2b3da1e86d5c515dba8c779323dc1d05418669b9e84c3ea89c1ee7fc20fffebc4ed47c9ca7139b92127ae8cb79fc9bd97a1255c6a23df8e206e5446577403e87269577dcb641337a2d92b47cc0b03571a66a7acc4009e75879fd4d28fcb44007ddbfc67b4aeea026afa0545fc6a756e487788e390f56d99dafa0d3dc284a7fd33a8b9c350f133aa92460b1ac9bec77c1c1ace67c3f280074e195ce6c264d0ad7f6be97d006e35100cecb63aec36178b59e06dafe0346928bc6a6e3652d37bfa768baddb31c73a410ad91740548be4b041b1720958777b96c4ef399570bd325f54f5ef362ffd47543b0b2fa7a8c29541dfded50bea368e79c8b24b67dca1a858042412fb1d6c64f45563295cd18e4af4e0c85e71ec2230a2739a906348dc4edc71d7c8b9f2a0d9abeb05c55f02e715c2aea87fbe2e1df5e91224e463e8167d007be3fd03921c6e8ceebbe4a6e7c21db3521835352d1a0ebfc5c15978da1abccfc2f9d317dfbcf0da307782101da48805ea99f19cd8d103a46c721b6c027cbad27b2ce101dc270ccab3d75498b3f328b04f1f68d5dc63ce370fff4e564c84a764b92f338dd0e72ec106f2ef5a3e7f00271d84d64235dd870852540a3bc2b5df65b1488b5273d975a7a50ebbafc0a09f9c336ec6625d2223fe6e4b51b4e998f10db60aa784698addcee2ce76bb072c3035aaafa353a568b917da5cbee4cf75b1ad6ba17895232dc4f604944ac869f9c260f0acc45142366731b12476f584f26ea923dd15a874284d8651d184ddc2b259aa9dfa4ff5a44a237b3412e0d24cf5bca224d1e82283ba7d1dc3a5fb80a870a6aa553f2e1562b2bf9be926bf08cb3731f44aeefd264ff7ca571e9047367e914a05ead963e5f1d62166a477556d8a764fccd236d0cf271fd8e84c122accdf36f5ea9b2db11b39c02b6b0a9a71c08564ed82bb25f30b5041dbad1db4592e880ad8d8270adff90e4f58463e9cb426cab070491503a76e00760d464fc2fc025329400fea3427315a7fd1ffa2981697c65904bb4eea138667a86264ceef54b9e9f911573881857e55c090e6597349948df19595a670794cde95b54681a2ba49649dd2c5ad2a8809175a64f693bda5da4a8696f2d40f0f53886b03c5e07eaf34bbbde4416ba261f400bedd848d0641e974d8cedd824a877b73aab51058d0cce3206b53f908906d500ee1181d7c771d360a5c091865e6abf1d34f9765aabc9204d152333f97d1d08ba773ce6a3bf2a35c16832c502fc2e8c074a4487f4e42cd6c3108ab2c10a9e846c48863c2e0163b5f74e2fb5ed2498d7a4a8d006bdd4e936d5c8974448698c75fa73c0e0fbbfb2f9d69baadbc4f1b9cf5c3f283d19f54662e830668ee0ec85eb1ec2e16cde8a3fb11f90646156169cc1f18683ddbf0f859511680740a0c03779b2e0e454693a1a9d1fabf3030fb4de2c36a5b90e45f4b5b74710ac938450f810c8c19f638185e927cec4fca40b5bfc7dd27ea46a76ced220764ce21c2900c728107d132d44250039168164cfe731c8121203165c5cfdf6cb91ed21384856c375694b0cbbd8bbbaef967c028d19aa49488f391b6278da4532d7ca799ba0cbea58926abeb4845ec1b7e54d603837ca24a44628c325b7e5c93d8488a2816ef4cb6d8abf10fc85bfe0f27aec86f30b17a6f36aad6a89d19227b4591c9d91f0b0572108eea2d294831b17d918a8387e11fb3f07bc8f46d30a25af265a663b7585622f1007fa6079461c12c50a46d7e1fa93ac730abbf2f555e593c21c5b9c9acdb6dbbf8e669953bafa99b1dd842871d3cf26e4f66b619f00c3bd478d6759bf262462f175194013d0c5aa7b70d116c22e0ea656b74397b7873f8134de44855a1866906dd9e9604ac5d559b2da77793197c11b8a569c6ea1a9c1bdb57fb3131771ff7ee2f19b30d8022296ee5e7a9ab42546d94b07b7b65a8060b32eb3e9c8995f1067d17faee9ce4855cbd934b174580ff4ab2bf65ddb0783a4fc4cc809f06b4736f86ecfd50dabdfab9fca5a0b92747fe484709a3c4e0656351f3c2e11119a3e5722e086f9674f2d76f8076511c1ab8a6ff17213b22354e27e45a11b7b3400a2f58a166ad6969b19944e5afea6391e6ab1f28db6acfaed49eb15f62d4ca3b93ca4007da395f073d0e68f564c91479911c17b95fcc6237c1608b45025e2573cf25bd2243075a300c9109b8324de36c491230e9d8c5f1194b44bb6ee938f8bd8ede58816fc3708e15b25c64149563bd7893e01c0cb92402725041b4a0662147dab0e533e5cb06f07da8d5ca03f49e93ba8b53fe1af0a09125bc383c8b8e964426c27411205f76fd232308d0a766e8af009850bfcd8e35f0aba822f5c5a808a2a9a806e7fdd8b5c2cc177e4b9e2a05b1caae32c0760557e76db942c6f172efeebbf13d2013efa1a628f76c6c7c69d9adb9c65b5dc86ff5bff7cd3c9dcfc9f8afa48c5c65245356187b35b39c036428304a32700bbc6e5fe4ff17fca5aca94588d1a39c5f50d5e30b18cae166e7a67e76ab2733981a47dd1e0be69413646d146df745824b424b6d7d2c6197773c5da7fe2ec335d797684c5fe1ef51256442f11f9367b385385e2d684c0066fb1d1d00f75dc0da2396f4f876e9272bd99c2f2f84411093ee06bd4108641581d0efe920d2084bdf83ec5cfe3d835d6a20752b4ac545317d3c245851b33d8cd6ea4c95624b361b24a13d6d0853764c5fddc58b352bb86ec6db7be3c1044182a9cc766fc0d3796fdfb8ab392bc336381645cab02d98c906596456ba760f499f5192d0a67db7566b9d60bc11bc87f6b5b63c9a0b6c83fd7187e56cff4159974ba9be1739d68f7ba1ad5caaf7caeccafb6824c91e3a2f3e27635c551a7a50c67a82e97fda5789742c35b9acaf443fdb6d28666de1dcd0d94edfbfa1837b9982aebe11ee36782ad57587c671bc4e88dfbec46f142c85281b2dba5142ca63c1f529597118b156fdc371baf134895ce617c03a8bac9acfec16d36191811ad4fd193c4ff3f9226527f190db5675354ce05cb4b15bfb43cdb30fd1ddf71aa91733cca853d098fdba940605ab6342ea01d060d4392571cfd40dc37ad9f5bd358e5b0429844bd52b068db038182a1c4dc3a80268aae4df661e699c1cebe9e5bd42da2371d50f5b6c6f159911c16451c2d72287e6dad8fcabd4ba0b031b489cbbde2980de4d3eb9aeeda74ff616a55d20baa209d688020a8d0e97a6724d630d662e75ee7628c5b61ae66ea610747d4ea1992abff29d8552fa5c0b7b82125800f1c600471bd73bc33f6e32fc136b297654be6124c359701463763ba0989b6f0c2c72f6b12bfac53f21e54f5278e2d5f70a7708a98fa7f549fef61adf724560b46f7b21445c5e5d231099fb8802a604c152e246ac93105fe57502b93af57623f03c58b5c37fe7b208a6a2d7ee740f45a8e2ebef40b359922d1a844b17417c4749a1291db0a666a2108ec2089550be0c8cbc08022c94aa9e4d6e6839813e2c707bfcb9d1aa2ff4e7bf29a81fbe30279d94b33026e614eb0fba86ba111efccb2c754b35e7d31a2345f1d65779e157a54f11146984ef244f49c3c1dc4566edb775e66d40e603dca8fa5af62d99afe8689ca645a0d48e8a9e205d58f17dc7ccb6cda41b04519dbc7061448cd05f70c262cc7c334e57b69d07f6761466b731571da5966687b474de1c86443c81549870f198abeceb59194fdcead5ca32df2aabc5ede9d149f8fb21bd160771bfa6ad2ac3b5e6e459c2712f0bd3f354d5b812b7f8545532774cf4bd9a8a234d1421fd091a384571b3203a243d7762405eb5cc3ade864de06d983fce1ff12364a63662a7745fd1c5cb4bdbf1d678ffa85ca36216383f47d477d1933c7602147a29ab3324e80fe084dfc76e424fb0f215e7d69712da097b5ec8f5f05957e1f28de5965d5ae1ccff9fda02cad10a67ac6cc2a83b9476f6174df2c7c16ccc15851b9f895b434fb1a28b0a9831c25780cc48b4565746556d1ba918ad158d233008c062a1c89bb4ea868e56f28a25df2ffc3042e32fd95855c5ec1296fac874631ca28e43460a6d86ec6bfea0354b909cb37e97f3f1de6b95cc4f7b5565499ac65f895c91385c36a824517a76b35c1da126600f46158e989189ab87d6abd594049812632e37fa2534f2666a4acff027a07ca0e9e88e1927d335b566011c56af2479ff008c2c6ad4cb0e7ddd4ab76a9f5663ed1a1e65b06d8999fc676743ca0f9ef47c986b55002166dc16e09e96da8331691962b66aa94d894bcffa1dfad62f63803f0787dfea6d7a0540bda11a2215b840140e17d365a66c92d743be863188edb72334bf8ce3e881e06afd994f4a1c90fef288b25a3bf27ec3cfdc03fe2ac20347bff0a0805dc69068965be863189aee16cb2b999887a900a590686d03caed37b9dc175092ffd888547740435d5187ab8d9893b7597f76cc3abba8a76837c8e5ed385ab1b48ca0410cfbf96a5d8c1ed96addd587b11f231af3bcc15b80366e1ae7824f229cf0b36e91550b5d5175c102552e1f5b83b13bb4f69e8fc067eeff240e764a5e85e1dd1a51da7f733a95f0c5ac2e5605b3fc3c5aae317e37d133de62174fcb1ea459405b8f1b797d3654c98aa27fd59c1b50e6a398a86d7b012c2a081086b8e044ee7b3210460a2297a8bc682b17da2f9deea8fed99b844aa19bee97f3a0de27e16d7c26f726cf5dda82fd285327f965398870dbf115a3f6ff6ce8fcac83d2235a16ac240173389ceb9fee3dec4914cd85ff3d0afc63bff0e2905195b506a006adf9541558bde1ff5ec4fed78931c83a10aca6ee446f3dd55db273bf5e2e5cae139e384d954c67a27a8f01a4090b59105b12ad07550fc79209b6e062fff7b7f761bf570665a90f3c5f97f89ad398ee68c7a15da24d306d648e1196029a8a438a7fdf210bf76764896f93652cc4759ade07f6245624b4a189271ed4fedb7d2644326bb2c3a9507ae9163c37d0d7d0e144592009f595e010e38a4ad301b229bab15040145d9f1a8fd4845b9e60d7579c97b0f818b308aa3b6fe9cc8f0468a282f0b21c52459b062d3a3080f693befe79181631aa81922d0a1054572e037bccf5b0f4030a2c867331effd949e9e3e9ad96dbd4890ba6bb61912e9f6f10bd6afee668fcd7d1ef7cdd059583a0ce18ffed56c2ea8282d750480cb0539800443e64ea8620a5da329fc54d6038eea46a98bd06043aff2db123837628fa7f64fca69686a0ff3d92b90e9de7858ccf589ed47bac1b3ae472345326f9dd264dc023d0b644ce8ac91aa7bd15e9e9f490609ad25335aa34aa6c0783b6d1bc2f123c237d75821911a415111a835f44cee4b1b868fefe574094369d02b5a929fd94c4df412d200128f565e728e5559a37dc61ec3b4e73997cd6da1cefd5b60da576d62b3c9178bbe5fbf629415f45b2ae5c11507ac253c772b978fac0c0bb5b6a4d4e1f0a1c285ef613d553988244ca909a705d419938645ef56017c822a85ba2d49595ff7b1c069f90b85ca397bb2b400ee5e5e738d9cc161756f2fae2c89bf8cfa14e7ba744799e1208666ac849fb58481f375d4da4c5eb80292071b192a8e804ebebd207d5fc975485da104ecbcc609640f3833ba19512ff9be0a60a66ce17a448a46729fe8a546fe8dca04908c240d6b38ae8b3668229183705473a82b900d5242848a53d0d36fcaecae8981748fa40097cbf41fad972db32c2db3a2df41b0263e65362d3b74452ef146271c9825251eaa9d309b148e772a92f2ef62f4fa0dd7f25c5b4609e13a92f770e5d0f1e2b139d8e0de4bf99a3072dedc0db8cec916a9e9d70f2ac8e37788bbe0d3fe849c89c28932d71b7ef85c90b6d5a99dee793475e1640cb1a0436d7216044257bcd3613aa76b195bdad760464b6fff575d820800492fc41657bccd718ead8f11c73a5adca67dcec89764db648c87656b6cb885b02d0c2af974c51a08613c5266e4b5cfa35eb29c9b82f671fd5d0a335fa1a32efd4de2ab4322cd25fed10aba4287972d730e4d34cfde6aac19d68363fc4c1e20dda1e91da87e7af6333a1a449b6068243c68bd4ea11bdf4e218a28e647e4f97a477aef03ff10be02c14678ae414ea515f8baf8f7b5dc15dabff1301d6e47ed3b93933f8da24c69f8baca9908f475cc14874b6f75bbda4bff125a313cf74de1a69ad9c5c215177af894327b3f7a65c18a91da075e7a99a51728fa7bae526487f4d517ba374300d7326c71e90bd247403da1aa13667c982f380ddb6e5008cce90c05b49a7e8d61e63abe766eb2a728ea7a829a148570e83e9299155665c1b4401e67c395b157737b6be03ba038db788958e67ab84201366c6efb444e207a2a73f045dfde93c324f8e1b14cfba6e72675aebd254e73153f86340bee752a503531408d2947169b541a4de9628e38a183e00c5e960e8302a93637cc6e2f60449461025bd64267a312a7df59fc09ede9bd341dce09ae9b41117f0450b4e25c1bba837ed51b8295799e82859754dc1bfcec951eef4a830509e9cb9c7614a607d01b15c93c4a4dad0d40baefcd55b5a5a33c68ee78d2e8a6b2a54f7cc84e2e83dac267a061da729531d5bd86681c15417b9263772fb7d37b77999b1d2377ea31ddc3983cb8605d5400ec26f8c57b2e98a218765bca3e1dac8fdb7b7364da18f813f165d313a69b112074ff9d5e2eb0335f8b2e73985de25375e01eaf3cd678090b162e13031a28f2fb0b42a579335163399d36cc9088781eb4a0ed279c17013fcf594dd23f589fe34b563e1d0a7af8848f51d765fd90803a10bc3c5d480d880d2b0d76e7693e9832b34a30e9b086bccb4744125aaef99ed0efe85b2dff6f7dca257ccef095d117cadb79a69777ba33197fedaebb4c05240c7f5b7d929ac7f5d26b705828c932f642a3d151913be616a3c9b2659bb5b031e28982d5f8a695508893f23f09979768b1280f16529e95504cd1fa546502245039adced1739b23d51a48160f2dc815faa41a0b2ea43f28b3a465f6b12ac50e4f171670daf70510281b8421fefd5a7c3e693035fcff042bc9086aca38d5eb35dd7a4eb03abcb115ffdb69aeb5f1524a12cb6f0c6956d96a94a9b27e31aa408349b2a0e9fc10c4670bcdc3cc81860312195faa348084c1d2dbd9aa91ddd20105cf8bcde9b8d6f6478c25dc0b42ddcc43c6b2798a969e8e699e6910f904de03d6d7f2e5b21aa2502ffd5b7c60091395a80b8066f738379049e196ab52ef2c56befa826ba05384703243b29ac852a5620aa76f51ee5a7e0fbc21802b9abda5825ff8b6a81805b256fe60593162f92fc83b32c05559a7e7fbae65f25a4841c056cf4416cc37580869e38c6c25777084b30ef0dc1a2f8b1425a470441a04979023ec5dc70095d49dd3a26e0b14cd445f18cbbdb5482a3fddb6a152ce32e40876dc4745cfcff08d19be18c664b78f9dd4329126b0670a784dac0cc74543bf8290928316504f9d4bc41c0ad03748d9058c61848bef3d8c07e6ff9b595bb40498d1954f92096596565d4c1277652e950b7c0fb8f9c77060e3f0fc7498d01ff6bf025d8945d11d048be3d7227a3123939c8a0bcd69fd94377bd28f888d801f018e1ec6400770ee650009f2d0233045e004238eea6a0e6cbcb5bb6eb4f0c66020885411735ecbf0769875f388e59518222054fe22589f72eea4005e9745399eeac526dfec50789e4041bb5fd62b6aff47f67e2ea1af482796fd89ba5fddaa1d4ab05e5d6476129480ab098c8dc254aff10afa1fe044041deb7c23c1f560fd47dd63c382f67471a44dd8e36f2d054bd0ea8aec870efe6f4b6e47fefcff95b3e5468e1294ca120a998bd71fc8c26fe8a96cb448125ad59ac3120eaa51343f769b403c958328b24d8847ddfea25ab0b87ea4e1596c4119d94abf06878316f226319a6e3a35224c47e43091f4b603f15332f66c11c70ebf1aa0476286f70299f358e15669a61eba67f27744a62d88d0f4ce42004b117010f43f7fc807597307f763cbd177e016da1bc040ae374aade506a6654ae94e06d53a96709a9c3971250bdb59e9e6ce6b7fda455c697b577027e724212beb88dc24af567525a450142e717a053f0edc97b0456133f13362ca48ac877e6afda638240b4ca1d72f56382401b159b0bb8c86603ed80a7e026a8f24ec1edaabee62045be435de78b32504b3a4bd53f7a8cfae147aa561f7879de69b822ea82ae5e7d80e30c3903aeb3ddf9966816c6fdb6ef7f790cce6fd5ef0a8f26dee81a83dd4a86e160a2bae18c2dd01cee7ae40a6cb47fe6ddb3dc6ee72dc157da2965b49cebc4386b33aaf2779b783e21733275bd89ac0e1520b081a731d2773e055a76c1b09b9857519bcfc3476c73427aca493b9521aa263d91376c6f6180d0d13ffb53f060a93ebed90ee381b033f89954105705b2d7fac254bd08914ba801e7aaefea43079cdc8ace50e217b3b20bd8a09924dbf60a6d6bf99e9df1776d734b473899e9b8d2c1e85b31680e0df8b63f52a3b3a7b51b745293926d9c2cb1e48d9e4b4d95d687a1c1ccb9e91cba4ebd1c52d8bafb07be77016dc1e7f3abd31b05d5192e4fbe702351c12fb080813d60d21ef360548ffa49331b06b9131328c8390ccd11ba9342615067e984b9b7492a36144df4ec107884d785b1b59e8f315e9bea62217b941decfc015ae5f3c06d72b624e767275424da97d272e230afb73b24739ccd0914cb3d5d032b6dce5315760016242beb2f7844c43724403855dde59b533ff8cad9f4b71842d6271fd4802372a751ce0fd19a9a37556cc6b4d49fb4a2fbe6991ff8b4d9da72c2ec93291544a9bdb4dbe7c4c935b9f1239a8cb6277003631c922810f85a19faf9631abf57ce8aefff4fc0ded131a0394da535422489393ff8202918eb0b4758fc226cda3e06b87abb0f4dfaa4999633d5a96617d0aa78511dc583e2af36bd32f9416e42c4fcdd61af693e9edfe0e7163ab00339cda24042bdb275041036847c93ddef3fb59753d3a52a0f2ed851e40ee6073ead33cbbad301d6d3459d6ffb8f6128420efc539b075c74a78f3795744da945cd58303dd089433efeda6b3e704444b9f188b61dbeed644253c200da98adb0e6fff6771bf39f56c2efe9a24ccd7306779a31e72c89a8e04a227b5a385ce22bcfb343e9ca1c3eee657bc5e48f6864db4eb08077dcad395d13ac195ab3bcc750531ef0e2890d374688ccd366c1226607bc80f6603e73843bae91aed25e9f60a6a5c415dbd0c35a13f1e07e57c6256ca909f410fdf7babf9a1bf5a9df7747c3b694f648affab02d743b164154720ca469b66e8b2dd3dd229e7a888feb202eb82c52cb2a04fad5ff6b95dc05ec53a19c19049e70434978765e635a8573238fbd7a4d73135f6772daf516652e01b36d828177e73d26ae8d6e25bdf16d3c442927e2e68753f71cf268582535e3d142da6ecc79c51453d6e93a2a5f6104e88ae3c080709784bf247228e7913d392b357035f18412b07aab8a90037fd822616833d16f6b49f5c6621e05fa447bdf353bd77b14acce1ff2406cec5af5a02a8be520574e7c6ef81a3121e60c144017c077d9b130a85bd70f5d0795d07d5093adc4c3e6685551c04075c961c8a34bc45c166e32ea665d6515f27dd51cc6cdff985a310f71fe87b9e7eb06d7459c9c9ef28905aa9133d90c897fb3644eee6a9bf573984a56c642c42a9d62b876c8b9931aba00ef48ff9ebcbed850aaa8ddf3dac5596997faccac0a1f6fb08eec021d25a0566b577f37eb97e4e10a70c1563632388bb66fbfab8d9e2b8acea507776efae8dc28647d4ac0af50a4502060422fbc0ba6ca421fed9448bb525f7e07446a24c67661a37a0cb6c95ae52dbaa18855dbde7e7f59951db283272c2f57d4f89ffa3abf5ce000d2807c338e9e95f71854b56c51b474051340bcac600c889c6c03a7801a581ab46ab199dcefd5a444db7fddabe8f0ef27fa997f2cda1573f0a51ddf810cdfb628c38e02f06889b80e2473e6f0ad5da5dd295030077990c523d0b51c1781576abd30717b40679bae532f731582e600eb25936eece804cdf24b6cd1a581ad48ed62465135eeafda2cce9135a4e437b3111c2c3da6ef415488a3dce7a2ad73e797e9e386a27f5147927e292f6cc5eb8d387797b2e5df18d316242b52871f874697c1bf4682a4a2a767a76bc188fb0e4c7d7b83ff959f10f3f7985dc09552835a600aed3ede432da46dfbd524ccfd64d05293c9f9f1865e090388ed4ab104ff3485640b59b2175fa8ec740fa1927a459b8ee9951c84576ec6b17b3e2506153c2a88032a13ccddd020bc8e594db52fc1c67aadebd91b332ca795460044882203f407407800a594c1b6337bdba1cc47fd2fefd012dfe7c2f52b0810b6cf15ceac80d6e458c907e743f61b15dbd898f3ff25959f1ed60ab99eea9ca30fb55d29e8141e41522c0eb968658073a5abffc6c4a22df170bad41d76132dff692fe7c41b987ae3bdc9a4863568c5baa63886ff931f28dff7dbaa8c6cd50ee2c5da12c41016d26d135208170110f5476f54f6150593009eed2e340417f679c88fb98db50dcc640d2988f91e57a86b99c1681192a2b10a286c3983c782683123cde4adb0bb5a958da62b2f4662471e104732363d049eee842417d14b3b802ff39c829d1dfaeb69e8e77ee253d41d39333381c428d0e281e7cb117dc7ffd654b8d0c9ae4022e5b081382570fa89605cb716f46ee3b7b9649a8597ca2fc36d2c34a4c11c5b9f5961b421c89bfe838644bd9962fbd9cc2ed7a9bbb1f30a53354a0b46408e1936b1b2554202b591c9cb322a04fdc0e80d9b7b02fd50a4ae6283e25cfc1c625a3f87dc1216eadea071f540c32657371056250a295ceb7a8aac1493157cb0baf341f47bfbb5ca7e36020330b4f4291bbc517138fec519cb299c1344e819c24cb19621f3d4a3a899b18f29f3a66c9e1d827c73c884fd2ca00d998a9f2ddcd81f8803eb8bf70aad28e0ff9ec83e5846e5cdfa4b5c0e921007d0aafc9b200a7d4a48f448d89ec80229a2a40f44351180c4d1381d8695182e5e83c6e7dc837f4ef1704b11e1d6207cef52e891852ff3a63e2c08211da71ef6a62f515b8b6f5fab66b0a68a053d85bbbb57377a5a4390b342dd9f86ceff4b5a191523745dcb997969469d674cfdc12d84fc0b42b61bdf6fb145d23f50299e06338e8ebf9a5b26dcbc3a2cf535b1146c8d7c09b6588424711723dcdb14bdd9c4dcb2dc915ff61cc4d3a1a1a202096fd63f14fa623ab028b3428023a12dcfbaea85c4d7919619b62aeb1475cf32abc0262104cf2a0bebc4f270822f7431c50755b62c0117a6d8cae0cedef6b9002527a86036f6b347d0ad179fa75b5be67c68b217eb33ca626ef0ecb5476fa2e53ecbf0d5376a14943bdfcf623453fccc48c100839dd442d1ee5307d2da6cb9b90b5ef46a04431883e71b0fcd1bcb945738d4d3f83cf4e49d92d6d7fe1d3967001000b642038c514a56eb3f73cd8f3e0763fec59f80782c098807afe93e292d6062934422364546308df0a5a5d3ba659a404d40b0cf5d3684b42e30f66ae7b7e2469c2b94370753b4beab587a8db5b0ff763a554749abd312c45b0fcab2366a2550049bf5345ff8aef4f4fc45099796d4bb2652db6e2d5dde62b62d03df143a8cf68c9241a29f59bdcc1204ba3f2a1013f42c53e7ea84a911ee6d39749a6b5ae452b9672792df5e5c9203f0bc976251f9de128cd049006ca1d8ce67052cf3909742e07e0964833651404a5f8b1d19de60e20a33d3ee64cfbe4f0e492d9742f9e952bb067b32139fa9480f4c45c10615340a1e10e7f6d8760a86c1653a9a3b0478e9ec58d625419ef67ca7bc677f07ac9b40b39e26b0e5f90cd6db6e15c24f73369d3c3799493162777b40afd2b0a393548d8d14d68a585a4b67e8370f9d7536d8825259d60a5c80752b71de78935bbf227a0fa51eeb96f04789de4047c0c6acbb4b0825ed0c6b04676e61657e3a04e00858f643749ba08e64c44742d1fd8340629eabf4c8704bea9be913a0e7138b15bac7f2784614986ab16f8212191064b7aa7cf52cf13584cb2d73ed5b4237a5512c17f348f45f511478206662dda46436bc2a2f14cccc64936936a841f48778dbfaaaa1cdbe0488fb45452c2c46bb642bb82f6c0a0736ec78d4d26e51da49f1db9abe04f05c160bd88eb37f4af2230f67e55100ee4183c18550e462003a67dfa34fce8e6f5b14cb3c93e2e976e7da38b0b8d346aa2d4190b7bcc0458e262e4bd39df371fd9c53e6473675fc6a2f8a1b7f2b1d689485aedf4caa26c1625339802f10a708fe35b8e86057ca407df66f409658c7efe49a798e3efb6783aaebfb58a737be7f18386ac6daf0ffc2ded7fdf7866f457e5e27e62a72a555be33ed0a7221a320bd8e3809a05b5821be7a31eaa1c97e4d57a04aacf559666f5c5a00cf4dc9b9cf84efcaffd247a9b23d951f820dd8bd6ab50d7d3c257144aa06d97eb481fde281d491201b03f6aca87af738b97ee43cbb57e71f3d9029976e8d770f3c190f3fd64fda0e10c7fb58149f347629e847d530cb668947732edec77761422ded58462c9681e842ca39903de1f71644215e358471a5c0b964e0c32131bd8de9ca7d84841e4a8ef073b13541c7a2fa06a41a0dcce08452dc3eef2cc8d3aa2c1817d49c9ad209821b828e3d9c7a95abd2fee6cbb60bace7b828fdbcf8f318169d625edafe7e156ff0f5b4bd94281aabc67e625872235ef452167277b356425d44cfaf993e6732ebb9748f4595990142d2e3d92e2329c296173b0c3115881cbe8faf2135040f20a0c31c9820d527a51b4deecc2b9bf85c076374fa08679fe3bfc25b97f0318a38493a0ae71df1d1bf0521975db4a88d57b54e71c861090f0a1edd55e1be3cb23a3a33620a5a56bca81bd440cb670825913c9b18b03ab667bc925cec27345d9bca9a64dcdb06b15a7f06d473a26d5983030aea6084fd8e7fd6c3e0e74efabdc7681d6830a50bd1bbb9ccc51cf1d9d404f53d2a5d053696d2f5081e533b5871f4d1c145b394b9403680a1e941dc593a19942405235c0964f31cbb33ff4ba96103adbe0b58806b09</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">填入密码才可访问阅读</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>任务调度项目</category>
      </categories>
      <tags>
        <tag>任务调度项目</tag>
      </tags>
  </entry>
  <entry>
    <title>调度项目6：worker开发</title>
    <url>/2024/09/16/%E8%B0%83%E5%BA%A6%E9%A1%B9%E7%9B%AE6%EF%BC%9Aworker%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="错误密码，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a62770152b30964bd5778598e12469ffe0bc84c109e5f2c39b46e0136467b839"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">填入密码才可访问阅读</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>任务调度项目</category>
      </categories>
      <tags>
        <tag>任务调度项目</tag>
      </tags>
  </entry>
  <entry>
    <title>部署colab利用GPU资源训练深度学习模型</title>
    <url>/2022/03/13/%E9%83%A8%E7%BD%B2colab%E5%88%A9%E7%94%A8GPU%E8%B5%84%E6%BA%90%E8%AE%AD%E7%BB%83%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>深度学习模型需要GPU加持提高训练速度，但是目前GPU和许多云端租借的GPU价格昂贵，因此本文将用谷歌团队的colab实现免费GPU的使用，满足深度学习的个人学习需求</p>
<h1 id="以下链接为部署原文">以下链接为部署原文</h1>
<p>参考网站： <a href="https://blog.csdn.net/u011119817/article/details/108519389">Colab基本使用方法及配置</a></p>
<h1 id="目前所用到的代码功能">目前所用到的代码功能</h1>
<p>1、查看GPU资源</p>
<p><font color="white"></font></p>
<pre><code># 查看GPU资源
!nvidia-smi</code></pre>
<p></p>
<p>2、连接谷歌云端硬盘</p>
<p><font color="white"></font></p>
<pre><code># 连接谷歌云端硬盘
from google.colab import drive
drive.mount(&#39;/content/drive&#39;)</code></pre>
<p></p>
<p>3、查看库版本</p>
<p><font color="white"></font></p>
<pre><code># 查看版本
import scipy
scipy.__version__</code></pre>
<p></p>
<p>4、 pip安装库</p>
<p><font color="white"></font></p>
<pre><code># pip安装库
!pip install scipy==1.2.1</code></pre>
<p></p>
<p>5、运行代码-训练模型</p>
<p><font color="white"></font></p>
<pre><code># 运行代码
import os
path = &quot;/content/drive/MyDrive/srcnn-tensorflow-image-master&quot; 
os.chdir(path)
os.listdir(path)
!python main.py</code></pre>
<p></p>
<p>6、部署github项目到colab</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_47306605/article/details/123921943?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-123921943-blog-121534768.235%5Ev43%5Econtrol&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">参考链接</a></p>
</blockquote>
<h1 id="解决colab每12h断连的问题">解决Colab每12h断连的问题</h1>
<p>每60分钟自动运行代码刷新，解除90分钟断开限制.</p>
<p>使用方法：colab页面按下 <strong>F12</strong>或者 Ctrl+Shift+I (mac按
Option+Command+I)
在<strong>console（控制台）</strong>输入以下代码并回车.</p>
<p><strong>复制以下代码粘贴在浏览器console！！不要关闭浏览器以免失效</strong></p>
<pre><code>function ClickConnect()&#123;
  colab.config
  console.log(&quot;Connnect Clicked - Start&quot;); 
  document.querySelector(&quot;#top-toolbar &gt; colab-connect-button&quot;).shadowRoot.querySelector(&quot;#connect&quot;).click();
  console.log(&quot;Connnect Clicked - End&quot;);
&#125;;
setInterval(ClickConnect, 60000)</code></pre>
]]></content>
      <tags>
        <tag>环境配置</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>重装系统后Hexo博客部署教程</title>
    <url>/2022/02/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8EHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>本文针对已经在别的电脑或系统上搭建过Hexo博客，准备重新在新电脑或系统上搭建回之前的博客，也就是说，之前已经在gthub账号上有建立过博客仓库了。</p>
<p>在重新搭建前保证自己以前的blog文件夹中以下文件有被拷贝备份下来：</p>
<table>
<thead>
<tr>
<th style="text-align: left;">文件夹/文件</th>
<th style="text-align: left;">拷贝内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;">/blog目录下的文件</td>
<td style="text-align: left;">除landscape外的.yml文件</td>
</tr>
<tr>
<td style="text-align: left;">/blog目录下的文件</td>
<td style="text-align: left;">package.json文件</td>
</tr>
<tr>
<td style="text-align: left;">/blog目录下的文件夹</td>
<td style="text-align: left;">scaffolds、source、themes三个文件夹</td>
</tr>
</tbody>
</table>
<p>零基础建立、搭载博客可以参考b站视频：</p>
<p><a href="https://www.bilibili.com/video/BV1cW411A7Jx?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">手把手教你搭建属于自己的hexo+github博客</a></p>
<p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">手把手教你从0开始搭建自己的个人博客
|无坑版视频教程| hexo</a></p>
<p><a href="https://blog.csdn.net/muzihuaner/article/details/113880520">Hexo博客搭建与部署</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/606083588">hexo&amp;github
搭建博客（保姆级）</a></p>
<blockquote>
<p>注意：若是在<strong>Git Bash
here</strong>中输入hexo执行指令，则不需要输入<strong>hexo
-s</strong>，直接输入<strong>hexo s</strong>即可</p>
</blockquote>
<h1 id="博客重新搭载操作">博客重新搭载操作</h1>
<h2 id="一软件下载">一、软件下载</h2>
<ul>
<li><p>到<a href="https://nodejs.org/en/">nodejs官网</a>下载<strong>nodejs</strong>软件并安装</p>
<p>cmd中输入<code>node -v</code>确认版本及确认已安装完毕</p></li>
<li><p>下载<a href="https://gitforwindows.org/"><strong>Git</strong></a>软件并安装</p>
<p>cmd中输入<code>git</code>确认版本及确认已安装完毕</p></li>
</ul>
<h2 id="二建立本机与github的联系">二、建立本机与github的联系</h2>
<ul>
<li><p>Git下载完后，双击安装Git目录下的<strong>git-bash.exe</strong>，输入<code>ssh-keygen -t rsa -C "github对应的邮箱账号"</code>，然后直接回车3次（无脑回车即可），将会生产本机对应的SSH号存于C盘Users上的<strong>id_rsa.pub</strong>文件中（如果找不到该文件，可以下载Everything软件直接搜索文件名，可以快速找到文件的位置）</p></li>
<li><p>用记事本打开id_rsa文件，Ctrl+A全选复制文件的全部内容</p></li>
<li><p>重新建立github与本机的联系</p>
<ul>
<li><p>打开github的<strong>settings</strong>，点击<strong>SSH and GPG
keys</strong>，点击<strong>New SSH
key</strong>创建github与新系统的联系</p></li>
<li><p>其中<strong>title</strong>填写github的用户名即可，<strong>key</strong>填写在id_rsa.pub中复制的文件内容，也就是SSH号，完成后点击<strong>Add
SSH key</strong>即可</p></li>
</ul></li>
<li><p>打开cmd输入<code>npm install hexo-cli -g</code>安装hexo</p>
<ul>
<li>mac先通过sudo su进入root用户，再全局安装hexo</li>
<li>mac用sudo指令，否则会有权限问题<code>sudo npm install -g hexo-cli</code>安装hexo</li>
<li><a href="https://blog.csdn.net/laosao_66/article/details/135880270">npm安装hexo时更换镜像源</a>
<ul>
<li><code>npm config set registry http://registry.npm.taobao.org</code></li>
</ul></li>
</ul></li>
<li><p>新建blog文件夹，之后的博客搭载将全部在该文件夹中进行，如果出现什么错误不要慌，把这个文件夹干掉重新建立再次进行下面的步骤即可</p>
<ul>
<li><p>cmd中进入对应的盘(如<code>D:</code>)，进而进入新建的blog文件夹（如<code>cd MyBlog\blog</code>）</p></li>
<li><p>输入<code>hexo init</code>(若是将以前可正常运行的完整blog路径拷贝下来，里面已有环境在，则不需要进行此步骤)</p></li>
<li><p>输入<code>npm install</code></p></li>
<li><p>最后输入<code>hexo s</code>，复制链接（我这里cmd给的链接是<code>http://localhost:4000</code>），到浏览器浏览该链接可以看到最简单的hexo博客界面</p></li>
<li><p>将<strong>前言</strong>中备份的旧博客文件及文件夹全部复制到新的<strong>blog文件夹</strong>中，替换新blog文件夹的内容</p></li>
<li><p>继续在blog路径的cmd下输入<code>npm install hexo-deployer-git --save</code>安装环境</p></li>
<li><p>按需添加博客加密<code>npm install hexo-blog-encrypt</code></p>
<ul>
<li>参考：<a href="https://blog.csdn.net/qq_42951560/article/details/122552109">【Hexo】静态博客设置文章加密访问</a></li>
</ul></li>
</ul></li>
<li><p>之后便可以继续用<code>hexo s</code>查看hexo博客，此时的博客已经恢复成旧博客的内容了</p></li>
</ul>
<h2 id="三部署博客到github上">三、部署博客到github上</h2>
<ul>
<li><p>记得操作时用<code>hexo clean</code>清理环境，如果出现问题也可以重新打开cmd</p>
<ul>
<li><p>cmd中进入对应的盘(如<code>D:</code>)，进而进入新建的blog文件夹（如<code>cd MyBlog\blog</code>）</p></li>
<li><p>输入<code>hexo g</code>生成博客</p></li>
<li><p>输入<code>hexo d</code>提交博客部署到github中</p>
<ul>
<li><code>hexo d</code>这个过程可能会出现各种错误，如果git
config类型的提示则在博客路径的cmd中输入<code>git config --global user.email "github对应的邮箱账号"</code>、回车后继续输入<code>git config --global user.name "github用户名"</code>，之后再次<code>hexo d</code>部署博客，在弹窗中输入github账号密码搭建联系即可（注意，密码不能填入github的密码，而是填入Token，否则会报错）
<ul>
<li><p>Token的位置：<code>Setting</code>-&gt;<code>Devloper Settting</code>-&gt;<code>Personal access tokens</code></p></li>
<li><p>创建Token的方式：</p>
<p><img src="/2022/02/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8EHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/creat_token.png" width="%50" height="%50"></p>
<p><img src="/2022/02/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8EHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/creat_token2.png" width="%50" height="%50"></p></li>
<li><p>在博客的<code>_config.yml</code>文件中修改<code>repo</code>项为<code>https://AkiraZheng:拿到的token@github.com/AkiraZheng/AkiraZheng.github.io.git</code></p></li>
</ul></li>
<li><code>hexo d</code>这个过程可能会出现各种错误，FATAL中如果出现code:
128错误，很可能是网络问题无法打开github仓库，这是可以关闭cmd挂个梯子后再进行部署</li>
</ul></li>
<li><p>提交后若出现"Please tell me who you
are"，则根据提示输入<code>git config --global user.email "you@example.com"</code>和<code>git config --global user.name "Your Name"</code>(如"1428384878@qq.com"和"AkiraZheng")</p></li>
</ul></li>
<li><p>至此，hexo博客的重新建立联系已经完成了，此时可以浏览自己的博客网站，新的博客网站将与新系统相关联</p></li>
<li><p>注意：如果多端从git上拉项目的话，需要先建立空文件夹完成<code>hexo init</code>等操作建立好环境，然后再根据下面链接中的<code>二：(推荐)在搭建完成博客之后将多端同步加入</code>拉取git上的项目</p>
<ul>
<li><a href="https://zomfice.github.io/2018/02/25/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E4%B8%89-%E5%A4%9A%E8%AE%BE%E5%A4%87%E5%90%8C%E6%AD%A5/">hexo多端同步管理</a>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// git初始化</span><br><span class="line">git init</span><br><span class="line">// 添加仓库地址</span><br><span class="line">git remote add origin https://github.com/用户名/仓库名.git</span><br><span class="line">// 新建分支并切换到新建的分支</span><br><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure>
<ul>
<li>执行完命令后，在sourceTree中拉取本地这个文件夹，就能更方便地进行更换分支等操作了</li>
</ul></li>
</ul></li>
</ul>
<h2 id="四引入mathjax公式">四、引入mathjax公式</h2>
<p><strong>首先，如果blog源码还没开启过mathjax</strong>:</p>
<p>由于<code>archer</code>主题中已经配置了mathjax，但是默认是<code>false</code>，因此需要先在<code>_config.yml</code>同目录下的<code>_config.archer.yml</code>中将<code>mathjax: false</code>改为<code>mathjax: true</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">3.2</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>如果已经修改完<code>_config.archer.yml</code>文件，那么就需要开始配置<code>npm</code>环境了：</p>
<ol type="1">
<li>卸载默认渲染引擎</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>系统上安装 <code>pandoc</code> 和渲染引擎插件</li>
</ol>
<ul>
<li><p>检查 Pandoc 是否已安装</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pandoc -v</span><br></pre></td></tr></table></figure></p>
<p>如果未安装 <code>Pandoc</code>，可以使用以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install pandoc  <span class="comment"># MacOS</span></span><br><span class="line">sudo apt install pandoc  <span class="comment"># Linux</span></span><br></pre></td></tr></table></figure></li>
<li><p>blog目录下配置npm环境：安装 <code>hexo-renderer-pandoc</code></p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure></p></li>
</ul>
<blockquote>
<p>参考：<a href="https://github.com/fi3ework/hexo-theme-archer?tab=readme-ov-file#%E5%90%AF%E7%94%A8-latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">启用
LaTeX 数学公式</a></p>
</blockquote>
<h2 id="五实现在vscode的terminal中使用hexo指令">五、实现在vscode的Terminal中使用hexo指令</h2>
<p>当通过上述步骤搭载完博客后，包括在blog中也<strong>配置好npm环境和hexo环境后</strong>，可以通过下述步骤实现<strong>在vscode的Terminal中使用hexo指令</strong>，这样就不需要每次都通过在文件夹中打开cmd或者Git
Bash中输入hexo指令了</p>
<ul>
<li>首先将blog文件夹拖入VSCode中（如本文中的<code>MyBlog\blog</code>文件夹）</li>
<li>然后在VSCode中点击<code>Terminal</code>-&gt;<code>New Terminal</code>
<img src="/2022/02/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8EHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/vscode_newTerminal.jpg" width="80%" height="80%"></li>
<li>在新打开的Terminal中输入hexo指令，如<code>hexo s</code>，这时可能会出现报错
<img src="/2022/02/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8EHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/vscode_error.png" width="80%" height="80%"></li>
<li>不要慌，这里是因为在此系统中禁止执行脚本，那么我们就应该先<strong>把脚本执行权限打开</strong>
<ul>
<li>Win10下以<strong>管理员身份</strong>运行<strong>PowerShell</strong>
<img src="/2022/02/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8EHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/vscode_powershell.png" width="50%" height="50%"></li>
<li>输入<code>Set-ExecutionPolicy</code>，回车，检查脚本执行权限是否被打开了，如果是<code>Restricted</code>则说明脚本执行权限没有被打开
<img src="/2022/02/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8EHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/vscode_powershell2.png" width="100%" height="100%"></li>
<li>执行：<code>set-ExecutionPolicy RemoteSigned</code>
需要开启，所以选择<code>Y</code>，回车
<img src="/2022/02/03/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8EHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/vscode_powershell3.png" width="100%" height="100%"></li>
<li>以上打开权限的方法参考<a href="https://www.cnblogs.com/hdlan/p/14452703.html">hexo运行报无法加载文件</a></li>
</ul></li>
<li>至此，我们已经完成了配置，可以重启VSCode，然后打开Terminal，输入<code>hexo s</code>或其它指令，这时就可以正常运行hexo指令了</li>
<li><strong>Point：</strong>当在Terminal中启动<code>hexo s</code>后，在浏览器中输入<code>http://localhost:4000</code>即可查看博客网站，这时在VSCode中进行博客的编写、修改、部署等操作,保存更改后回到<strong>浏览器刷新即可看到更改后的效果</strong></li>
</ul>
<h2 id="六关于archer主题的相关配置">六、关于Archer主题的相关配置</h2>
<p><a href="https://github.com/fi3ework/hexo-theme-archer/wiki/">Archer主题配置</a>指南在github网站中</p>
<p>修改主题时修改<code>./blog</code>文件夹中的<code>_config.archer.yml</code>而不是thems中的</p>
<ul>
<li><p>启用字数统计及阅读时间</p>
<p>hexo目录下执行</p>
<p><code>npm i --save hexo-wordcount</code></p></li>
<li><p>启用全局搜索功能-Algolia 搜索（在Archer官方文档中有）</p>
<ul>
<li><p>hexo目录下安装<code>hexo-generator-searchdb</code>插件</p>
<p><code>npm install hexo-generator-searchdb --save</code></p></li>
</ul></li>
<li><p>关闭目录自动编号</p>
<ul>
<li><p>打开Archer主题文件夹中的<code>/layout/layout.ejs</code></p></li>
<li><p>将</p>
<p><code>&lt;%- toc(page.content, &#123;class: 'toc', list_number: true&#125;) %&gt;</code></p></li>
<li><p>替换成</p>
<p><code>&lt;%- toc(page.content, &#123;class: 'toc', list_number: false&#125;) %&gt;</code></p></li>
</ul></li>
</ul>
<h1 id="后记-hexo博客编写相关问题合集">后记-hexo博客编写相关问题合集</h1>
<h2 id="解决部署到github仓库时出现连接仓库超时问题">1.
解决部署到github仓库时出现连接仓库超时问题</h2>
<p>所有hexo指令操作都在hexo博客目录下右键点击Git
bush下进行指令操作成功率会高很多！！</p>
<p>还有记得部署到github前进行<code>hexo clean</code>操作，降低出现bug的几率</p>
<ul>
<li><p>解决方法</p>
<ul>
<li><p>在执行<code>hexo d</code>前先在默认浏览器中打开github网站</p></li>
<li><p>在Git
bush中输入<code>git config --global https.proxy</code>设置代理</p></li>
<li><p>在Git
bush中输入<code>git config --global --unset https.proxy</code>取消代理</p></li>
<li><p>在Git
bush中正常输入<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>提交代码即可</p></li>
</ul></li>
</ul>
<h2 id="解决部署到github仓库时fatal出现code-128错误">2.
解决部署到github仓库时FATAL出现code: 128错误</h2>
<p>所有hexo指令操作都在hexo博客目录下右键点击Git
bush下进行指令操作成功率会高很多！！</p>
<p>还有记得部署到github前进行<code>hexo clean</code>操作，降低出现bug的几率</p>
<ul>
<li><p>解决方法一</p>
<ul>
<li><p>删掉blog中的.deploy_git文件夹，<code>rm -rf .deploy_git/</code></p></li>
<li><p>cmd中输入<code>git config --global core.autocrlf false</code></p></li>
<li><p>cmd中输入<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p></li>
</ul></li>
<li><p>解决方法二</p>
<ul>
<li><p>删掉blog中的.deploy_git文件夹，<code>rm -rf .deploy_git/</code></p></li>
<li><p>cmd中输入<code>npm install hexo-deployer-git</code></p></li>
<li><p>cmd中输入<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p></li>
</ul></li>
<li><p>解决办法三</p>
<ul>
<li>太久没使用hexo可能会导致hexo与本地电脑的连接失效，此时转到<a href="#二、建立本机与github的联系">二、建立本机与github的联系</a></li>
</ul></li>
</ul>
<h2 id="用sublime-text3软件实现markdown文件在浏览器中实时更新显示">3.
用Sublime Text3软件实现Markdown文件在浏览器中实时更新显示</h2>
<p>MarkdownPreview + LiveReload</p>
<ul>
<li><p>Sublime中安装插件的办法</p>
<ul>
<li><p>组合键<code>Ctrl+Shift+P</code> 调出命令面板</p></li>
<li><p>输入<code>Package Control: Install Package</code>，回车</p></li>
<li><p>在搜索框中输入要安装的包名（一个一个，不能同时安多个）</p></li>
</ul></li>
<li><p>MarkdownPreview</p>
<ul>
<li><p>根据插件安装方法安装MarkdownPreview插件</p></li>
<li><p>设置浏览器浏览快捷键为<code>alt+m</code>，在Preferences -&gt; Key
Bindings打开的文件的右侧栏的中括号中添加一行代码：</p></li>
</ul>
<p><code>&#123; "keys": ["alt+m"], "command": "markdown_preview", "args": &#123;"target": "browser", "parser":"markdown"&#125;  &#125;</code></p></li>
<li><p>LiveReload实现实时更新</p>
<ul>
<li><p>根据插件安装方法安装LiveReload插件</p></li>
<li><p>组合键<code>Ctrl+Shift+P</code>
输入<code>LiveReload: Enable/disable plug-ins</code>, 回车, 选择
<code>Simple Reload with delay (400ms)或者Simple Reload</code>，两者的区别仅仅在于后者没有延迟。</p></li>
</ul></li>
</ul>
<p>Sublime实现Markdown实时更新参考文章：<a href="https://blog.csdn.net/qq_20011607/article/details/81370236">Sublime
Text3 的 Markdown 实时预览全面总结</a></p>
<h2 id="解决本地图片上传问题">4. 解决本地图片上传问题</h2>
<ul>
<li><p>在_config.yml配置文件中配置项<strong>post_asset_folder</strong>设为true</p>
<p>之后再用<code>hexo new post_name</code>命令都会自动在**source/_post**文件夹中会生成对应的图片文件夹，此时图片文件夹中的图片资源可以用相对路径来引用</p></li>
<li><p>在hexo文件夹打开Git bush输入</p>
<p><code>npm install https://github.com/7ym0n/hexo-asset-image --save</code></p></li>
<li><p>保证图片都保存在同名的文件夹中</p></li>
<li><p>文章的.md文件可以采用两种方式引用、插入图片</p>
<ul>
<li><p>第一种为<code>![图片描述](图片的文件名)</code>，比如<code>![test](1.png)</code></p></li>
<li><p>第二种为<code>&lt;img src="图片的文件名"&gt;</code>，比如<code>&lt;img src="1.png" width="80%" height="80%"&gt;</code></p></li>
</ul></li>
</ul>
<p>解决hexo本地图片插入问题参考文章：<a href="https://blog.csdn.net/qq_36408085/article/details/104117319">Hexo+Github博客：网站内图片不能正常显示，但本地文件可以显示</a></p>
<h2 id="hexo新建文章">5. Hexo新建文章</h2>
<p><code>hexo n text1</code>，注：text1可以改为文章名称</p>
<h2 id="是否开代理问题">6. 是否开代理问题</h2>
<ul>
<li>参考文章<a href="https://zhuanlan.zhihu.com/p/636418854">解决 Github
port 443 : Timed out</a></li>
</ul>
<h2 id="themes是clone的导致push时文件夹出现箭头丢失">7.
themes是clone的导致push时文件夹出现箭头（丢失）</h2>
<ul>
<li>参考文章<a href="https://www.jianshu.com/p/28e61a24d847">Git
解决github文件夹有向右的白色箭头并且不能打开</a></li>
</ul>
]]></content>
      <categories>
        <category>重装-环境配置-计算机</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发系统设计</title>
    <url>/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="一海量数据">一、海量数据</h1>
<h2 id="处理海量数据">1.1 处理海量数据</h2>
<p>在需要对海量数据进行处理时，常常会有<strong>时间</strong>上的需求、<strong>内存空间不足</strong>等问题，</p>
<ul>
<li><p>时间上：加快处理速度</p>
<p>时间上可以通过<strong>算法</strong> &amp;
<strong>数据结构</strong>来提高处理速度，如<strong>哈希、Trie树</strong>等</p></li>
<li><p>空间上：打破内存限制</p>
<p>采用<strong>分而治之</strong>的思想，分批处理</p></li>
</ul>
<p>一般提高海量数据系统性能（时间、空间）的框架为：</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/time_storage_xmind.png"></p>
<h2 id="分而治之解决分割数据问题">1.2 分而治之：解决分割数据问题</h2>
<p>一般解决的场景是，比如<strong>海量日志查找</strong>、<strong>海量数据求TopK</strong>、<strong>海量数据频次统计</strong>、<strong>大文件排序存储</strong>等问题。</p>
<p>一般这种问题有大差不差的解决思路（<strong>分而治之</strong>），即将数据分割成小块，然后分别处理，最后合并结果。</p>
<ul>
<li>分：<code>hash</code>映射</li>
<li>各分块处理：<code>hash-map</code>统计、排序、求TopK
<ul>
<li>统计频次：<code>hash-map</code>统计</li>
<li>各块单独排序：堆/快排/归并</li>
<li>TopK：从各块中选取每个模块的TopK</li>
</ul></li>
<li>合并：归并</li>
</ul>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/split_bigData.png" width="80%"></p>
<h3 id="怎么分--哈希计算">1.2.1 怎么分？- 哈希计算</h3>
<p>一般对于海量数据排序、求频次tok等问题，内存无法一次性装入所有数据进行处理，所以我们选择将数据分成N部分，保证每一部分都可以单独在内存中处理。</p>
<p>由于数据是<strong>无序</strong>的，所以如果采用简单的分割，可能会导致<strong>相同的数据不在同一部分</strong>，从而导致<strong>分块数据的统计结果并不正确</strong></p>
<p>举个例子，我们要对海量数据求TopK，如果我们采用简单的分割，从各个部分中求TopK，最后合并求最终实际的TopK，可能会导致当前这部分数据的非TopK数据跟其他部分的数据合并后可以成为TopK数据的情况，从而导致统计结果不正确。</p>
<p>所以我们需要<strong>哈希计算</strong>，将相同的数据哈希到同一部分，这样就可以保证相同的数据在同一部分，从而保证统计结果的正确性。</p>
<h4 id="分布式负载均衡">分布式负载均衡</h4>
<p>在分布式系统中，我们需要将数据分布到不同的服务器上，这样可以<strong>保证每台服务器的负载均衡</strong>，提高系统的性能。</p>
<p>一般在实现分布式<strong>负载均衡</strong>时，我们首选会采用<strong>一致性哈希</strong>算法，这样可以保证当服务器数量发生变化时，数据的分布变化较小，从而保证系统的稳定性。（避免缓存雪崩现象）</p>
<h4 id="哈希计算">哈希计算</h4>
<p>哈希计算是将数据映射到一个固定的范围内，这样可以保证相同的数据映射到同一部分，从而保证数据的正确性。</p>
<h4 id="哈希碰撞">哈希碰撞</h4>
<p>因为哈希结果是有值域范围（有限的），所以哈希碰撞是<strong>不可避免</strong>的，但是我们可以通过<strong>哈希冲突解决</strong>的方法来解决这个问题。</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/hash_collision.png" width="80%"></p>
<p>解决哈希碰撞的方法一般有两种：</p>
<ul>
<li><p><strong>开放地址法--不常用</strong>：当哈希值发生冲突时，会继续寻找下一个空位置，直到找到空位置为止</p></li>
<li><p><strong>拉链法</strong>：将哈希值相同的数据放在同一个链表中，这样可以保证相同的数据在同一部分</p>
<p>拉链法如下所示：</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/hash_collision2.png" width="80%"></p></li>
</ul>
<h4 id="哈希查找的时间复杂度">哈希查找的时间复杂度</h4>
<table>
<thead>
<tr>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">查找时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">哈希表</td>
<td style="text-align: center;"><code>O(1)</code></td>
</tr>
<tr>
<td style="text-align: center;">哈希碰撞严重</td>
<td style="text-align: center;">退化为<code>O(n)</code></td>
</tr>
</tbody>
</table>
<h4 id="a.-普通哈希计算hashdatan">a. 普通哈希计算hash(data)%N</h4>
<p>哈希计算的特点是<strong>相同的数据哈希值相同</strong>，所以当我们进行<code>hash(data)</code>时，相同的数据会有相同的计算结果，我们再确保这些相同计算结果的数据都放在同一部分即可。</p>
<p>之后怎么进行数据划分呢？</p>
<p>如果我们有N台服务器/需要将数据分出N部分，普通哈希计算会将<strong>哈希值通过取模（求对N的余数）</strong>分布在<code>0-N</code>之间，余数为<code>n</code>的数据就放在第<code>n</code>部分，这样通过哈希计算保证相同的数据取余后结果相同，也就是在同一部分。</p>
<h4 id="b.-一致性哈希hashdata232">b. 一致性哈希hash(data)%(2^32)</h4>
<p>按照普通哈希计算，如果我们有N台服务器，当<strong>服务器数量发生变化</strong>时，数据的分布会发生变化，所有数据都要<strong>重新计算哈希值</strong>，然后进行<strong>数据迁移</strong>。</p>
<p>而解决这个问题的最好方法就是<strong>一致性哈希</strong></p>
<p><strong>1）实现-哈希环</strong></p>
<p>一致性哈希将<strong>数据hash(data)</strong>、<strong>服务器hash(IP or
Mac)</strong>都映射到一个<strong>哈希环</strong>上，通过对<strong>2^32</strong>取模，将数据映射到特定哈希环上。</p>
<p>通过顺时针查找，找到第一个大于等于<strong>该数据data哈希值</strong>的服务器，将数据放在这台服务器上。也就是环中某个区间的数据存在于某台服务器上。</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/consistent_hash.png" width="60%"></p>
<p>当服务器数量发生变化时，只需要对<strong>部分数据</strong>进行迁移，而不是全部数据。</p>
<p>如当删除一台服务器时，只需要将该服务器的数据迁移到下一台服务器即可，不需要进行大量数据的迁移。</p>
<p><strong>2）实现-虚拟节点</strong></p>
<p>在前面的一致性哈希中还存在一个问题，即<strong>数据分布不均匀</strong>，因为服务器的数量有限，如果两个服务器的哈希值在环中很靠近，那么会有一台服务器的数据很多，另一台服务器的数据很少，导致数据分布不均匀。</p>
<p>一致性哈希的实现中，为了保证数据的均匀分布，我们会采用<strong>虚拟节点</strong>的方式，将每台服务器映射到多个虚拟节点上，这样可以保证数据的均匀分布。</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/consistent_hash2.png" width="60%"></p>
<h3 id="各分块怎么处理">1.2.2 各分块怎么处理？</h3>
<p>根据不同需求，我们可以采用不同的处理方式，如<strong>求频次</strong>-&gt;<strong>排序</strong>-&gt;<strong>求TopK</strong>、<strong>海量数据去重</strong>等。</p>
<h4 id="求频次hash-map统计">求频次：hash-map统计</h4>
<p>求频次的问题，我们可以采用<strong>hash-map</strong>的方式，将数据映射到哈希表(<code>key:data,value:count</code>)中，然后统计频次。</p>
<p><strong>时间复杂度</strong>：</p>
<p><strong>有序hash-map</strong>的底层实现是<strong>红黑树</strong>，时间复杂度为<code>n*O(logn)</code></p>
<p><strong>无序hash-map、set</strong>的底层实现是<strong>拉链法</strong>，时间复杂度为<code>O(1)</code>、<code>O(n)</code></p>
<table>
<thead>
<tr>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">有序hash-map</td>
<td style="text-align: center;"><code>n*O(logn)</code></td>
</tr>
<tr>
<td style="text-align: center;">无序hash-map</td>
<td style="text-align: center;"><code>O(1)</code>、<code>O(n)</code></td>
</tr>
</tbody>
</table>
<h4 id="排序堆快排归并">排序：堆/快排/归并</h4>
<p>排序的问题，我们可以采用<strong>堆排序</strong>、<strong>快排</strong>、<strong>归并</strong>等方式时间复杂度较小的算法，将数据进行排序。</p>
<p>一般采用<strong>堆排序</strong>维护一个<strong>大小为K的小根堆</strong>，然后将数据插入堆中，当堆的大小超过K时，将堆顶元素删除，这样可以保证堆中的元素是TopK。</p>
<p><strong>时间复杂度</strong>：</p>
<table>
<thead>
<tr>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">堆排序</td>
<td style="text-align: center;"><code>O(nlogk)</code></td>
</tr>
<tr>
<td style="text-align: center;">快速排序</td>
<td style="text-align: center;"><code>O(nlogn)</code></td>
</tr>
<tr>
<td style="text-align: center;">归并排序</td>
<td style="text-align: center;"><code>O(nlogn)</code></td>
</tr>
</tbody>
</table>
<h4 id="求topk从各块中选取topk">求TopK：从各块中选取TopK</h4>
<p>对于最经典的从海量数据中求TopK的问题，我们可以从各分块中排序后先<strong>分别求TopK</strong>，最后<strong>合并求最终的TopK</strong>。</p>
<h4 id="海量数据去重">海量数据去重</h4>
<p>海量数据去重主要有两种方法：</p>
<ul>
<li><strong>hash-set</strong>
<ul>
<li>将数据映射到哈希表中，经计算后只有唯一值</li>
<li>可以快速定位数据是否存在，时间复杂度为<code>O(1)</code></li>
<li>缺点是需要<strong>额外的空间</strong>来存储数据（空间换时间）</li>
</ul></li>
<li><strong>Trie树</strong>
<ul>
<li>将数据映射到Trie树中，相同前缀的数据只存储一次，通过共享前缀来节省空间</li>
<li>定位时需要遍历Trie树，时间复杂度为<code>max(O(n*len),O(n*lgk))</code>（len为字符串长度，k为需要求的最频繁前k位）</li>
<li>缺点是<strong>空间复杂度</strong>较高，但是可以<strong>压缩存储</strong>，节省空间</li>
</ul></li>
</ul>
<h3 id="怎么合并--归并">1.2.3 怎么合并？- 归并</h3>
<p>合并还有个问题，就是如果<strong>大文件</strong>本身就不能一次性读入内存，那么对于<strong>多个分块</strong>的数据肯定也不能一次性读入内存。这里还是采用<strong>归并</strong>的方法，但是在进行两两归并时，我们需要<strong>将内存划分成3个缓冲区</strong>来动态实现归并。</p>
<ul>
<li>将内存分为<strong>3</strong>块，2块用来存放<strong>需要归并的分块</strong>的数据，1块用来存放<strong>合并后的数据</strong></li>
<li>从分块中读取数据，然后<strong>归并</strong>到<strong>合并块</strong>中</li>
<li>当<strong>合并块满</strong>时，将数据写入磁盘，然后继续读取数据</li>
<li>当<strong>分块空</strong>时，继续读取分块下一部分的数据</li>
</ul>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/merge_bigData1.jpg" width="60%"></p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/merge_bigData2.jpg" width="60%"></p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/merge_bigData3.jpg" width="60%"></p>
<h3 id="举例">1.2.4 举例</h3>
<p><strong>1）有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节内存限制大小是1M。返回频数最高的100个词</strong></p>
<p>由于内存限制，我们依然无法直接将大文件的所有词一次读到内存中。因此，同样可以采用<strong>分治策略</strong>，把一个大文件分解成多个小文件，<strong>保证每个文件的大小小于
1MB（需要分成大约5000个）</strong>，求各个小文件的Top100，进而直接将单个小文件读取到内存中进行处理。</p>
<ul>
<li>分：分而治之/hash映射
<ul>
<li>顺序读取文件，对于每个词x，取<code>hash(x)%5000</code></li>
<li>然后把该值存到5000个小文件(记为x0,x1…...x4999)中。这样每个文件大概是200k左右。</li>
<li>如果其中有的小文件超过了1M大小，还可以按照类似的方法继续往下分，直到分解得到的小文件的大小都不超过1M。</li>
</ul></li>
<li>处理：hash_map统计
<ul>
<li>对每个小文件，采用<code>trie树/hash_map</code>等统计每个文件中出现的词以及相应的频率。</li>
<li>堆/归并排序</li>
<li>取出出现频率最大的<code>100</code>个词(可以用含100个结点的最小堆)后</li>
<li>再把100个词及相应的频率存入文件，这样又得到了5000个文件</li>
</ul></li>
<li>合：归并
<ul>
<li>最后就是把这5000个文件进行<strong>归并</strong>(类似于归并排序)的过程了</li>
</ul></li>
</ul>
<p><strong>2）海量日志数据，提取出某日访问百度次数最多的那个IP</strong></p>
<p>百度作为国内第一大搜索引擎，每天访问它的<strong>IP数量巨大</strong>，如果想一次性把所有IP数据装进内存处理，则内存容量明显不够，故针对数据太大，内存受限的情况，可以<strong>把大文件转化成(取模映射)小文件</strong>，从而大而化小，逐个处理。
换言之，先映射，而后统计，最后排序。</p>
<ul>
<li>分：分而治之/hash映射
<ul>
<li>首先把这一天访问百度日志的所有IP提取出来</li>
<li>然后逐个写入到一个大文件中</li>
<li>接着采用映射的方法，比如<code>%1000</code>，把整个大文件映射为1000个小文件</li>
</ul></li>
<li>处理：hash_map统计
<ul>
<li>当大文件转化成了小文件，那么我们便可以采用<code>hash_map(ip, value)</code>来分别对1000个小文件中的IP进行频率统计，再找出每个小文件中出现频率最大的IP</li>
<li>堆/快速排序</li>
<li>找出那个频率最大的IP</li>
</ul></li>
<li>合：归并
<ul>
<li>最后，再对这1000个频率最大的IP进行归并排序，找出那个频率最大的IP</li>
</ul></li>
</ul>
<p>Hash取模是一种<strong>等价映射</strong>，不会存在同一个元素分散到不同小文件中去的情况，即这里采用的是<code>%1000</code>算法，那么<strong>同一个IP在hash后，只可能落在同一个文件中</strong>，不可能被分散的。</p>
<p><strong>3）给定a、b两个文件，各存放50亿个ur，每个url各占64字节，内存限制是4G，让你找出a、b文件共同的ur?</strong></p>
<p>可以估计每个文件大小为<code>5Gx64=320G</code>，远远大于内存限制的4G。所以不可能将其完全加载到内存中处理。考虑采取分而治之的方法。</p>
<ul>
<li>分：分而治之/hash映射
<ul>
<li><strong>遍历文件a</strong>，对每个url求取
<code>hash(URL)% 1000</code>，然后根据所取得的值将url分别存储到1000个小文件(记为a1-a999)中。这样每个小文件的大约为300M</li>
<li><strong>遍历文件b</strong>，同样对每个url求取
<code>hash(URL)% 1000</code>，然后根据所取得的值将url分别存储到1000个小文件(记为b1-b999)中</li>
<li>这样处理后，所有可能相同的url都在对应的小文件(即<strong>a1 对应
b1</strong>，a2 对应b2..，a999 对应
b999)中，<strong>不对应的小文件不可能有相同的url</strong></li>
</ul></li>
<li>处理+合并：hash_map统计
<ul>
<li>首先对A的小文件在<code>hash_set</code>中进行去重操作</li>
<li>然后查找B的小文件是否有url在刚才构建的<code>hash_set</code>中</li>
<li>如果是，那么就是共同的url，存到文件里面就可以了</li>
</ul></li>
</ul>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_45683778/article/details/136694740">何为一致性哈希</a></p>
</blockquote>
<h1 id="二高并发分布式系统设计基础">二、高并发分布式系统设计基础</h1>
<p>面对高并发场景，我们通常有两种大解决方向：</p>
<ul>
<li>垂直方向：提升单机能力
<ul>
<li>这种方式主要是通过<strong>硬件升级</strong>，如<strong>购买多核高频机器，大内存，大容量磁盘</strong>等</li>
<li><strong>软件优化</strong>，如<strong>多线程</strong>、<strong>异步</strong>、<strong>缓存</strong>等</li>
<li>但是这种方式有<strong>瓶颈</strong>，即<strong>硬件成本高</strong>，以及当硬件达到一定程度时，提升单机性能的效果会<strong>递减</strong>。</li>
</ul></li>
<li>水平方向：分布式集群
<ul>
<li>这种方式主要是通过<strong>多台机器</strong>，通过<strong>微服务解耦</strong>将数据分布到不同的机器上，从而提升系统的性能
<ul>
<li>架构层次分层</li>
<li>业务服务划分</li>
</ul></li>
<li>这种方式<strong>成本低</strong>，<strong>可扩展性强</strong>，但是<strong>复杂度高</strong>，需要考虑<strong>数据一致性</strong>、<strong>负载均衡</strong>等问题</li>
</ul></li>
</ul>
<p>当前最常见的高并发系统设计是<strong>分布式系统设计</strong>，即将数据分布到不同的机器上，通过<strong>负载均衡</strong>、<strong>一致性哈希</strong>等技术来提升系统的性能。因此后面我们主要讲的就是<strong>水平方向分布式</strong>场景下的设计理念和框架。</p>
<p>一般我们在分布式系统设计中，主要关注以下几个方面：</p>
<ul>
<li><strong>池化技术：内存池、线程池、连接池</strong></li>
<li><strong>负载均衡：保证用户分流</strong></li>
<li><strong>缓存：提高响应速度</strong>
<ul>
<li><strong>分布式锁</strong></li>
</ul></li>
<li><strong>数据库存储</strong>
<ul>
<li><strong>分布式事务</strong></li>
</ul></li>
<li><strong>消息队列</strong></li>
<li><strong>限流：控制并发访问量，避免过载</strong></li>
<li><strong>熔断</strong></li>
<li><strong>降级：保证核心功能</strong></li>
</ul>
<p>整体并发架构如下：</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/concurrent_architecture.jpg" width="80%"></p>
<h2 id="分布式cap理论">2.1 分布式CAP理论</h2>
<p>CAP理论是分布式系统设计中的一个重要理论，它指出在分布式系统中，<strong>一致性（Consistency）、可用性（Availability）、分区容错性（Partition
tolerance）</strong>三者不可兼得，<strong>只能同时满足其中两个</strong>。</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/CAP.png" width="50%"></p>
<ul>
<li><strong>一致性C</strong>
<strong>所有节点</strong>在同一时间的数据是<strong>一致</strong>的，即<strong>等同于所有节点访问同一份最新的数据副本</strong></li>
<li><strong>可用性A</strong>
<strong>客户的每个请求</strong>都能够得到<strong>非错响应</strong>，但是但是不保证获取的数据为最新数据</li>
<li><strong>分区容错性P</strong>
<ul>
<li><strong>系统</strong>能够<strong>容忍网络分区</strong></li>
<li>针对<strong>一致性的容错性</strong>：当不要求保证<strong>一致性</strong>时，每个节点使用<strong>本地数据</strong>，在同一时间内可能出现<strong>全局不一致</strong>，但是一段时间后<strong>最终一致</strong></li>
<li>针对<strong>可用性的容错性</strong>：必须保证<strong>一致性</strong>，但是<strong>不保证可用性</strong>，即<strong>允许部分服务停止</strong>，直到<strong>网络分区</strong>解决</li>
</ul></li>
</ul>
<p><strong>1）CA系统：单点集群</strong></p>
<p>对于业务扩展性不强、并发性要求不高的系统，我们可以采用<strong>单点集群</strong>的方式同时保证<strong>一致性</strong>和<strong>可用性</strong></p>
<p>场景：<strong>银行系统</strong>、<strong>图书馆管理系统</strong></p>
<p><strong>2）CP系统：放弃高可用性（高性能）</strong></p>
<p>对于对<strong>一致性</strong>要求较高的系统，我们可以采用<strong>放弃可用性</strong>的方式来保证<strong>一致性</strong></p>
<p>一旦遇到<strong>分区故障</strong>，就要允许放弃<strong>一部分业务</strong>，通常性能不高</p>
<p>场景：火车票售票系统、redis</p>
<p><strong>3）AP系统：最终一致性</strong></p>
<p>某些场景下对<strong>一致性</strong>要求不高，我们可以采用<strong>最终一致性</strong>的方式来保证<strong>绝对可用性</strong></p>
<p>通常很多分布式系统都是采用<strong>AP</strong>来实现的（买票时看到有几张余票，但是买的时候告诉你没有了，当再次刷新发现确实没票）</p>
<p>场景：<strong>电商系统</strong>、<strong>社交系统（博客，微博）</strong>、<strong>搜索引擎</strong></p>
<h2 id="系统并发指标">2.2 系统并发指标</h2>
<ul>
<li><strong>TPS</strong>：一台服务器每秒能处理的<strong>事务数</strong>
<ul>
<li>一个客户端请求就是一个事务</li>
</ul></li>
<li><strong>QPS</strong>：一台服务器每秒能响应的<strong>查询次数</strong>
<ul>
<li>一个客户端请求可能有多个查询，所以<strong>QPS</strong>是<strong>TPS</strong>的<strong>倍数</strong>，QPS&gt;=TPS</li>
</ul></li>
</ul>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/QPS_TPS.png" width="30%"></p>
<ul>
<li><p><strong>并发数</strong>：系统<strong>同时</strong>承载的并发用户数</p></li>
<li><p><strong>响应时间</strong>：系统<strong>响应一个请求</strong>的时间</p></li>
</ul>
<h2 id="分布式负载均衡-1">2.3 分布式负载均衡</h2>
<p>负载均衡是为了满足多台服务器情况下的<strong>高可用</strong>需求，通过<strong>负载均衡（）</strong>可以将<strong>请求分发到不同的服务器实例上</strong>，从而提高系统的性能。</p>
<p>负载均衡通过不断向<strong>后端服务器</strong>发送<strong>心跳检测</strong>，来检测服务器的<strong>健康状态</strong>，从而保证<strong>负载均衡的准确性</strong>。</p>
<p>负载均衡有<strong>硬件负载均衡</strong>和<strong>软件负载均衡</strong>两种方式：</p>
<ul>
<li><strong>硬件负载均衡</strong>性能好，但是可扩展性差，成本高</li>
<li><strong>软件负载均衡</strong>性能一般，但是可扩展性强，成本低</li>
</ul>
<p>目前常见的三种软件负载均衡：</p>
<ul>
<li><strong>基于DNS负载均衡</strong>：通过<strong>地理位置</strong>or加权，根据IP映射到不同服务器</li>
<li><strong>基于网络层负载均衡</strong>：基于<strong>IP地址和端口号</strong>来分发流量</li>
<li><strong>基于应用层负载均衡</strong>：解包HTTP请求的特性（如请求头、URL、主机名等）来分发<strong>不同业务请求</strong>到<strong>不同后端服务器</strong></li>
</ul>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/LB2.png" width="80%"></p>
<p>一般大型服务器系统中，会同时包含这三种均衡方式</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/LB.png" width="50%"></p>
<h3 id="dns负载均衡">2.3.1 DNS负载均衡</h3>
<p>DNS对某个域名进行<strong>IP映射</strong>，DNS负载均衡通过<strong>DNS解析</strong>将<strong>域名解析</strong>到<strong>多个不同的IP地址</strong>，然后将解析后的IP地址返回给客户端，从而实现<strong>负载均衡</strong>。能够对网站加载进行加速</p>
<p>做为第一层的负载均衡，它能根据不同地理位置的用户返回<strong>离用户最近的服务器</strong>，减少中间的网络传输延迟和丢包率</p>
<p>但是由于DNS解析是<strong>有缓存</strong>的（包括本地DNS缓存、客户端缓存等），所以<strong>DNS负载均衡</strong>无法确保各地服务器<strong>负载均匀</strong></p>
<p><strong>DNS负载均衡的实现策略</strong></p>
<p><strong>1）轮询策略</strong></p>
<p>DNS服务器中维护一个<strong>服务器列表</strong>，每次请求时按照<strong>轮询</strong>的方式返回<strong>服务器列表</strong>中的<strong>下一个服务器IP</strong>，也就是N台服务器的IP按照顺序返回给不同的客户端</p>
<p>缺点：无法根据各个服务器的<strong>负载情况</strong>和<strong>地理位置</strong>来返回服务器IP</p>
<p><strong>2）地理位置策略</strong></p>
<p>DNS服务器通过<strong>解析</strong>判断客户端请求的<strong>来源IP地址</strong>，然后将请求解析到<strong>地理位置最近</strong>的或者<strong>网络延迟最低</strong>的服务器</p>
<p><strong>3）权重策略</strong></p>
<p>每个服务器IP都有一个<strong>权重值</strong>，根据<strong>权重值</strong>来返回<strong>服务器IP</strong></p>
<p>权重值可以根据<strong>服务器负载情况</strong>、<strong>地理位置</strong>等来设置</p>
<p><strong>4）智能DNS</strong></p>
<p>DNS可以通过：</p>
<ul>
<li><strong>心跳</strong>监测服务器是否故障（定期向注册的服务器发送探测请求HTTP、TCP、ICMP等）</li>
<li>通过<strong>服务器监测工具</strong>定期收集注册服务器的<strong>性能数据</strong></li>
<li>根据<strong>性能数据</strong>来<strong>动态调整</strong>服务器的<strong>权重值</strong></li>
<li>结合<strong>地理位置</strong>和<strong>动态权重值</strong>返回<strong>最优服务器IP</strong></li>
</ul>
<h3 id="网络层应用层负载均衡nginx">2.3.2
网络层&amp;应用层负载均衡：Nginx</h3>
<p><strong>Nginx</strong>具有<strong>web服务器</strong>、<strong>负载均衡</strong>、<strong>反向代理</strong>等功能，是一个<strong>高性能</strong>的<strong>HTTP</strong>和<strong>反向代理</strong>服务器。</p>
<p><strong>Nginx</strong>是一种基于应用层的<strong>软件负载均衡</strong>，通常根据解析的<strong>URL</strong>来<strong>反向代理转发请求</strong></p>
<p><strong>Nginx</strong>的<strong>负载均衡</strong>有<strong>轮询</strong>、<strong>加权轮询</strong>、<strong>IP哈希</strong>、<strong>最少连接</strong>等策略</p>
<p><strong>1）IP哈希</strong></p>
<p>根据<strong>客户端IP地址</strong>的<strong>哈希值</strong>来<strong>分配</strong>请求，这样可以保证<strong>同一个IP</strong>的请求<strong>始终</strong>分配到<strong>同一个服务器</strong>上</p>
<p><strong>2）最少连接</strong></p>
<p>将请求分配到<strong>连接数最少</strong>的服务器上，这样可以保证<strong>负载均衡</strong>，但是<strong>性能</strong>可能会受到<strong>影响</strong></p>
<h2 id="分布式缓存">2.4 分布式缓存</h2>
<p>在高并发场景下，缓存机制可以<strong>有效缓解实例服务器和数据库压力</strong>、<strong>提高网页访问速度</strong></p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Cache-type.png" width="80%"></p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Cache-problem.png" width="80%"></p>
<h3 id="本地客户端缓存">2.4.1 本地客户端缓存</h3>
<p>常用于缓存<strong>实时性不敏感</strong>、<strong>静态网页</strong>，如在大促期间提前将一些<strong>js/css/image</strong>文件缓存至本地，避免在大促期间再次请求</p>
<p>本地客户端缓存可以通过<strong>HTTP缓存机制</strong>来实现</p>
<ul>
<li>强制缓存
<ul>
<li><code>Expires</code>字段：绝对时间</li>
<li><code>Cache-Control</code>字段：倒计时时间</li>
</ul></li>
<li>协商缓存
<ul>
<li><code>Last-Modified</code>字段：当前缓存对应的最后修改时间</li>
<li><code>E-tag</code>字段：当前缓存资源的<strong>哈希值</strong></li>
</ul></li>
<li>混合缓存</li>
</ul>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/HTTP_cache_2.jpg" width="70%"></p>
<h3 id="cdn-内容分发网络">2.4.2 CDN-内容分发网络</h3>
<p>CDN是由专门的机构在世界各地建立<strong>边缘服务器</strong>，用户通过DNS域名解析获取<strong>最近的CDN服务器</strong>，从该CDN服务器上获取资源而不是直接从实例服务器获取，大大加快了请求响应速度。</p>
<p>同时由于CDN替实例服务器分流了，所以还可以大大<strong>减少带宽</strong>（虽然还需要向CDN服务商付费）</p>
<p>CDN中的缓存内容：</p>
<ul>
<li>静态网页资源</li>
<li>动态网页API接口</li>
</ul>
<p>CDN缓存机制主要有两种：</p>
<ul>
<li><strong>主动推送</strong>（push）：服务器主动将缓存push给CDN</li>
<li><strong>拉去机制</strong>（pull）：客户端首次访问CDN中不存在的资源，CDN主动从源服务器中获取数据并存储在CDN节点上</li>
</ul>
<h3 id="反向代理缓存">2.4.3 反向代理缓存</h3>
<p>反向代理服务器如<code>Nginx</code>除了上面提到的负载均衡外，还可以通过<strong>配置</strong>具有<strong>缓存</strong>功能，也是存储<strong>静态资源</strong>，返回给用户时从缓存中拿，不再向源服务器请求</p>
<h3 id="redis缓存">2.4.4 redis缓存</h3>
<p>Redis缓存是指分散存储在服务器上，在<strong>内存中进行计算的缓存</strong>，相比磁盘中的数据库具有<strong>更快的响应速度</strong></p>
<p>Redis是一种高性能的<strong>键值key-value存储</strong>系统，用其<strong>快速的读写能力</strong>和<strong>一致性哈希算法</strong>实现数据分片和<strong>负载均衡</strong>（通过一致性哈希算法分配给集群中的某个缓存）</p>
<p><strong>redis集群缓存带来的问题</strong></p>
<p>1）缓存穿透</p>
<p>问题：</p>
<ul>
<li>请求<strong>缓存和数据库都没有</strong>的数据 都去访问数据库 -&gt;
数据库崩溃、服务器宕机</li>
</ul>
<p>解决：</p>
<ul>
<li><strong>布隆过滤器</strong>：将数据库中的数据映射到布隆过滤器中，当请求来临时，先通过布隆过滤器判断是否存在，不存在则直接返回</li>
<li><strong>空值缓存</strong>：将数据库中不存在的数据也存入缓存(设为空值)</li>
</ul>
<p>2）缓存击穿</p>
<p>问题：</p>
<ul>
<li><strong>单个热点key失效</strong> 都去访问数据库 -&gt;
数据库崩溃、服务器宕机</li>
</ul>
<p>解决：</p>
<ul>
<li><strong>热点数据永不过期</strong>：将热点数据设置为永不过期，当失效时，立即更新</li>
<li><strong>互斥锁</strong>：当热点数据失效时，通过互斥锁来保证只有一个线程去访问数据库，其他线程等待</li>
<li><strong>多级缓存</strong></li>
</ul>
<p>3）缓存雪崩</p>
<p>问题：</p>
<ul>
<li><strong>大量key同时失效</strong> 都去访问数据库 -&gt;
数据库崩溃、服务器宕机</li>
<li>服务器宕机： 采用普通哈希算法导致所有Key同时失效 -&gt;
都去访问数据库 -&gt; 数据库崩溃</li>
</ul>
<p>解决：</p>
<ul>
<li><strong>缓存失效时间随机</strong>：将缓存失效时间设置为随机时间，<strong>避免同时失效</strong></li>
<li><strong>多级缓存</strong></li>
</ul>
<p>4）数据一致性</p>
<p>缓存一致性指的是<strong>缓存与DB</strong>之间的数据一致性</p>
<p>需要保证<strong>始终一直</strong>或<strong>最终一致</strong></p>
<p>常用的解决方法是</p>
<ul>
<li>缓存的分布式锁</li>
<li>DB数据库的分布式事务</li>
</ul>
<p>数据一致性的两种方法将在后面详细介绍</p>
<h2 id="分布式消息队列">2.5 分布式消息队列</h2>
<p>在高并发场景下，<strong>同步</strong>的请求处理方式往往会导致系统<strong>响应时间变长</strong>和<strong>资源消耗增加</strong>。</p>
<p>因此我们可以采用<strong>异步</strong>的方式，将<strong>耗时的操作</strong>或<strong>复杂的业务逻辑</strong>异步化处理，并将<strong>结果通过消息队列传递</strong>，可以实现<strong>解耦</strong>和异步化处理，在只需要<strong>最终一致性</strong>的场景下，很适合用来配合做流控。</p>
<p><strong>分布式缓存</strong>在<strong>读多写少</strong>的场景性能优异，对于<strong>写操作较多</strong>的场景可以采用<strong>消息队列</strong>集群，它可以很好地做写请求异步化处理，实现<strong>削峰填谷</strong>的效果。</p>
<p>业界有很多著名的消息中间件，比如ZeroMQ，rabbitMQ，kafka等。</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/MessageQueue.png"></p>
<h3 id="消息队列的优点">2.5.1 消息队列的优点</h3>
<p><strong>1）异步</strong></p>
<p>如果我们按照同步的处理方式来设计，比如设计一个<strong>用户注册</strong>功能，会经过<strong>用户注册-&gt;短信通知-&gt;增加积分</strong>三个串行同步步骤，这种方式的话，总耗时是<strong>三个步骤的总和</strong>。</p>
<p>总耗时：10ms+100ms+100ms=210ms</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/message_queue1.png" width="60%"></p>
<p>而如果在中间加上一层<strong>消息队列</strong>实现异步并行处理，那么总耗时将只剩下<strong>用户注册</strong>这一步，因为通过异步方式，用户注册后消息队列就可以返回，后面的<strong>两个耗时步骤</strong>直接与消息队列通信拉取信息。用户不需要阻塞在那等待耗时步骤完成。</p>
<p>总耗时：10ms</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/message_queue2.png" width="60%"></p>
<p><strong>2）业务解耦</strong></p>
<p>业务解耦是在<strong>异步</strong>的基础上实现的，如果是同步的话，<strong>用户注册</strong>和<strong>短信通知</strong>是<strong>紧耦合</strong>的，如果<strong>短信通知</strong>出现问题，那么<strong>用户注册</strong>也会受到影响。</p>
<p>而使用了<strong>消息队列</strong>实现异步后，消息发送方和接收方不直接联系，各个业务之间也相对独立，不会因为<strong>某个业务</strong>的<strong>宕机</strong>影响到<strong>其他业务</strong></p>
<p><strong>3）削峰填谷</strong></p>
<p>举个例子，在高并发场景下，假设1min内有30W个请求（<code>30W/min</code>），而后端业务服务器只能处理<code>1W/min</code>，那么超量的请求可能会导致服务器宕机。</p>
<p>加入我们在请求和处理方中间加上一层<strong>消息队列</strong>，消息队列只做简单的数据接收任务，能处理<code>100W/min</code>，此时由后端服务器主动向消息队列拉去任务就可以控制后端服务器不过载，达到控制流量的作用。</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/liuliang.png" width="70%"></p>
<h3 id="消息队列优化设计">2.5.2 消息队列优化设计</h3>
<p>根据简陋版本消息队列的各种问题，可以进行优化来提高可用性及性能</p>
<p>根据Kafka的设计理念来剖析优化方向</p>
<p><strong>1）MQ数据堆积</strong></p>
<p>MQ中数据堆积本质是消费者消费能力差，可以通过<strong>增加消费者线程</strong>，也就是多消费者模式，同理也可以添加多生产者提高吞吐量</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/multiConsumers.jpg" width="60%"></p>
<p><strong>2）多生产者和多消费者竞争MQ</strong></p>
<p><strong>分Topic</strong></p>
<p>将消息队列根据<strong>不同主题Topic</strong>分为<strong>多个MQ</strong>减少冲突等待</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/multiTopic.jpg" width="60%"></p>
<p><strong>Topic的Partition分区</strong></p>
<p>单个Topic中还可以再细分成<strong>多个Partition分区</strong>，每个消费者对应一个Partition分区，从而<strong>降低多线程竞争</strong></p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/multiPartition.jpg" width="60%"></p>
<p><strong>3）高性能</strong></p>
<p>将多个Partition分布在不同机器上，每个机器称为<strong>broker</strong></p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/multiBroker.jpg" width="60%"></p>
<p><strong>4）高可用</strong></p>
<p>单个broker如果宕机了，该部分的功能将无法继续进行，因此可以设计<strong>leader-follower</strong>的集群方式</p>
<p><strong>leader</strong>负责读写数据，<strong>follower</strong>负责复制数据，当<strong>leader</strong>宕机时可以从<strong>follower</strong>中选举出新的<strong>leader</strong></p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/leader-follower.jpg" width="60%"></p>
<p><strong>5）持久化</strong></p>
<p>数据放在内存中有宕机丢失的风险，因此数据还应该具备<strong>持久化到磁盘</strong>的能力</p>
<p>同时为了防止磁盘溢出，还应该设置<strong>过期时间</strong></p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/savetodisk.jpg" width="60%"></p>
<p>根据不同的优化策略，形成了不同的<strong>消息队列中间件</strong>，可以根据需求和中间件的优缺点选择合适的方案：</p>
<table>
<tr>
<th style="text-align: center;">
中间件
</th>
<th style="text-align: center;">
RabbitMQ
</th>
<th style="text-align: center;">
RocketMQ
</th>
<th style="text-align: center;">
Kafka
</th>
</tr>
<tr>
<th style="text-align: center;">
性能
</th>
<td style="text-align: center;">
6000/单机
</td>
<td style="text-align: center;">
12000/单机
</td>
<td style="text-align: center;">
100W/单机
</td>
</tr>
<tr>
<th style="text-align: center;">
持久化
</th>
<td style="text-align: center;">
都支持（性能下降）
</td>
<td style="text-align: center;">
天生支持
</td>
<td style="text-align: center;">
天生支持
</td>
</tr>
<tr>
<th style="text-align: center;">
多语言
</th>
<td style="text-align: center;">
主流都
</td>
<td style="text-align: center;">
Java
</td>
<td style="text-align: center;">
主流都
</td>
</tr>
<tr>
<th style="text-align: center;">
综合
</th>
<td style="text-align: center;">
高可用、管理界面、集群不支持动态扩展
</td>
<td style="text-align: center;">
简单易用、适合大规模，但只支持Java
</td>
<td style="text-align: center;">
天生分布式、性能最好，但运维困难、带宽要求大
</td>
</tr>
</table>
<h3 id="rabbitmq设计">2.5.3 RabbitMQ设计</h3>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/RabbitMQDesign.png"></p>
<p>RabbitMQ中主要涉及的模块元素有：</p>
<ul>
<li><strong>Producer生产者</strong>：负责<strong>生产和发送消息</strong>，一般是直接与<strong>交换机</strong>连接</li>
<li><strong>Connection连接</strong>：生产者与Broker的连接、Broker与消费者的连接</li>
<li><strong>virtual
Host虚拟机</strong>：一个Broker可以有多个虚拟机，每个虚拟机实现一种业务，虚拟机之间数据互相隔离</li>
<li><strong>Exchange交换机</strong>：生产者将消息发送到交换机，交换机根据<strong>路由规则</strong>将消息发送到<strong>某个队列</strong></li>
<li><strong>Queue队列</strong>：存储消息的<strong>缓冲区</strong></li>
<li><strong>Comsumer消费者</strong>：负责<strong>接收和处理消息</strong>
<ul>
<li>多个消费者绑定同一个队列可以通过<strong>消息轮询</strong>的方式进行分发</li>
</ul></li>
</ul>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/RabbitMQ.jpg"></p>
<p><strong>1）消息丢失</strong></p>
<p>RabbitMQ的消息丢失主要有三种情况：</p>
<ul>
<li><strong>生产者丢失</strong>：发送者发送失败，可能是<strong>网络</strong>原因
<ul>
<li>通过<strong>消息确认机制Comfirm</strong>接收<strong>ACK或NACK</strong>以及重传来实现，确保消息投递到了queue中</li>
</ul></li>
<li><strong>Broker丢失</strong>：消息未发送存储到queue中可能就出现<strong>Broker宕机</strong>等原因丢失
<ul>
<li>通过<strong>持久化</strong>来实现</li>
</ul></li>
<li><strong>消费者丢失</strong>：消息接收也可能因为<strong>网络或者处理失败</strong>等原因丢失
<ul>
<li>通过<strong>ACK事务机制</strong>来实现。消费者成功处理完后才会发送<strong>ACK</strong>告知Broker可以删除该条消息</li>
</ul></li>
</ul>
<p><strong>2）消息重复</strong></p>
<p>消息可能出现重复消费的原因：</p>
<ul>
<li><strong>生产者重复推送</strong></li>
<li><strong>Broker收到ACK后还未删除就宕机</strong>：重启后会再次发送该消息给消费者</li>
<li><strong>消费者处理完后未发送ACK就宕机</strong>：重启后MQ超时没收到ACK会重新推送该条消息给消费者处理</li>
</ul>
<p>解决方法：</p>
<p><strong>插入去重表</strong>：消费去重表可以是MySQL存储，也可以是Redis存储</p>
<ul>
<li>收到消息后先查询去重表，如果存在则不处理，否则将该消息插入去重表再进行处理</li>
<li>处理完再将该消息状态更改为已处理</li>
</ul>
<p><strong>3）消息顺序</strong></p>
<p>除非采用单线程消费，否则<strong>消息顺序</strong>无法保证，但是可以尽量保证消息顺序</p>
<ul>
<li>同一个<strong>queue</strong>中的消息是顺序的</li>
<li>Exchange路由器指定分发同样的key到某个queue中</li>
<li><strong>queue</strong>中增加一些机制，只有某个操作收到ACK后才分发下一个</li>
</ul>
<h3 id="kafka设计">2.5.4 Kafka设计</h3>
<p>Kafkade的设计架构在前面<strong>优化</strong>部分已经有大致提及了</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/KafkaStruct.jpg"></p>
<p>所以接下来还是将重心放在<strong>Kafka</strong>怎么解决<strong>消息丢失</strong>、<strong>消息重复</strong>、<strong>消息顺序</strong>三大问题</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/KafkaDesign.png"></p>
<p><strong>1）消息丢失</strong></p>
<ul>
<li><strong>生产者丢失</strong>：发送者发送失败，可能是<strong>网络</strong>原因
<ul>
<li>通过<strong>消息确认机制Comfirm</strong>接收<strong>ACK或NACK</strong>以及回调重传来实现，确保消息投递到了queue中</li>
</ul></li>
<li><strong>Broker丢失</strong>：消息未发送存储到queue中可能就出现<strong>Broker宕机</strong>等原因丢失
<ul>
<li>通过<strong>持久化</strong>来实现</li>
<li>Kafka对每个<strong>Partition</strong>提供了<strong>leader-follower</strong>的副本机制方式，当<strong>leader</strong>宕机时可以从<strong>follower</strong>中选举出新的<strong>leader</strong></li>
</ul></li>
<li><strong>消费者丢失</strong>：消息接收也可能因为<strong>网络或者处理失败</strong>等原因丢失
<ul>
<li>通过<strong>ACK事务机制</strong>来实现。消费者成功处理完后才会发送<strong>ACK</strong>告知Broker可以删除该条消息</li>
</ul></li>
</ul>
<p><strong>2）消息重复</strong></p>
<p>Kafka的消息队列中通过<strong>offset</strong>来标记消息的位置，消费者消费完后会自动提交<strong>offset</strong>来避免重复消费，但是依然这也导致了如果<strong>消费者宕机</strong>，重启后消息队列可能触发了超时重传导致重复消费。</p>
<p>在这个背景下，避免消息重复处理的方式跟RabbitMQ一样，可以通过<strong>插入去重表</strong>来实现：</p>
<p>解决方法：</p>
<p><strong>插入去重表</strong>：消费去重表可以是MySQL存储，也可以是Redis存储</p>
<ul>
<li>收到消息后先查询去重表，如果存在则不处理，否则将该消息插入去重表再进行处理</li>
<li>处理完再将该消息状态更改为已处理</li>
</ul>
<p><strong>3）消息顺序</strong></p>
<p><strong>为什么会出现消息顺序问题呢？</strong></p>
<p>Kafka的消息队列中，<strong>同一个Partition</strong>中的消息是有序的，但是<strong>不同Partition</strong>中的消息是<strong>无序</strong>的，因此如果<strong>同一个业务</strong>的消息被<strong>路由分发到不同Partition</strong>中，那么就会出现<strong>消息消费顺序不是消息发送顺序</strong>的问题。</p>
<p>解决方法：</p>
<p>基于这个背景，可以采用<strong>自定义路由</strong>的方式，将<strong>同一个业务（指定的key）</strong>的消息<strong>路由到同一个Partition</strong>中，再指定某个消费者线程去<strong>定向取</strong>某个Patition分区的消息，从而保证消息的顺序性。</p>
<ul>
<li><strong>自定义路由</strong>：通过<strong>自定义路由</strong>将<strong>同一个业务（按照key取模）</strong>的消息<strong>路由到同一个Partition</strong>中</li>
<li><strong>指定消费者</strong>：指定某个消费者线程去<strong>定向取某个Patition分区</strong>的消息</li>
</ul>
<p><strong>6）主从数据一致性</strong></p>
<p>前面提到Kafka会通过<strong>leader-follower</strong>的副本机制来减少数据丢失，这里的数据存储涉及<strong>MySQL</strong>或<strong>Redis</strong>数据库</p>
<ul>
<li>MySQL下的数据一致性：通过<strong>Follower</strong>节点拉取<strong>Leader</strong>的<strong>binlog</strong>日志，然后<strong>同步</strong>到<strong>Follower</strong>节点</li>
<li>Redis下的数据一致性：主-从-从方式，主节点写入数据后，从节点同步数据，再从从节点同步到其他从节点</li>
</ul>
<p><strong>5）leader-follower下的选举问题：ISR</strong></p>
<p>Kafka中的<strong>leader-follower</strong>机制是指<strong>leader</strong>负责读写数据，<strong>follower</strong>负责复制数据，当<strong>leader</strong>宕机时可以从<strong>follower</strong>中选举出新的<strong>leader</strong></p>
<p>但是在<strong>leader-follower</strong>机制下，<strong>follower</strong>可能会出现<strong>数据同步滞后</strong>的问题，导致<strong>数据不一致</strong>。</p>
<p>为了解决这个问题，Kafka中引入了<strong>ISR</strong>机制，在<strong>ISR</strong>中维护一个集合，该集合是代表<strong>存储最新数据离leader最近的follower</strong>，只有<strong>ISR</strong>中的<strong>follower</strong>才能被选举为<strong>leader</strong></p>
<p>因此采用ISR的好处主要有两个：</p>
<ul>
<li><strong>提高宕机后重选leader的效率</strong>：只有ISR中的follower才能被选举为leader，提高了选举效率</li>
<li><strong>避免数据丢失</strong>：因为ISR中节点的数据和leader节点的数据是最接近的</li>
</ul>
<h2 id="分布式数据库">2.6 分布式数据库</h2>
<p>传统的数据库系统是<strong>单机数据库</strong>，在高并发场景下，单机数据库可能会出现<strong>性能瓶颈</strong>，面对这种需求，我们一般有<strong>纵向扩展</strong>和<strong>横向扩展</strong>两种方式。</p>
<ul>
<li><strong>纵向扩展</strong>：提高单机数据库的性能，如<strong>增加CPU</strong>、<strong>增加内存</strong>、<strong>增加硬盘</strong>等
<ul>
<li>成本过高，不适合现在海量数据的场景</li>
</ul></li>
<li><strong>横向扩展</strong>：通过<strong>分布式数据库</strong>来实现，将数据分布在多个节点上，从而提高系统的性能
<ul>
<li>适合海量数据的场景，需要考虑<strong>数据库容灾</strong>、<strong>数据一致性</strong>等问题</li>
</ul></li>
</ul>
<p>这里主要讨论怎么解决<strong>数据库容灾</strong>问题</p>
<p>数据库容灾是指在<strong>数据库宕机</strong>或<strong>数据丢失</strong>时，能够<strong>快速恢复</strong>数据，保证系统的<strong>高可用性</strong></p>
<p>一般出现故障的原因主要有三大类：</p>
<ul>
<li><strong>服务器主机故障</strong>：服务器过载宕机、网络故障等</li>
<li><strong>机房故障</strong>：机房电力系统出现问题、火灾等</li>
<li><strong>地域故障</strong>：发生地震、火灾等</li>
</ul>
<p>出现这些问题最需要解决的就是<strong>系统恢复</strong>、<strong>保证数据不丢失</strong></p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/avoidProblem.png" width="60%"></p>
<p><strong>1）主从数据库备份</strong></p>
<p>通过<strong>主从复制技术</strong>、<strong>binglog</strong>等技术实现同步</p>
<p><strong>2）数据分片</strong></p>
<p>将数据根据<strong>业务需求</strong>，通过分片键如<strong>用户ID</strong>、<strong>订单ID</strong>等决定哪个数据库集群存储特定数据</p>
<p><strong>3）数据一致性</strong></p>
<p>通过<strong>分布式事务</strong>、<strong>分布式锁</strong>等技术来保证数据一致性</p>
<p><strong>4）防止过载</strong></p>
<p>通过前面讲到的<strong>负载均衡</strong>、<strong>限流</strong>等技术来保证系统不会因为过载而宕机</p>
<p><strong>5）读写分离</strong></p>
<p>应用中的<strong>读操作</strong>远远多于<strong>写操作</strong>，可以通过<strong>读写分离</strong>来减轻数据库的压力</p>
<p>写操作：主数据库</p>
<p>读操作：从数据库</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/readSlaveWriteMaster.jpg"></p>
<h2 id="分布式事务和分布式锁">2.7 分布式事务和分布式锁</h2>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/dataAll.png" width="80%"></p>
<p>这两种方式都是为了保证<strong>MySQL</strong>和<strong>Redis</strong>数据一致性的</p>
<p>服务器在响应读数据请求时，会先从<strong>Redis</strong>中读取数据，如果<strong>Redis</strong>中没有数据，再从<strong>MySQL</strong>中读取数据，然后将数据返回给客户端。</p>
<p>而对于<strong>写数据</strong>则有多种更新方式（建议采用删除Redis而不是更新修改Redis）：</p>
<ul>
<li><p><strong>先更新Redis再更新MySQL</strong>：如果先更新Redis，那么如果MySQL更新失败回滚，还要再次回滚Redis</p></li>
<li><p><strong>先更新MySQL再更新Redis</strong>：如果先更新MySQL，那么当<strong>线程1</strong>被最新的<strong>线程2</strong>抢占CPU资源后，会出现线程2的数据先写入缓存，线程2的数据后写入数据库，导致缓存存的不是最新数据</p></li>
<li><p><strong>先删除Redis再更新MySQL</strong>：也会有数据不一致问题（通过<strong>延迟双删</strong>来解决）
<img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/deleteUpdate.png" width="60%"></p></li>
<li><p><strong>先更新MySQL再删除Redis</strong>：目前比较有效的方式
<img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/updateDelete.png" width="60%"></p></li>
</ul>
<p>而由于分布式数据库有<strong>读写分离</strong>的设计，所以会有概率出现从数据库还没来得及更新，就被请求读取了，导致缓存与数据库数据不一致的问题</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/DistributedTransaction.jpg" width="60%"></p>
<p>这里的解决办法是加上一层消息队列保证顺序性。</p>
<h3 id="分布式锁">2.7.1 分布式锁</h3>
<p>传统的<strong>同步锁</strong>是<strong>单机锁</strong>，只能保证在单机下多线程的同步</p>
<p>而在<strong>分布式</strong>场景下，多个服务器之间的<strong>同步</strong>就需要<strong>分布式锁</strong>来实现，否则还会出现类似<strong>超卖</strong>现象</p>
<p>主流分布式锁有：</p>
<ul>
<li>Redis：通过<strong>setnx</strong>设置键值对，如果返回1则表示加锁成功，否则设置失败
<ul>
<li>要记得加上锁过期时间，避免造成死锁
<img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/RedisLock.jpg" width="60%"></li>
<li>过期时业务还没执行完怎么办？---<strong>添加一个线程每n秒判断服务器是否在线</strong>、<strong>给锁加一个唯一ID（UUID）</strong></li>
<li>以上设计方式实际上可以通过<strong>Redisson</strong>来一步实现(lua脚本)
<img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Redisson.jpg" width="60%"></li>
</ul></li>
<li>Zookeeper：通过<strong>临时节点</strong>来实现分布式锁
<ul>
<li>通过<strong>创建临时节点</strong>来实现分布式锁，如果<strong>创建成功</strong>则表示加锁成功，否则加锁失败</li>
<li>通过<strong>监听节点</strong>来实现<strong>锁释放</strong>，当节点被删除时，其他节点可以重新加锁</li>
</ul></li>
</ul>
<h3 id="分布式事务">2.7.2 分布式事务</h3>
<p><strong>事务</strong>是为了保证一组操作<strong>要么全部成功，要么全部失败</strong>，保证数据的<strong>原子性</strong>、<strong>一致性</strong>、<strong>隔离性</strong>和<strong>持久性</strong></p>
<p>而在分布式场景下，多个不同业务是异步的，怎么保证一个业务失败后，其它业务也回滚呢？</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/DistributedTransaction2.jpg" width="60%"></p>
<p><strong>1）两阶段提交2PC</strong></p>
<p><strong>事务参与者</strong>：多种业务的事务执行者</p>
<p><strong>事务协调者</strong>：负责协调各个事务参与者的事务执行</p>
<p>2PC两个阶段是由<strong>事务协调者</strong>来协调的：</p>
<ul>
<li><strong>准备阶段</strong>：
<ul>
<li>事务协调者向所有事务参与者发送<strong>prepare准备</strong>请求</li>
<li>各个事务参与者执行事务操作</li>
<li>如果事务参与者执行成功，则返回<strong>ACK</strong>，否则返回<strong>NACK</strong></li>
</ul></li>
<li><strong>提交阶段</strong>：
<ul>
<li>若正常收到所有<strong>事务参与者</strong>的<strong>ACK</strong>，则事务协调者向所有事务参与者发送<strong>commit提交</strong>请求</li>
<li>某个事务迟迟没有返回<strong>ACK</strong>，则事务协调者会<strong>回滚</strong>所有事务参与者的事务</li>
</ul></li>
</ul>
<p>缺点：造成所有事务参与者<strong>阻塞</strong>，<strong>性能</strong>较差</p>
<p><strong>2）三阶段提交3PC</strong></p>
<p>相比2PC，3PC在<strong>准备阶段</strong>前多了一个<strong>可否提交询问CanCommit</strong>阶段，也就是先判断<strong>事务服务器是否存活</strong>，避免资源浪费</p>
<ul>
<li><strong>可否提交询问CanCommit</strong>：
<ul>
<li>事务协调者向所有事务参与者发送<strong>CanCommit询问</strong>请求</li>
<li>事务参与者执行事务操作</li>
<li>如果事务参与者执行成功，则返回<strong>ACK</strong>，否则返回<strong>NACK</strong></li>
</ul></li>
<li><strong>准备阶段</strong></li>
<li><strong>提交阶段</strong></li>
</ul>
<p>缺点：依然存在事务进行时的全局阻塞</p>
<h2 id="分布式限流">2.8 分布式限流</h2>
<p>在<strong>秒杀</strong>等超高并发场景下，为了保证系统的<strong>稳定性</strong>，需要适当降低<strong>用户体验</strong>来平衡系统的<strong>压力</strong></p>
<p>一般可以通过<strong>拒绝服务</strong>、<strong>服务降级</strong>、<strong>特权VIP处理</strong>、<strong>限流</strong>等方式来实现</p>
<p>经典的限流算法有4种：<strong>计数器方式</strong>、<strong>滑动窗口</strong>、<strong>漏桶</strong>、<strong>令牌桶</strong></p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/LimitFlow.png" width="60%"></p>
<h3 id="计数器方式">2.8.1 计数器方式</h3>
<p>计数器方式是最简单的限流算法，通过<strong>固定一个计数器阈值</strong>来记录<strong>单位时间</strong>内允许的<strong>请求次数</strong></p>
<p>当在这段时间内某一刻总请求次数超过<strong>阈值</strong>时，则后面这段时间内将就拒绝服务</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Counter.png" width="60%"></p>
<p>缺点：在两个相隔时间段内可能瞬间请求次数过多，导致<strong>瞬间流量</strong>过大</p>
<h3 id="滑动窗口">2.8.2 滑动窗口</h3>
<p>在<strong>计数器方式</strong>的基础上，将大时间段再细分为<strong>小时间段</strong>，通过<strong>滑动窗口</strong>来动态累计请求次数</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/SlidingWindow.jpg" width="60%"></p>
<h3 id="漏桶">2.8.3 漏桶</h3>
<p>漏桶算法是一种<strong>固定容量</strong>的<strong>漏桶</strong>缓存消息，消费者对桶的消费速率相对固定，而生产者的生产速率不固定，但是有容量限制，当桶满时，生产者将拒绝请求，从而实现限流</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/LeakyBucket.png" width="60%"></p>
<h3 id="令牌桶">2.8.4 令牌桶</h3>
<p>令牌桶的<strong>容量不固定</strong>，而是通过<strong>中间人</strong>按照一定速率往桶中<strong>放入令牌token</strong>，有点类似于空闲时段<strong>攒钱</strong>，在<strong>繁忙时段</strong>可以<strong>花钱</strong>，所以相比<strong>漏桶</strong>算法，在面对大流量时可以快速处理</p>
<p>当请求来临时，先从桶中<strong>取出令牌</strong>，如果<strong>有令牌</strong>则处理请求，否则拒绝请求</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/TokenBucket.png" width="60%"></p>
<h2 id="分布式熔断和降级">2.9 分布式熔断和降级</h2>
<p>熔断与降级的区别：熔断可能会调用降级机制，但是降级不会调用熔断机制</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/CircuitBreakerAndDegrade.png" width="60%"></p>
<h3 id="熔断">2.9.1 熔断</h3>
<p>在某些情况下，系统<strong>大量下游节点出现异常</strong>，那么会影响整个系统的<strong>稳定性</strong></p>
<p>而熔断（Circuit
Breaking）是面向不稳定服务场景设计的，它能最大限度避免下游服务不稳定对上游服务带来的影响。</p>
<p>当<strong>某个下游业务不稳定时</strong>，可以通过<strong>熔断</strong>机制先把不稳定的服务<strong>熔断</strong>，然后<strong>降级</strong>处理</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/CircuitBreaker.png" width="60%"></p>
<p>熔断判断方法：</p>
<ul>
<li><strong>异常率</strong>：当<strong>异常率</strong>超过一定阈值时，就会触发熔断</li>
<li><strong>响应超时率</strong>：当<strong>响应超时率</strong>超过一定阈值时，就会触发熔断</li>
</ul>
<h2 id="降级">2.9.2 降级</h2>
<p>降级是为了解决<strong>资源不足</strong>和<strong>访问量过大</strong>的问题，通过<strong>降低牺牲一些业务（停某些业务）或流程（强一致性变最终一致）</strong>来保证系统的<strong>稳定性</strong></p>
<p>降级的方式有：</p>
<ul>
<li><strong>停止某些业务</strong>：比如在<strong>秒杀</strong>高并发场景下，可以<strong>停止注册</strong>业务</li>
<li><strong>强一致性变最终一致性</strong>：比如在<strong>秒杀</strong>高并发场景下，可以<strong>降级</strong>为<strong>最终一致性</strong></li>
</ul>
<h2 id="uuid-雪花算法">2.10 UUID-雪花算法</h2>
<p>UUID是由<strong>32个16进制</strong>数字，也就是<strong>16<sup>32=2</sup>128</strong>128位组成的，一般是<strong>全球唯一</strong>，是通过<strong>雪花算法（生成分布式全局唯一ID的算法）</strong>生成的</p>
<p>UUID的产生一般与<strong>时间戳</strong>、<strong>网卡MAC地址</strong>、<strong>随机数</strong>等有关</p>
<p>优点：<strong>全球唯一</strong>、<strong>不重复</strong></p>
<p>缺点：<strong>无序</strong>、<strong>存储空间大</strong>、<strong>字符串存储，查询效率低</strong></p>
<blockquote>
<p>参考：<a href="https://mbd.baidu.com/newspage/data/landingsuper?rs=3122157695&amp;ruk=qiRiJMGafDiNgx10N6x2lQ&amp;urlext=%7B%22cuid%22%3A%22luHda_icH8_KPHtLYaSIflaqBil6uBuCluvsalixS8_v8SiE_aSau08sHaJUfQulE6HmA%22%7D&amp;isBdboxFrom=1&amp;pageType=1&amp;sid_for_share=&amp;context=%7B%22nid%22%3A%22news_9293703006842681579%22,%22sourceFrom%22%3A%22search%22%7D">架构设计之道：高并发架构设计</a></p>
<p>参考：<a href="https://blog.csdn.net/lixinkuan328/article/details/95535691">分布式之CAP原则详解</a></p>
<p>参考：<a href="https://mbd.baidu.com/ug_share/mbox/4a83aa9e65/share?product=smartapp&amp;tk=3fdf4dfbc1f1d088d6a696bbd8b2aa5a&amp;share_url=https%3A%2F%2Fyebd1h.smartapps.cn%2Fpages%2Fblog%2Findex%3FblogId%3D128606461%26_swebfr%3D1%26_swebFromHost%3Dbaiduboxapp&amp;domain=mbd.baidu.com">面试场景题积累汇总</a></p>
<p>参考：<a href="https://blog.itpub.net/70024922/viewspace-3005053/">高并发架构设计（三大利器：缓存、限流和降级）</a></p>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/431149128">深入消息队列MQ，看这篇就够了！</a></p>
</blockquote>
<h1 id="三常见的分布式系统设计场景">三、常见的分布式系统设计场景</h1>
<h2 id="秒杀系统设计">3.1 秒杀系统设计</h2>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/SecondKillStruct.png" width="80%"></p>
<p>整体架构主要包括<strong>Redis预扣库存</strong>、<strong>Kafka异步下单</strong>、<strong>MySQL扣除实际库存</strong>、<strong>前端跳转支付</strong>等步骤，一般的流程为<strong>请求-&gt;限流组件-&gt;Redis预扣-&gt;库存服务</strong></p>
<p>具体流程如下：</p>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/SecondKill.png" width="80%"></p>
<h3 id="限流">3.1.1 限流</h3>
<p>限流一般是在接入系统前进行的预处理，一般由专门的<strong>限流组件</strong>在<strong>网关</strong>端实现，通过<strong>令牌桶</strong>、<strong>漏桶</strong>等算法来实现</p>
<p>当请求超过一定阈值时，就会触发<strong>限流</strong>，返回<strong>请求太多</strong>的提示来拒绝请求服务</p>
<h3 id="redis预扣库存">3.1.2 Redis预扣库存</h3>
<p>Redis预扣库存主要有以下的步骤：</p>
<ul>
<li><strong>预扣库存（管理订单名额）+限额</strong>：用户请求到达后，先从<strong>Redis</strong>中<strong>预扣库存</strong>，如果<strong>库存不足</strong>则返回<strong>库存不足</strong>的提示</li>
<li><strong>LUA保证原子性</strong>：通过<strong>LUA脚本</strong>来保证<strong>预扣库存</strong>的<strong>原子性</strong>，避免<strong>超卖</strong>的问题</li>
<li><strong>状态记录逻辑</strong>：secNum（uuid）做为key来存储状态信息</li>
</ul>
<h3 id="kafka异步下单">3.1.3 Kafka异步下单</h3>
<p>Redis预扣除后，怎么把实际的订单消息传给<strong>MySQL</strong>进行<strong>实际订单生成</strong>和<strong>库存扣除</strong>呢？</p>
<p><strong>1）直接打到MySQL</strong></p>
<p>由于Redis已经进行预扣除，只有拿到<strong>入场券</strong>的订单才能交给MySQL，如果此时<strong>商品秒杀库存总额</strong>只有几百或者几千，那么直接打到MySQL也是可以的</p>
<p>但是如果<strong>商品秒杀库存总额</strong>有几十万、几百万，那么直接打到MySQL就会导致<strong>MySQL</strong>的<strong>压力</strong>过大，因此需要<strong>异步下单</strong></p>
<p><strong>2）Kafka异步下单</strong></p>
<p>Kafka中存储<strong>订单消息</strong>交给MySQL消费，通过同一商品在<strong>同一分区</strong>中，保证<strong>订单生成</strong>的<strong>顺序性</strong></p>
<p>消费队列的数据主要包括：<strong>订单ID</strong>、<strong>用户ID</strong>、<strong>商品ID</strong>、<strong>商品数量</strong>、<strong>商品价格</strong>等信息</p>
<h3 id="mysql扣除实际库存">3.1.4 MySQL扣除实际库存</h3>
<p><strong>1）扣除库存</strong></p>
<p>MySQL中的<strong>商品库存</strong>是<strong>实际库存</strong>，通过<strong>商品ID</strong>来<strong>扣除库存</strong></p>
<p><strong>2）订单生成</strong></p>
<p>通过<strong>订单ID</strong>、<strong>用户ID</strong>、<strong>商品ID</strong>、<strong>商品数量</strong>、<strong>商品价格</strong>等信息来生成<strong>订单</strong></p>
<p><strong>3）订单状态</strong></p>
<p>订单生成后，需要<strong>更新订单状态</strong>，比如<strong>已支付</strong>、<strong>未支付</strong>等状态</p>
<h3 id="前端跳转支付">3.1.5 前端跳转支付</h3>
<p>订单生成后，需要<strong>跳转支付</strong>，通过<strong>支付宝</strong>、<strong>微信</strong>等支付方式来完成支付</p>
<p>支付完成后，需要<strong>更新订单状态</strong>为<strong>已支付</strong>，同时<strong>扣除用户余额</strong>等操作</p>
<h3 id="更新redis库存">3.1.6 更新Redis库存</h3>
<p>支付完成后，需要<strong>更新Redis库存</strong>，将<strong>预扣库存</strong>更新为<strong>实际库存</strong></p>
<h2 id="扫码登录设计">3.2 扫码登录设计</h2>
<h3 id="token">3.2.1 token</h3>
<p><strong>token</strong>是指<strong>令牌</strong>，是一种<strong>身份验证</strong>的方式，通过<strong>token</strong>来<strong>验证用户身份</strong>，<strong>保护用户隐私</strong></p>
<p>我们通常在网页中登陆一次后，下次访问不需要再次登陆，就是通过<strong>token</strong>来实现的：</p>
<ul>
<li><strong>token生成</strong>：通过<strong>用户ID</strong>、<strong>时间戳</strong>、<strong>密钥</strong>等信息生成<strong>token</strong></li>
<li><strong>token验证</strong>：
<ul>
<li>通过<strong>token</strong>来验证用户身份，如果<strong>token</strong>过期或者不正确则需要重新登陆</li>
<li>由于token中的value包含设备信息，所以就算被窃取也很难保证设备信息一致</li>
</ul></li>
</ul>
<h3 id="扫码登录设计思路">3.2.2 扫码登录设计思路</h3>
<p><img src="/2024/05/01/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/scanLogin.png" width="80%"></p>
<ul>
<li>获取二维码
<ul>
<li>PC端：携带设备信息-&gt;请求后端二维码ID</li>
<li>后端Redis：产生二维码ID（状态为：待扫码）-&gt;关联二维码ID和设备信息-&gt;返回二维码ID</li>
</ul></li>
<li>显示二维码
<ul>
<li>PC端：前端展示二维码</li>
<li>PC端：开始不断轮询后端二维码ID状态</li>
</ul></li>
<li>登录扫码
<ul>
<li>移动端：扫码获得二维码ID-&gt;发起扫码请求</li>
<li>后端Redis：根据二维码ID关联用户ID（状态改为：待确认）-&gt;生成临时token-&gt;返回临时token</li>
<li>PC端：轮询到状态改变，显示用户对应头像（等待移动端确认）</li>
</ul></li>
<li>确认登录
<ul>
<li>移动端：确认登录-&gt;携带临时token-&gt;请求后端</li>
<li>后端Redis：删除临时token-&gt;根据用户ID生成token-&gt;二维码关联用户ID（状态改为：已激活）</li>
<li>PC端：轮询到状态改变，获取token并登录</li>
</ul></li>
</ul>
<h3 id="扫码登录设计-1">3.2.3 扫码登录设计</h3>
<h4 id="数据结构">3.2.3.1 数据结构</h4>
<p>采用Redis做为存储，为了保证原子性，需要通过<strong>Lua</strong>来操作</p>
<p>以<code>key-value</code>的形式存储数据：</p>
<table>
<tr>
<th style="text-align: center; font-weight: bold;">
key
</th>
<td>
二维码ID
</td>
</tr>
<tr>
<th rowspan="4" style="text-align: center; font-weight: bold;">
value(Json)
</th>
<td>
accountID
</td>
</tr>
<tr>
<td>
deviceInfo(设备ID、设备MAC、地理位置...)
</td>
</tr>
<tr>
<td>
status(待扫码、待确认、待激活)
</td>
</tr>
<tr>
<td>
pctoken
</td>
</tr>
</table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//qrID</span></span><br><span class="line">    <span class="attr">&quot;qrIDxxx&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;accountID&quot;</span>:<span class="string">&quot;dsfsd1231321f&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;deviceInfo&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;deviceID&quot;</span>:<span class="string">&quot;sdfsfaldfhfshlfhds&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;deviceType&quot;</span>:<span class="string">&quot;mac&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>:<span class="string">&quot;shenzhen&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">3</span>,<span class="comment">//激活</span></span><br><span class="line">        <span class="attr">&quot;pcToken&quot;</span>:<span class="string">&quot;xxxxxxxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="临时token作用安全性">3.2.3.1 临时token作用（安全性）</h4>
<p>临时token是为了绑定扫码的<strong>移动端设备</strong>，这样就算<strong>token</strong>被<strong>截获</strong>，也无法<strong>登录</strong>，因为<strong>token</strong>是<strong>绑定设备</strong>的</p>
]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
  </entry>
  <entry>
    <title>openeluer安装与内核替换</title>
    <url>/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<blockquote>
<p>前言</p>
<p>主机系统：Sonoma 14.4.1（x86）</p>
<p>虚拟软件：VMware Fusion</p>
<p>openeluer系统：openEuler-24.03-LTS-SP2-x86_64-dvd.iso</p>
<p>内核选择：linux 5.x 内核 64G</p>
</blockquote>
<h1 id="一mac工具准备">一、Mac工具准备</h1>
<ol type="1">
<li>虚拟软件：<a href="https://mp.weixin.qq.com/s/Mg4byIT8W1ys-odz5Yk9Gw">VMware
Fusion</a></li>
<li>ssh远程控制软件：<a href="https://www.mac78.com/911.html#J_DLIPPCont">Termius</a></li>
</ol>
<h1 id="二虚拟机安装openeluer系统">二、虚拟机安装openeluer系统</h1>
<p>首先去欧拉官网下载openeluer系统镜像文件：<a href="https://www.openeuler.org/zh/download/">openEuler</a>，下载LTS长期支持的版本</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/openeluer官网.png"></p>
<p>镜像文件下载完成后，在虚拟软件 <code>VMware Fusion</code>
中创建虚拟机，选择镜像文件并拖入到 <code>VMware</code> 中：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/1. 新建.png"></p>
<p>然后选个linux内核和固件后直接安装：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/3. 选个内核.png"></p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/4. 选择固件.png"></p>
<p>然后选择自定义配置进行配置：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/5. 自定义配置.png"></p>
<p>常选择的配置如下：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/6. 选择需要修改的配置进行修改.png"></p>
<p>先分配一个较大的磁盘空间：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/7. 分配一个较大的固态存储.png"></p>
<p>选择<strong>显示全部</strong>回到配置选择界面：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/6_1. 返回去配置前面的选项.png"></p>
<p>然后继续配置内存，将内存配置为4G（一定要换，最低4G）：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/8. 分配4GB的内存.png"></p>
<p>配置完硬件配置后，就可以直接开启虚拟机进行安装了：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/9.配置完就可以直接开启虚机.png"></p>
<p>进行系统配置，经常修改的配置项：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/11. 选择需要配置的内容.png"></p>
<p>首先语言选择中文和英文：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/10. 选择语言.png"></p>
<p>然后开启root：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/12. 启用root用户.png"></p>
<p>安装目的地可以不用改：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/13. 安装目的地.png"></p>
<p>打开网络选项：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/14. 打开网络.png"></p>
<p>因为我是学习虚拟化的，所以选择了虚拟机配置，否则的话可以选择服务器即可：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/15. 虚拟化学习选择虚拟化主机_否则可以选服务器.png"></p>
<p>然后开始安装，等待一段时间后完成安装就能进入系统：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/16. 然后开始安装.png"></p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/17. 安装中.png"></p>
<p>安装完成后，进入系统：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/18. 安装完成重启系统.png"></p>
<p>输入刚刚配置的root账号密码：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/19. 输入刚刚配置的root账号密码.png"></p>
<h1 id="三termius中添加虚拟机">三、Termius中添加虚拟机</h1>
<p>首先查看虚拟机地址：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/20. 找到虚拟机的ip_用远程连接工具连接.png"></p>
<p>然后在termius中添加虚拟机：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/termius添加虚拟机.png"></p>
<h1 id="四进行内核替换">四、进行内核替换</h1>
<p>内核替换主要参考<a href="https://blog.csdn.net/m0_56602092/article/details/118604262">openeluer的内核更新与替换</a></p>
<p>首先查看当前安装了的linux内核版本：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/openeluer初始内核_linux.png"></p>
<h2 id="清理源代码树">4.1 清理源代码树</h2>
<p>进入解压好的源码文件夹执行命令，清理过去内核编译产生的文件，第一次编译时可不执行此命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make mrproper</span><br></pre></td></tr></table></figure>
<h2 id="生成内核配置文件.config">4.2 生成内核配置文件.config</h2>
<p>可以先将将系统原配置文件拷贝过来，原配置文件在<code>/boot</code>目录下，输入<code>config-</code>后tab一下就出来了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ../cpConfig</span><br><span class="line">cp -v /boot/config-$(uname -r) ../cpConfig</span><br></pre></td></tr></table></figure>
<p>执行依赖安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install ncurses-devel</span><br></pre></td></tr></table></figure>
<p>进入配置界面，直接选择默认配置，然后选择Save，生成了一个.config文件：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/23. 配置内核.png"></p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/23_1. 配置内核.png"></p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/23_2. 配置内核.png"></p>
<p>然后按<code>Exit</code>保存刚刚的config信息</p>
<p>最后需要禁用证书、BTF，否则后面编译会失败：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim .config</span><br></pre></td></tr></table></figure>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/23_3. 配置内核_禁用证书_vim查看.png"></p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/23_4. 配置内核_禁用证书.png"></p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/23_5.%20配置内核_BTF.png"></p>
<h2 id="内核编译及安装">4.3 内核编译及安装</h2>
<p>执行编译前先安装所需组件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install elfutils-libelf-devel</span><br><span class="line">yum install openssl-devel</span><br><span class="line">yum install bc</span><br></pre></td></tr></table></figure>
<p>然后执行make开始编译，编译大概要一段时间，这个过程需要保证连接的稳定，中断了就要重新编译了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make -j$(nproc)</span><br><span class="line"><span class="meta">#</span><span class="bash"> make -j4</span></span><br></pre></td></tr></table></figure>
<p>通常内核编译是一个 计算密集型任务，建议使用 -j 参数指定 CPU 核心数
来加速编译。</p>
<p>编译完成后，可以安装生成的 vmlinuz 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make modules_install</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/25. makeInstall安装内核结果.png"></p>
<p>生成的新内核可以在 /boot/ 目录下查看：</p>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/26. 生成的新内核.png"></p>
<h2 id="更新引导">4.4 更新引导</h2>
<p>下面的命令会根据 /boot/ 目录下的内核文件自动更新启动引导文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>
<p>然后重启系统就可以看到多个内核，其中一个就是我们新安装的内核，可自由选择一个内核启动系统。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/27. 选择新的内核.png"></p>
<p>重启完后可以确认新的内核是否生效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>
<p><img src="/2025/08/17/openeluer%E5%AE%89%E8%A3%85%E4%B8%8E%E5%86%85%E6%A0%B8%E6%9B%BF%E6%8D%A2/28. 确认新内核.png"></p>
<h1 id="五支持远程ssh连接">五、支持远程ssh连接</h1>
<p>编辑 SSH 配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>找到并修改以下参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">AllowTcpForwarding yes   # 取消注释或添加此行</span><br></pre></td></tr></table></figure>
<p>保存文件并重启 SSH 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd  # 大多数 Linux 系统</span><br></pre></td></tr></table></figure>
<h1 id="参考">参考</h1>
<blockquote>
<ol start="0" type="1">
<li><p><a href="https://segmentfault.com/a/1190000040810052">Fusion 或
Vmware 安装 openEuler 20.03 最小镜像</a></p></li>
<li><p><a href="https://blog.csdn.net/2302_82189125/article/details/137759482">VM虚拟机中安装openeluer</a></p></li>
<li><p><a href="https://blog.csdn.net/m0_61998604/article/details/145700767">macOS中vmware
Fusion的虚拟机创建</a></p></li>
<li><p><a href="https://blog.csdn.net/m0_56602092/article/details/118604262">openeluer的内核更新与替换：主要参考</a></p></li>
<li><p><a href="https://bbs.huaweicloud.com/blogs/452112">探秘内核：openEuler的内核编译实战指南【华为根技术】</a></p></li>
<li><p><a href="https://blog.csdn.net/m0_56602092/article/details/118604262">OpenEuler内核编译及替换</a></p></li>
</ol>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>驱动学习1：驱动demo练习</title>
    <url>/2025/08/21/%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%A9%B1%E5%8A%A8demo%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>前言</p>
<p>环境：openeluer</p>
<p>内核：5.10.0+</p>
<p>代码参考：</p>
<p>通过网盘分享的文件： 链接:
https://pan.baidu.com/s/14-4XSjm-wvpqxdWcGoXXvw?pwd=9gj7 提取码: 9gj7
复制这段内容后打开百度网盘手机App，操作更方便哦</p>
</blockquote>
<h1 id="内核模块相关的基本工具与信息">内核模块相关的基本工具与信息</h1>
<ul>
<li>lsmod：查看内核模块</li>
<li>insmod：加载内核模块</li>
<li>rmmod：卸载内核模块</li>
</ul>
<h1 id="一hello驱动">一、hello驱动</h1>
<p>在linux中，驱动本身不加载进内核的话就只是个模块，模块加载进内核后，才能被内核调用，所以，我们先编写一个最简单的hello驱动来验证一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Hello world! I am Akira\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">module_init(hello_init);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Hello world! Akira exit\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Tian Zheng &lt;tianzheng_edu@163.com&gt;&quot;</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL v2&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;A Simple Hello World Driver Module&quot;</span>);</span><br><span class="line">MODULE_ALIAS(<span class="string">&quot;a simple module&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><code>module_init()</code>和<code>module_exit()</code>是内核模块的初始化和卸载函数</li>
<li><code>__init</code>和<code>__exit</code>是内核模块的初始化和卸载函数的宏定义</li>
<li><code>MODULE_AUTHOR()</code>是模块作者的宏定义，<code>MODULE_LICENSE()</code>是模块许可证的宏定义，<code>MODULE_DESCRIPTION()</code>是模块描述的宏定义</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Makefile</span></span><br><span class="line">KVERS = <span class="variable">$(<span class="built_in">shell</span> uname -r)</span></span><br><span class="line"></span><br><span class="line">obj-m += hello.o</span><br><span class="line"></span><br><span class="line"><span class="section">build: kernel_modules</span></span><br><span class="line"></span><br><span class="line"><span class="section">kernel_modules:</span></span><br><span class="line">	make -C /lib/modules/<span class="variable">$(KVERS)</span>/build M=<span class="variable">$(CURDIR)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	make -C /lib/modules/<span class="variable">$(KVERS)</span>/build M=<span class="variable">$(CURDIR)</span> clean</span><br></pre></td></tr></table></figure>
<p>运行<code>make</code>生成模块文件<code>hello.ko</code></p>
<p><img src="/2025/08/21/%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%A9%B1%E5%8A%A8demo%E7%BB%83%E4%B9%A0/生成hello_ko文件.png"></p>
<p>运行<code>insmod hello.ko</code>加载模块</p>
<p>接着<code>lsmod | grep hello</code>查看模块是否加载成功</p>
<p>用<code>dmesg</code>能看到末尾有输出了我刚刚在<code>hello_init()</code>中打印的<code>Hello world! I am Akira</code>信息，模块加载成功</p>
<p>最后用<code>rmmod hello</code>卸载模块，重新运行<code>dmesg</code>，就能看到<code>hello_exit()</code>中输出<code>Hello world! Akira exit</code></p>
<p>恭喜你，完成了第一个驱动的编写与加载！</p>
<p><img src="/2025/08/21/%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A01%EF%BC%9A%E9%A9%B1%E5%8A%A8demo%E7%BB%83%E4%B9%A0/第一个hello驱动的加载与测试.png"></p>
<h1 id="参考">参考</h1>
<blockquote>
<p><a href="https://gitee.com/PennyLee/learn-LDDD">宋宝国驱动git仓</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux内核驱动</category>
      </categories>
  </entry>
  <entry>
    <title>进制转换CPP版</title>
    <url>/2025/08/22/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2CPP%E7%89%88/</url>
    <content><![CDATA[<h1 id="一十进制---二进制">一、十进制 &lt;-&gt; 二进制</h1>
<h2 id="十进制---二进制">1.1 十进制 -&gt; 二进制</h2>
<p>在做笔试时，最好还是用现有的转换函数，方便点：</p>
<ul>
<li><code>bitset&lt;多少位的二进制&gt; b(decNum);</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">dec2Bin</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function">bitset&lt;32&gt; <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> b.<span class="built_in">to_string</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后是最原始的方法，纯C++实现： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dec2Bin</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        bin += (n % <span class="number">2</span>) * <span class="built_in">pow</span>(<span class="number">10</span>, i);</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> bin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="二进制---十进制">1.2 二进制 -&gt; 十进制</h2>
<p>做笔试时，最好还是用现有的转换函数，方便点：</p>
<ul>
<li><code>stoi(binNum, 指针, 进制基数);</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">bin2Dec</span><span class="params">(string binStr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> decNum = <span class="built_in">stoi</span>(binStr, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> decNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最原始的方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bin2Dec</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        dec += (n % <span class="number">10</span>) * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二十进制---十六进制">二、十进制 &lt;-&gt; 十六进制</h1>
<h2 id="十进制---十六进制">2.1 十进制 -&gt; 十六进制</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">dec2Hex</span><span class="params">(<span class="keyword">uint32_t</span> decNum)</span> </span>&#123;</span><br><span class="line">    stringstream ss;</span><br><span class="line">    ss &lt;&lt; hex &lt;&lt; decNum;</span><br><span class="line">    <span class="keyword">return</span> ss.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十六进制---十进制">2.2 十六进制 -&gt; 十进制</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">hex2Dec</span><span class="params">(string hexStr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> decNum = <span class="built_in">stoi</span>(hexStr, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> decNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三二进制---十六进制">三、二进制 &lt;-&gt; 十六进制</h1>
<p>二进制跟十六进制的转换需要借助十进制作为介质</p>
<h2 id="二进制---十六进制">3.1 二进制 -&gt; 十六进制</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">bin2Hex</span><span class="params">(string binStr)</span> </span>&#123;</span><br><span class="line">    stringstream ss;</span><br><span class="line">    ss &lt;&lt; hex &lt;&lt; <span class="built_in">stoi</span>(binStr, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> ss.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十六进制---二进制">3.2 十六进制 -&gt; 二进制</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">hex2Bin</span><span class="params">(string hexStr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> decNum = <span class="built_in">stoi</span>(hexStr, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="function">bitset&lt;32&gt; <span class="title">b</span><span class="params">(decNum)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> b.<span class="built_in">to_string</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四大小写转换">四、大小写转换</h1>
<p>其实可以不需要函数，直接通过<code>'a' - 'A'</code>的差值进行转换，然后逐个转换就行
- 小写字母转大写字母：<code>char c = c0 - ('a' - 'A');</code> -
大写字母转小写字母：<code>char c = c0 + ('a' - 'A');</code></p>
<h1 id="参考">参考</h1>
<blockquote>
<p><a href="https://blog.csdn.net/MOU_IT/article/details/89060249">C++中二进制、字符串、十六进制、十进制之间的转换</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>手写操作系统2：编写MBR主引导扇区</title>
    <url>/2025/08/23/%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F2%EF%BC%9A%E7%BC%96%E5%86%99MBR%E4%B8%BB%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA/</url>
    <content><![CDATA[<h1 id="一汇编编译器">一、汇编编译器</h1>
<p>安装<code>nasm</code>汇编编译器：<code>sudo apt-get install nasm</code></p>
<h1 id="二mbr">二、MBR</h1>
<ol type="1">
<li><p>编写<code>mbr.s</code>汇编文件，放在<code>boot</code>目录下</p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%include &quot;boot.inc&quot;</span><br><span class="line">SECTION MBR vstart=0x7c00 ;起始地址编译在0x7c00</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov fs,ax</span><br><span class="line">    mov sp,0x7c00</span><br><span class="line">    mov ax,0xb800  ; ax为文本信号起始区</span><br><span class="line">    mov gs,ax      ; gs = ax 充当段基址的作用</span><br><span class="line">    </span><br><span class="line">            ; ah = 0x06 al = 0x00 想要调用int 0x06的BIOS提供的中断对应的函数 </span><br><span class="line">            ; 即向上移动即完成清屏功能</span><br><span class="line">            ; cx dx 分别存储左上角与右下角的左边 详情看int 0x06函数调用</span><br><span class="line">    mov ax,0600h </span><br><span class="line">    mov bx,0700h</span><br><span class="line">    mov cx,0</span><br><span class="line">    mov dx,184fh</span><br><span class="line">    </span><br><span class="line">    ;调用BIOS中断</span><br><span class="line">    int 0x10 </span><br><span class="line"></span><br><span class="line">            ;新增功能 直接操作显存部分</span><br><span class="line">            ;低位字节储存ascii字符 小端储存内存顺序相反</span><br><span class="line">    mov byte [gs:0x00],&#x27;L&#x27; </span><br><span class="line">    </span><br><span class="line">            ;背景储存在第二个字节 含字符与背景属性</span><br><span class="line">    mov byte [gs:0x01],0xA4    </span><br><span class="line">    </span><br><span class="line">    mov byte [gs:0x02],&#x27;O&#x27; </span><br><span class="line">    mov byte [gs:0x03],0xA4</span><br><span class="line">    </span><br><span class="line">    mov byte [gs:0x04],&#x27;V&#x27; </span><br><span class="line">    mov byte [gs:0x05],0xA4</span><br><span class="line">    </span><br><span class="line">    mov byte [gs:0x06],&#x27;E&#x27; </span><br><span class="line">    mov byte [gs:0x07],0xA4</span><br><span class="line">    </span><br><span class="line">    mov byte [gs:0x08],&#x27;6&#x27; </span><br><span class="line">    mov byte [gs:0x09],0xA4</span><br><span class="line">    </span><br><span class="line">    mov byte [gs:0x0A],&#x27; &#x27; </span><br><span class="line">    mov byte [gs:0x0B],0xA4</span><br><span class="line">    </span><br><span class="line">    mov byte [gs:0x0C],&#x27;O&#x27; </span><br><span class="line">    mov byte [gs:0x0D],0xA4</span><br><span class="line">    </span><br><span class="line">    mov byte [gs:0x0E],&#x27;S&#x27; </span><br><span class="line">    mov byte [gs:0x0F],0xA4</span><br><span class="line">    </span><br><span class="line">                ; 思考一下 在输出完“Love 6OS后 按照书上的逻辑是要把磁盘读入 </span><br><span class="line">                ; 先把配置信息给送到寄存器中”</span><br><span class="line">    </span><br><span class="line">            ; 为什么要送到 eax中呢 因为IN OUT IO接口 </span><br><span class="line">            ; 规定的就是dx里面存放的是端口号 ax是需要或者输送的信息</span><br><span class="line">    mov eax,LOADER_START_SECTOR    </span><br><span class="line">    </span><br><span class="line">    mov bx,LOADER_BASE_ADDR ;把要目标内存位置放进去 bx常作地址储存</span><br><span class="line">    </span><br><span class="line">    mov cx,4;读取磁盘数 cx常作计数</span><br><span class="line">    </span><br><span class="line">    call rd_disk_m_16</span><br><span class="line"></span><br><span class="line">    jmp LOADER_BASE_ADDR ; 直接当跳跳熊 开跳0x600</span><br><span class="line">;------------------------------------------------------------------------</span><br><span class="line">;读取第二块硬盘</span><br><span class="line">rd_disk_m_16:</span><br><span class="line">;------------------------------------------------------------------------</span><br><span class="line">;1 写入待操作磁盘数</span><br><span class="line">;2 写入LBA 低24位寄存器 确认扇区</span><br><span class="line">;3 device 寄存器 第4位主次盘 第6位LBA模式 改为1</span><br><span class="line">;4 command 写指令</span><br><span class="line">;5 读取status状态寄存器 判断是否完成工作</span><br><span class="line">;6 完成工作 取出数据</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">;1 写入待操作磁盘数</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">    mov esi,eax   ; !!! 备份eax</span><br><span class="line">    mov di,cx     ; !!! 备份cx</span><br><span class="line">    </span><br><span class="line">    mov dx,0x1F2  ; 0x1F2为Sector Count 端口号 送到dx寄存器中</span><br><span class="line">    mov al,cl     ; !!! 忘了只能由ax al传递数据</span><br><span class="line">    out dx,al     ; !!! 这里修改了 原out dx,cl</span><br><span class="line">    </span><br><span class="line">    mov eax,esi   ; !!!袄无! 原来备份是这个用 前面需要ax来传递数据 麻了</span><br><span class="line">    </span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">;2 写入LBA 24位寄存器 确认扇区</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">    mov cl,0x8    ; shr 右移8位 把24位给送到 LBA low mid high 寄存器中</span><br><span class="line"></span><br><span class="line">    mov dx,0x1F3  ; LBA low</span><br><span class="line">    out dx,al </span><br><span class="line">    </span><br><span class="line">    mov dx,0x1F4  ; LBA mid</span><br><span class="line">    shr eax,cl    ; eax为32位 ax为16位 eax的低位字节 右移8位即8~15</span><br><span class="line">    out dx,al</span><br><span class="line">    </span><br><span class="line">    mov dx,0x1F5</span><br><span class="line">    shr eax,cl</span><br><span class="line">    out dx,al</span><br><span class="line">    </span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">;3 device 寄存器 第4位主次盘 第6位LBA模式 改为1</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            ; 24 25 26 27位 尽管我们知道ax只有2 但还是需要按规矩办事 </span><br><span class="line">            ; 把除了最后四位的其他位置设置成0</span><br><span class="line">    shr eax,cl</span><br><span class="line">    </span><br><span class="line">    and al,0x0f </span><br><span class="line">    or al,0xe0   ;!!! 把第四-七位设置成0111 转换为LBA模式</span><br><span class="line">    mov dx,0x1F6 ; 参照硬盘控制器端口表 Device </span><br><span class="line">    out dx,al</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">;4 向Command写操作 Status和Command一个寄存器</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">    mov dx,0x1F7 ; Status寄存器端口号</span><br><span class="line">    mov ax,0x20  ; 0x20是读命令</span><br><span class="line">    out dx,al</span><br><span class="line">    </span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">;5 向Status查看是否准备好惹 </span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">    </span><br><span class="line">        ;设置不断读取重复 如果不为1则一直循环</span><br><span class="line">.not_ready:     </span><br><span class="line">    nop           ; !!! 空跳转指令 在循环中达到延时目的</span><br><span class="line">    in al,dx      ; 把寄存器中的信息返还出来</span><br><span class="line">    and al,0x88   ; !!! 0100 0100 0x88</span><br><span class="line">    cmp al,0x08</span><br><span class="line">    jne .not_ready ; !!! jump not equal == 0</span><br><span class="line">    </span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">;6 读取数据</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">    mov ax,di      ;把 di 储存的cx 取出来</span><br><span class="line">    mov dx,256</span><br><span class="line">    mul dx        ;与di 与 ax 做乘法 计算一共需要读多少次 方便作循环 低16位放ax 高16位放dx</span><br><span class="line">    mov cx,ax      ;loop 与 cx相匹配 cx-- 当cx == 0即跳出循环</span><br><span class="line">    mov dx,0x1F0</span><br><span class="line">.go_read_loop:</span><br><span class="line">    in ax,dx      ;两字节dx 一次读两字</span><br><span class="line">    mov [bx],ax</span><br><span class="line">    add bx,2</span><br><span class="line">    loop .go_read_loop</span><br><span class="line">    </span><br><span class="line">    ret ;与call 配对返回原来的位置 跳转到call下一条指令</span><br><span class="line">        </span><br><span class="line">    times 510 - ($ - $$) db 0 </span><br><span class="line">    db 0x55,0xaa</span><br></pre></td></tr></table></figure></p></li>
<li><p>将源文件编译成二进制bin文件</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nasm -o mbr.bin mbr.S</span><br></pre></td></tr></table></figure></p></li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
  </entry>
  <entry>
    <title>TLB特性学习</title>
    <url>/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="一tlb-管理">一、TLB 管理</h1>
<h2 id="为什么需要tlb">1.1 为什么需要TLB？</h2>
<p>在处理器中，需要MMU内存管理来将<strong>虚拟地址翻译成物理地址</strong>，在这个过程中，需要访问页表，而<strong>页表实际是存储在主内存中</strong>，所以一次页表查询需要多次访问内存（n级页表访问n次），当多次访问同一个地址时会不断访问内存导致处理器长时间延迟。</p>
<p>因此可以泳<strong>高速缓存</strong>的思想，将地址映射结果进行缓存，而该缓存我们使用<strong>TLB
快表</strong>。TLB
用于缓存已经翻译好的<strong>页表项</strong>，在进行虚拟地址翻译时，当TLB命中时直接取TLB的结果，当TLB未命中时，MMU进行一次地址查询，然后将页表项结果存入
TLB 缓存中。</p>
<p>TLB 一般内嵌在 MMU
内部（MMU通常会包含一个TLB，在虚拟化中可以实现虚拟机与物理机之间的隔离和映射--两阶段映射）。</p>
<h2 id="tlb-高速缓存的命中流程">1.2 TLB 高速缓存的命中流程</h2>
<p>虚拟地址一般包含<code>VPN</code>虚拟地址页帧号和<code>页内偏移量</code>，同时物理地址包含有<code>PFN</code>物理页号，因此要实现一一对应的话，要求TLB存有匹配的<code>VPN-PFN</code></p>
<p>现代TLB映射方式通常有三种方式： - 直接映射 - 全相连映射 -
组相连映射</p>
<p>其中现代处理器采用最多的是<strong>组相连映射</strong>方式，在一个<strong>n路组相连
TLB
中，一组包含n个TLB项</strong>，需要虚拟地址中增加一个<strong>索引域</strong>来找到对应的<strong>组</strong></p>
<p>当在 TLB 中命中后，由<strong>物理页号PFN + 虚拟地址中的
页内偏移量</strong>可以得到最终的物理地址；该物理地址送到<strong>PIPT映射方式的高速缓存</strong>中，若命中则直接处理该数据。</p>
<p>结合上述流程，可以得到整个TLB命中流程如下图所示：</p>
<p><img src="/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/TLB命中流程.png"></p>
<h2 id="tlb重名和同名问题">1.3 TLB重名和同名问题</h2>
<p><strong>1）重名问题</strong></p>
<p>重名问题是指<strong>多个进程的不同虚拟地址映射到同一个物理地址</strong>
- 结论：TLB不会出现重名问题</p>
<p>重名问题举例：（以Cache数据缓存为例）</p>
<p>假设 - 进程1的VA1虚拟地址 映射 到 PA 物理地址 - 进程2的VA2虚拟地址
映射 到 PA 物理地址</p>
<p>此时两个虚拟地址中存的数据Data都在各自的Cache中有缓存过，此时若在进程1中通过VA1对实际物理地址PA处的数据做了修改，那么重名的进程2的缓存中并没有更新该缓存，因此存的还是旧数据，就出现了重名问题。关于Cache的重名问题如下图所示：</p>
<p><img src="/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/Cache重名问题示意图.png"></p>
<p>而TLB中存的是<strong>标记+物理页号PFN</strong>，也就是<strong>VA到PA的映射关系</strong>，而不是数据，PA物理地址不变，因此TLB中不会出现重名问题（进程1的操作不影响进程2的地址映射关系）</p>
<p><strong>2）同名问题</strong></p>
<p>同名问题是指<strong>多个进程中同个虚拟地址映射到不同的物理地址中</strong>
- 结论：TLB会出现同名问题</p>
<p>同名问题举例：（以TLB地址映射为例）</p>
<p>假设 - 进程1中的VA 映射到 PA1物理地址 - 进程2中的VA 映射到
PA2物理地址</p>
<p>此时如果出现<strong>进程1切换到进程2</strong>的操作，如果TLB没有更新，那么会出现TLB中存的映射关系依然为<strong>VA-&gt;PA1</strong>，此时进程2如果需要寻VA地址对应的物理地址，就会从TLB中命中取出<strong>PA1</strong>这个地址，因此会出现错误。关于TLB同名问题如下图所示：</p>
<p><img src="/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/TLB同名问题示意图.png"></p>
<p>因此说明TLB会出现同名问题，此时的解决办法是切换进程时清除当前所有的TLB项，保证不影响下一个进程的映射。但是这样会导致下一个进程完全没有映射的缓存，导致刚开始执行时的性能大幅下降。因此ARMv8提出了一种硬件解决方法---ASID方案。</p>
<p><strong>3）ASID方案</strong></p>
<p>ASID方案是新增一个ASID值来标识某个进程，这样TLB表就可以通过同时匹配<strong>ASID+虚拟地址标记</strong>来唯一确定某个进程的某个地址的映射。</p>
<p>ASID不等同于进程唯一表示ID，而是存在页表基地址寄存器<code>TTBR0_EL1</code>或<code>TTBR1_EL1</code>中，由转换控制寄存器<code>TCR</code>来确定在哪个寄存器中进行配置的，当<strong>切换进程</strong>时，需要把该进程持有的ASID加载进<code>TTBR1_EL1</code>中。</p>
<ul>
<li>进程中的标识：而ASID一般为<code>8 or 16</code>位，用于标识某个进程。
<ul>
<li>由于每个进程会有自己的<code>TTBR</code>配置信息，当进程切换回来时，会从内核中恢复装载该进程的TTBR信息，因此当切换为某个进程时，会更新该进程的TTBR信息到处理器的寄存器中。</li>
<li>当创建新进程时，会通过<strong>位图机制</strong>分配一个ASID给该进程。</li>
</ul></li>
<li>TLB中的标识：在TLB每项中也加上对于进程的ASID标志，每次确认是否命中时，会跟当前<code>TTBR</code>寄存器中的ASID值进行匹配，只有当ASID值以及虚拟地址的虚拟页表号VPN标识都匹配时，才算命中。</li>
</ul>
<p>通过上述流程就可以避免每次切换进程都刷新所有TLB表。<strong>只有当ASID被分配完了，这时才需要刷新全部的TLB来重新分配ASID</strong>。</p>
<p>同时，为了防止CPU熔断漏洞攻击出现CPU熔断问题，ARM采用了<code>KPTI</code>方案，将
TLB
也分为用户态表和内核态表，同时给每个进程分匹配<strong>奇数+偶数</strong>两个<code>ASID</code>
- <strong>用户态时用奇数ASID来访问TLB</strong> -
<strong>内核态时用偶数ASID来访问TLB</strong></p>
<p>这样就可以防止攻击者在用户态 trap 进内核态并更新内核态的页表到 TLB
后，回到用户态可以利用 ASID 访问内核态地址空间的问题。</p>
<p><strong>在虚拟化中，有一个类似的方案，是在TLB表项中加入VMID来进行标识。</strong></p>
<h2 id="armv8架构下高速缓存cache共享域一致性">1.5
ARMv8架构下高速缓存Cache共享域一致性</h2>
<p>ARM 根据数据共视范围可分为 4
个共享域，<strong>在存在共享域的范围内，所有可访问的硬件都要做好缓存一致性</strong>：
- 不可共享域：<code>L1 Cache</code>，单个<strong>CPU
核独享</strong>的，不需要确保一致性 -
内部共享域：<code>L2 Cache</code>，单个<strong>CPU
处理器多核之间共享</strong>的，需要确保内部共享域一致性 -
外部共享域：<code>L3 Cache</code>，<strong>多个CPU
处理器之间共享</strong>的，需要确保外部共享域一致性 -
系统共享域：<strong>所有设备（硬件单元）共享</strong>的，如CPU、GPU、DMA、NPU等，需要确保系统共享域一致性</p>
<p>其中，针对各个共享域通常有两种协议可以保证共享域缓存的一致性：<code>MESI</code>协议和<code>AMBA</code>协议。
-
其中<code>MESI</code>协议是纯硬件实现的，只适合处理<strong>内部共享域一致性</strong>问题
-
而<code>AMBA</code>协议对<strong>所有共享域的一致性问题</strong>都有效，其中<code>ACE</code>协议是<code>AMBA</code>协议的一种。在跨
CPU 处理缓存一致性问题时，通常通过<strong>广播</strong>方式通知其他 CPU
进行缓存更新。</p>
<p><img src="/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/ARMv8架构下高速缓存Cache共享域划分.png"></p>
<h2 id="虚拟化场景下两阶段映射的页表项">1.6
虚拟化场景下两阶段映射的页表项</h2>
<p>KVM 是 Linux 内核中的一部分，KVM 可将 Linux 转变为
hypervisor，使主机计算机能够运行多个隔离的虚拟环境(VM)，主要实现对
<strong>CPU</strong> 和 <strong>内存</strong> 二者的虚拟化，KVM 存在
type2 Hypevisor ： - type1 hypervisor:
直接控制硬件资源和客户机；没有宿主OS；</p>
<ul>
<li>type2 hypervisor:
Hypervisor运行在宿主机操作系统之上，<strong>Hypervisor只是宿主机操作系统的一个应用程序</strong>；宿主OS完全控制硬件和资源(CPU,内存等)。</li>
</ul>
<p>而 QEMU 是虚拟化的用户态部分，为每个 VM 虚拟机创建一个线程，针对每个
vCPU 创建一个线程，Guest
OS/应用运行在vCPU上；模拟I/O功能。KVM是内核模块，初始化CPU硬件，打开虚拟化模式；通常不负责I/O。两者的关系如下图所示：</p>
<p><img src="/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/虚拟化KVM和QEMU.png"></p>
<p><img src="/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/虚拟化KVM和QEMU的等级关系.png"></p>
<p>其中，为了实现对虚拟机内存的隔离与保护，ARM的SMMU中使用了两阶段页表，在
Stage2 中允许 hyervisor
控制虚拟机的内存试图、控制虚拟机可以访问哪些内存映射的系统资源，从而实现虚拟机间的隔离。而
Stage1 则是虚拟机内部的页表映射，具体如下图所示：</p>
<p><img src="/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/SMMU两阶段页表.png"></p>
<p>两阶段页表可以粗略理解为下面的过程：</p>
<p><img src="/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/TLB两阶段页表.PNG"></p>
<p>如上图所示，stage 1可以理解为<strong>guest 虚拟地址 -&gt; guest
物理地址的映射</strong>（其中的物理地址是客户机自认为的），stage
2可以理解为<strong>guest 物理地址 -&gt; 实际宿主机 host
的物理地址</strong>（真实的物理地址）。因此可以清晰地看出，就算没有guest，stage
2也是一直存在的</p>
<p>通过配置<code>VMID</code>可以实现跟非虚拟化下类似于<code>ASID</code>的隔离功能
- <code>ASID</code>隔离标识各个进程 - <code>VMID</code>隔离各个虚拟机
<code>VM</code></p>
<h2 id="tlb管理指令刷新tlb-维护tlb一致性">1.6
TLB管理指令：刷新TLB-维护TLB一致性</h2>
<p>内存一致性是由<code>DMB、DSB、ISB</code>三个指令来保证的，其中ISB可以解决页表不一致问题，相应地，对于TLB而言，当PTE页表失效or被修改时，也要确保TLB跟PTE的一致性。</p>
<p>为了防止在 PTE 被修改后，旧的 TLB
被指令先预取了，导致出现最后找到错误的物理地址的问题，因此在修改 PTE
时必须严格遵循以下顺序来刷新与他对应的缓存： 1. 先刷新 <code>TLB</code>
缓存 2. 再修改 <code>PTE</code> 页表</p>
<p>由于<code>TLBI</code>指令在内存执行次序上没有特权，也就是依然有可能会被乱序执行，因此需要通过<strong>内存屏障指令</strong>来维护TLB执行次序：</p>
<ul>
<li>单处理核中用：<code>DSB NSH</code></li>
<li>多核中用：<code>DSB ISH</code></li>
</ul>
<p>对于 TLB 的清除，ARMv8 中通过指令 <code>TLBI</code> 来实现，其中
<code>TLBI</code> 指令的格式如下：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">TLBI</span> &lt;type&gt;&lt;level&gt; &#123;IS/OS&#125;  &#123;&lt;Xt&gt;&#125;</span><br></pre></td></tr></table></figure>
<p>其中各项的说明如下：</p>
<ul>
<li>type：可以选择删除哪些 TLB 项，如可以选择删除整个
TLB，也可以与<code>VMID</code>、<code>ASID</code>配合，指定清除某些 TLB
项（因此可以清除虚拟机的，也可以清除host的）
<ul>
<li>使所有 TLB
项失效的类型：<code>ALL</code>、<code>VMALL</code>、<code>VALLS12</code>
<ul>
<li><code>ALL</code></li>
<li><code>VMALL</code>（针对虚拟化的），只失效当前 guest 的 stage 1
页表转换阶段一</li>
<li><code>VMALLS12</code>（针对虚拟化的）：失效当前 stage 1 和 stage 2
页表转换两阶段</li>
</ul></li>
<li>使<code>ASID</code>对应的<strong>某一个</strong> TLB
项失效：<code>VA</code>
<ul>
<li>同时<code>Xt</code>中需要指定<strong>虚拟地址+ASID</strong></li>
</ul></li>
<li>使<code>ASID</code>对应的<strong>所有</strong> TLB
项失效：<code>ASID</code>
<ul>
<li>同时<code>Xt</code>中需要指定<code>ASID</code></li>
</ul></li>
</ul></li>
<li>level：指定失效的地址空间层级（如E1、E2、E3），对应ARM的异常级别（EL0/EL1/EL2/EL3）
<ul>
<li><code>ALLE1</code>：EL1和EL0的所有TLB条目无效化</li>
<li><code>VALE2</code>：EL2的虚拟地址VA的最后一级的TLB无效化</li>
</ul></li>
<li>{IS/OS}：Inner Shareable（可选），确定 TLB 清除指令广播的范围
<ul>
<li><code>IS</code>：广播到<strong>内部共享</strong>范围内的所有 CPU
核心</li>
<li><code>OS</code>：广播到<strong>外部共享</strong>范围内的所有 CPU
核心</li>
<li>默认不选：只影响当前核心，不广播</li>
</ul></li>
<li>Xt：输入寄存器（可选），用于传递参数，由64位组成，可以同时传递如<strong>ASID、TTL（指定哪一级别的页表）、虚拟地址</strong>等。</li>
</ul>
<p>通过配合<code>TLBI</code>指令+<code>IS/OS</code>能实现 TLB
表清除的广播通知，TLB广播机制是为了确保<strong>多核间 TLB
保持一致性</strong>，只有当所有收到广播的CPU完成了TLB的维护操作。</p>
<p>ARM架构中<code>TLBI</code>的广播范围分为<code>IS</code>和<code>OS</code>，如下所示：</p>
<p><img src="/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/TLBI广播范围.png"></p>
<p>其中，一个Core中有L1 和 L2 TLB，每个Core内都维护着 TLB
表，而进程每次被cpu调度回来时可能不定地被调度到某个pCPU中，因此一个进程可能在多个pCPU的
TLB 表留下痕迹，最终导致在进行 TLB
表更新时需要TLBI广播到其他Core中。</p>
<p><img src="/2025/09/02/TLB%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/Cortex-A72处理器内部体系结构.png"></p>
<h2 id="常见需要-tlb-刷新的场景">1.7 常见需要 TLB 刷新的场景</h2>
<p>软件(OS)对于TLB的控制只有一种方式：TLB刷新(flush)，即使TLB失效。失效后，需要重新通过页表进行地址转换，同时会生成相应的新的TLB
entry。</p>
<p>TLB刷新会带来一定的性能损失，但当页表被修改时，或发生进程切换时，由于原有TLB中缓存的内容已经失效，此时必须通过软件触发TLB刷新操作。</p>
<ul>
<li><p>进程/虚拟机上下文切换</p>
<ul>
<li><p>进程切换：针对<code>ASID</code>无效化处理：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设 X0 存储新进程的 ASID（地址空间 ID）</span></span><br><span class="line"><span class="symbol">TLBI</span> ASIDE1, X0    <span class="comment">// 无效化当前核的旧 ASID 对应的 TLB 条目</span></span><br><span class="line"><span class="keyword">DSB</span> ISH            <span class="comment">// 数据同步屏障，确保 TLBI 完成</span></span><br><span class="line"><span class="keyword">ISB</span>                <span class="comment">// 指令同步屏障，保证后续指令使用新页表</span></span><br></pre></td></tr></table></figure></li>
<li><p>Hypervisor 切到 Guest时，需要无效化 stage 2页表</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">TLBI</span> ALLE2          <span class="comment">// 无效化所有 Stage-2 TLB（针对当前 VMID）</span></span><br><span class="line"><span class="keyword">DSB</span> ISH</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>当内核自己动态更新页表时，例如<strong>重新映射内核内存</strong>、<strong>添加新页面</strong>或<strong>更改访问权限</strong>时</p>
<p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">TLBI</span> VAAE1IS, X0  <span class="comment">// X0 存储需无效化的虚拟地址，且广播到内部共享域</span></span><br><span class="line"><span class="keyword">DSB</span> ISH</span><br></pre></td></tr></table></figure></p>
<ul>
<li>例如：内存分配/释放（如 <code>mmap/munmap</code>）</li>
<li>例如：调整内存权限（如 <code>mprotect</code> 设置只读→可写）</li>
<li>用<code>flush_tlb_kernel_range</code>：清除内核态的一段范围内的地址空间</li>
</ul></li>
<li><p>虚拟化场景（KVM/QEMU）</p>
<ul>
<li>Guest 内部修改页表后，Hypervisor 需确保 Host TLB 的一致性更新（stage
1修改后，需要更新stage 2的相关TLB） <figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">TLBI</span> IPAS2E1, X0    <span class="comment">// X0 存储 Guest 物理地址（GPA）</span></span><br><span class="line"><span class="keyword">DSB</span> ISH</span><br></pre></td></tr></table></figure></li>
<li>迁移过程中，目标 Host 需无效化旧 TLB
以加载新物理页映射。（无效化目标 host stage 2的所有 TLB）
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">TLBI</span> ALLE2          <span class="comment">// 无效化所有 Stage-2 TLB</span></span><br><span class="line"><span class="keyword">DSB</span> ISH</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h1 id="二tlb-相关的代码学习">二、TLB 相关的代码学习</h1>
<h2 id="tlbflush.h-tlb表项刷新方法">2.1 tlbflush.h TLB表项刷新方法</h2>
<p>armv8.4 支持 TLBI特性，相比原始的 TLB 刷新方法，TLBI
特性支持一种指令集批量处理地址刷新方法，性能更高，但是需要硬件支持。源码中提供了
TLBI 刷新方法，具体实现在 tlbflush.h 中。</p>
<p>在 Linux 中，与 TLB 清空相关的宏都在
<code>arch/arm64/include/asm/tlbflush.h</code>
文件中定义。在汇编层面，一个简易的 TLB 清空示例如下：</p>
<p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">TLBI</span> IPAS2E1, X0    <span class="comment">// X0 存储 Guest 物理地址（GPA），广播到内部共享域</span></span><br><span class="line"><span class="keyword">DSB</span> ISH             <span class="comment">// 数据同步屏障，确保 TLBI 完成</span></span><br></pre></td></tr></table></figure></p>
<p>在 linux 源码中，所有的 TLB flush
操作遵循下面的标准流程（模版）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*	DSB ISHST	<span class="comment">// Ensure prior page-table updates have completed</span></span><br><span class="line">*	TLBI ...	<span class="comment">// Invalidate the TLB</span></span><br><span class="line">*	DSB ISH		<span class="comment">// Ensure the TLB invalidation has completed</span></span><br><span class="line">*      <span class="keyword">if</span> (invalidated kernel mappings)</span><br><span class="line">*		ISB	<span class="comment">// Discard any instructions fetched from the old mapping</span></span><br></pre></td></tr></table></figure>
<ol type="1">
<li>DSB ISHST：确保之前的页表更新已经完成</li>
<li>TLBI ...：根据前面提及的各级别 TLB 缓存级别及对应的广播范围，进行
TLB 清除</li>
<li>DSB ISH：确保 TLB 广播清除已经完成</li>
<li>可选 ISB：如果有内核映射的失效，还需要 ISB
指令丢弃旧映射下可能已预取的指令</li>
</ol>
<p>其中，TLB flush 提供的核心接口有：</p>
<ul>
<li><code>flush_tlb_all</code>: 失效所有CPU上的全部TLB</li>
<li><code>flush_tlb_mm</code>: 失效指定ASID的用户空间TLB</li>
<li><code>flush_tlb_range</code>: 失效指定虚拟地址区间的TLB</li>
<li><code>flush_tlb_kernel_range</code>: 针对内核映射的区间失效</li>
<li><code>flush_tlb_page</code>: 失效单个用户页表项</li>
</ul>
<p>这些函数是内核内存管理的关键接口，确保虚拟地址空间的变更能被所有CPU及时感知。</p>
<h3 id="针对-vmid-的-tlb-失效">2.1.1 针对 VMID 的 TLB 失效</h3>
<p>通过修改<code>__tlbi(op);</code>里面的<code>op</code>参数，可以指定失效的TLB类型。</p>
<ul>
<li><p><code>local_flush_tlb_all</code>:
<code>VMALLE1</code>没有指定广播范围，因此在当前 VMID 下，使当前 cpu
下的 E1 级的所有 TLB 失效，这里仅仅包括虚拟化场景下阶段 1 的 TLB</p>
<p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">local_flush_tlb_all</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dsb(nshst);</span><br><span class="line">    __tlbi(vmalle1);</span><br><span class="line">    dsb(nsh);</span><br><span class="line">    isb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>flush_tlb_all</code>:<code>VMALLE1IS</code>指定广播范围，因此，在当前
VMID 下，使所有 CPU 中 E1 级的 TLB 失效，这里包括虚拟化场景下阶段 1 和 2
的 TLB</p>
<p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush_tlb_all</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dsb(ishst);</span><br><span class="line">    __tlbi(vmalle1is);</span><br><span class="line">    dsb(ish);</span><br><span class="line">    isb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h3 id="针对-asid-的-tlb-失效">2.1.2 针对 ASID 的 TLB 失效</h3>
<ul>
<li><p><code>flush_tlb_mm</code>: <code>ASIDE1IS</code></p>
<ul>
<li>级别：E1</li>
<li>指定广播范围：IS 共享域所有 CPUs</li>
<li>作用：会使所有 cpu 中 EL1 包含的 所有关于 ASID 这个进程的 TLB
失效</li>
</ul>
<p>为了获取表示当前进程的 ASID，方法中传入的进程的
<code>mm_struct</code>
结构体指针（进程的内存描述符），该结构体中保存了进程的 ASID。</p>
<p><code>__tlbi</code>对内核态中的 TLB 进行失效操作</p>
<p><code>__tlbi_user</code>对用户态中的 TLB 进行失效操作</p>
<p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush_tlb_mm</span><span class="params">(struct mm_struct *mm)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> asid;</span><br><span class="line"></span><br><span class="line">    dsb(ishst);</span><br><span class="line">    asid = __TLBI_VADDR(<span class="number">0</span>, ASID(mm));</span><br><span class="line">    __tlbi(aside1is, asid);</span><br><span class="line">    __tlbi_user(aside1is, asid);</span><br><span class="line">    dsb(ish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>flush_tlb_page_nosync</code>:<code>VALE1IS</code></p>
<ul>
<li>级别：E1</li>
<li>指定广播范围：IS 共享域所有 CPUs</li>
<li>指定虚拟地址：虚拟地址域 vma 下的 uaddr 地址</li>
<li>作用：会使所有 cpu 中 EL1 的关于 ASID 这个进程的 指定虚拟地址 的 TLB
失效</li>
</ul>
<p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush_tlb_page_nosync</span><span class="params">(struct vm_area_struct *vma,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="keyword">unsigned</span> <span class="keyword">long</span> uaddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> addr;</span><br><span class="line"></span><br><span class="line">    dsb(ishst);</span><br><span class="line">    addr = __TLBI_VADDR(uaddr, ASID(vma-&gt;vm_mm));</span><br><span class="line">    __tlbi(vale1is, addr);</span><br><span class="line">    __tlbi_user(vale1is, addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一般使用<code>flush_tlb_page</code>函数来调用上面的<code>flush_tlb_page_nosync</code>进行刷新，确保在结束时进行<code>dsb</code>同步屏障</p>
<p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush_tlb_page</span><span class="params">(struct vm_area_struct *vma,</span></span></span><br><span class="line"><span class="params"><span class="function">		  <span class="keyword">unsigned</span> <span class="keyword">long</span> uaddr)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  flush_tlb_page_nosync(vma, uaddr);</span><br><span class="line">  dsb(ish);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><code>__flush_tlb_range</code>:</p>
<ul>
<li>级别：E1</li>
<li>指定广播范围：IS 共享域所有 CPUs</li>
<li>指定虚拟地址：虚拟地址域 vma 下 指定范围[start, end]内 的 uaddr
地址</li>
<li>作用：指定虚拟内存区域（vm_area_struct）内失效（刷新）一段地址范围的TLB条目</li>
</ul>
<p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> __flush_tlb_range(struct vm_area_struct *vma,</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">long</span> start, <span class="keyword">unsigned</span> <span class="keyword">long</span> end,</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">long</span> stride, <span class="keyword">bool</span> last_level,</span><br><span class="line">     <span class="keyword">int</span> tlb_level)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> scale = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> asid, addr, pages;</span><br><span class="line"></span><br><span class="line">    start = round_down(start, stride);</span><br><span class="line">    end = round_up(end, stride);</span><br><span class="line">    pages = (end - start) &gt;&gt; PAGE_SHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * When not uses TLB range ops, we can handle up to</span></span><br><span class="line"><span class="comment">     * (MAX_TLBI_OPS - 1) pages;</span></span><br><span class="line"><span class="comment">     * When uses TLB range ops, we can handle up to</span></span><br><span class="line"><span class="comment">     * (MAX_TLBI_RANGE_PAGES - 1) pages.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((!system_supports_tlb_range() &amp;&amp;</span><br><span class="line">         (end - start) &gt;= (MAX_TLBI_OPS * stride)) ||</span><br><span class="line">        pages &gt;= MAX_TLBI_RANGE_PAGES) &#123;</span><br><span class="line">        flush_tlb_mm(vma-&gt;vm_mm);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dsb(ishst);</span><br><span class="line">    asid = ASID(vma-&gt;vm_mm);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * When the CPU does not support TLB range operations, flush the TLB</span></span><br><span class="line"><span class="comment">     * entries one by one at the granularity of &#x27;stride&#x27;. If the the TLB</span></span><br><span class="line"><span class="comment">     * range ops are supported, then:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. If &#x27;pages&#x27; is odd, flush the first page through non-range</span></span><br><span class="line"><span class="comment">     *    operations;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. For remaining pages: the minimum range granularity is decided</span></span><br><span class="line"><span class="comment">     *    by &#x27;scale&#x27;, so multiple range TLBI operations may be required.</span></span><br><span class="line"><span class="comment">     *    Start from scale = 0, flush the corresponding number of pages</span></span><br><span class="line"><span class="comment">     *    ((num+1)*2^(5*scale+1) starting from &#x27;addr&#x27;), then increase it</span></span><br><span class="line"><span class="comment">     *    until no pages left.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Note that certain ranges can be represented by either num = 31 and</span></span><br><span class="line"><span class="comment">     * scale or num = 0 and scale + 1. The loop below favours the latter</span></span><br><span class="line"><span class="comment">     * since num is limited to 30 by the __TLBI_RANGE_NUM() macro.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span> (pages &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!system_supports_tlb_range() ||</span><br><span class="line">            pages % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            addr = __TLBI_VADDR(start, asid);</span><br><span class="line">            <span class="keyword">if</span> (last_level) &#123;</span><br><span class="line">                __tlbi_level(vale1is, addr, tlb_level);</span><br><span class="line">                __tlbi_user_level(vale1is, addr, tlb_level);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                __tlbi_level(vae1is, addr, tlb_level);</span><br><span class="line">                __tlbi_user_level(vae1is, addr, tlb_level);</span><br><span class="line">            &#125;</span><br><span class="line">            start += stride;</span><br><span class="line">            pages -= stride &gt;&gt; PAGE_SHIFT;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        num = __TLBI_RANGE_NUM(pages, scale);</span><br><span class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addr = __TLBI_VADDR_RANGE(start, asid, scale,</span><br><span class="line">                          num, tlb_level);</span><br><span class="line">            <span class="keyword">if</span> (last_level) &#123;</span><br><span class="line">                __tlbi(rvale1is, addr);</span><br><span class="line">                __tlbi_user(rvale1is, addr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                __tlbi(rvae1is, addr);</span><br><span class="line">                __tlbi_user(rvae1is, addr);</span><br><span class="line">            &#125;</span><br><span class="line">            start += __TLBI_RANGE_PAGES(num, scale) &lt;&lt; PAGE_SHIFT;</span><br><span class="line">            pages -= __TLBI_RANGE_PAGES(num, scale);</span><br><span class="line">        &#125;</span><br><span class="line">        scale++;</span><br><span class="line">    &#125;</span><br><span class="line">    dsb(ish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 通过三个可选的参数来灵活控制清除策略：</p>
<ul>
<li><p>unsigned long stride</p>
<p>表示每次TLB失效操作的步长（即地址区间的跨度），通常为页大小。它决定了每次循环处理多少地址空间，影响失效的粒度。</p></li>
<li><p>bool last_level</p>
<p>指示是否只失效最后一级页表（即叶子页表项）。如果为
true，只刷新最后一级页表对应的TLB条目；如果为
false，则可能还会失效中间级别（如PGD/PUD/PMD）的walk cache。</p></li>
<li><p>int tlb_level</p>
<p>指定TLB失效操作针对的页表级别（如L1、L2、L3）。在支持ARMv8.4-TTL的CPU上，这个参数会作为TLBI指令的level
hint，帮助硬件更精确地失效对应级别的TLB条目。如果为0，则不带级别提示，执行普通失效。</p></li>
</ul>
<p>首先用<code>round_down</code>和<code>round_up</code>将<code>start</code>和<code>end</code>对齐到<code>stride</code>整数倍，确保后面可以按<code>stride</code>步长逐页操作
TLB，同时<code>pages</code>是对齐后需要操作的页数</p></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">                                                      +---------+</span><br><span class="line">                                                      |   开始  |</span><br><span class="line">                                                      +----+----+</span><br><span class="line">                                                           |</span><br><span class="line">                                       +-------------------V---------------+</span><br><span class="line">                                       |  start,end对齐为步长stride整数倍  |</span><br><span class="line">                                       +-------------------+---------------+</span><br><span class="line">                                                           |</span><br><span class="line">                                       +-------------------V---------------+</span><br><span class="line">                                       |  计算需要的总操作页数pages        |</span><br><span class="line">                                       +-------------------+---------------+</span><br><span class="line">                                                           |</span><br><span class="line">                                       +-------------------V---------------+</span><br><span class="line">                                       |  操作范围pages过大                |</span><br><span class="line">                                       +-------------------+---------------+</span><br><span class="line">                                      NO                   |              YES</span><br><span class="line">                 +-----------------------------------------+-------------------------------------------+</span><br><span class="line">                 |                                                                                     |</span><br><span class="line">        +--------V--------+                                                             +--------------V-------------+</span><br><span class="line">        | 硬件不支持or    |                                                             | flush_tlb_mm               |</span><br><span class="line">        | pages为单数     |                                                             | 将整个ASID进程的TLB全flush |</span><br><span class="line">        +--------+--------+                                                             +--------------+-------------+</span><br><span class="line">+---------------&gt;+&lt;------------------------------------------------------------------+                 |</span><br><span class="line">|                +-----------------------------------------+                         |                 |</span><br><span class="line">|                |YES                 NO                   |                         |                 |</span><br><span class="line">|      +---------V------------+             +--------------V----------------+        |                 |</span><br><span class="line">|      |  __TLBI_VADDR        |             |     __TLBI_VADDR_RANGE        |        |                 |</span><br><span class="line">|      |  (start, asid)       |             |     (start, asid, scale,      |        |                 |</span><br><span class="line">|      |  生成start所在单个页 |             |      num, tlb_level);         |        |                 |</span><br><span class="line">|      |  的TLBI操作数        |             |     失效一批连续几页的TLB条目 |        |                 |</span><br><span class="line">+      +---------+------------+             +--------------+----------------+        |                 |</span><br><span class="line">|                |                                         |                         |                 |</span><br><span class="line">|                |                                         |                         |                 |</span><br><span class="line">|                |                                         |                         |                 |</span><br><span class="line">|                |                          +--------------V-----------------+       |                 |</span><br><span class="line">|                |                          |     扩大连续页数的范围scale++  |       |                 |</span><br><span class="line">|                |                          +--------------+-----------------+       |                 |</span><br><span class="line">|   Pages &gt; 0    |                                         |     Pages &gt; 0           |                 |</span><br><span class="line">+----------------+                                         +-------------------------+                 |</span><br><span class="line">                 |                                         |                                           |</span><br><span class="line">                 |                                         |                                           |</span><br><span class="line">                 +------------------------------------+----+-------------------------------------------+</span><br><span class="line">                                                      |</span><br><span class="line">                                            +---------V----------+</span><br><span class="line">                                            |     结束Return     |</span><br><span class="line">                                            +--------------------+</span><br><span class="line">                                                                              </span><br></pre></td></tr></table></figure>
<p>批量失效的页数由公式 (num + 1) * 2^(5 * scale + 1) 决定，其中 num 和
scale 都是整数。 由于 2^(5 * scale + 1) 总是偶数，所以无论 num
取何值，最终结果都是偶数页。 - <code>flush_tlb_kernel_range</code></p>
<p>只针对内核的范围失效，没有用户空间ASID这么复杂的权限管理，因此实现方法比较简单</p>
<p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush_tlb_kernel_range</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> start, <span class="keyword">unsigned</span> <span class="keyword">long</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((end - start) &gt; (MAX_TLBI_OPS * PAGE_SIZE)) &#123;</span><br><span class="line">        flush_tlb_all();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start = __TLBI_VADDR(start, <span class="number">0</span>);</span><br><span class="line">    end = __TLBI_VADDR(end, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    dsb(ishst);</span><br><span class="line">    <span class="keyword">for</span> (addr = start; addr &lt; end; addr += <span class="number">1</span> &lt;&lt; (PAGE_SHIFT - <span class="number">12</span>))</span><br><span class="line">        __tlbi(vaale1is, addr);</span><br><span class="line">    dsb(ish);</span><br><span class="line">    isb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>flush_tlb_kernel_range</code>:
用于失效（刷新）与中间页表级别（如 pgd、pud、pmd）相关的TLB条目
<ul>
<li>作用：确保了内核在修改中间页表项后，所有CPU都能及时失效相关的TLB和步进缓存</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush_tlb_kernel_range</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> start, <span class="keyword">unsigned</span> <span class="keyword">long</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((end - start) &gt; (MAX_TLBI_OPS * PAGE_SIZE)) &#123;</span><br><span class="line">        flush_tlb_all();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start = __TLBI_VADDR(start, <span class="number">0</span>);</span><br><span class="line">    end = __TLBI_VADDR(end, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    dsb(ishst);</span><br><span class="line">    <span class="keyword">for</span> (addr = start; addr &lt; end; addr += <span class="number">1</span> &lt;&lt; (PAGE_SHIFT - <span class="number">12</span>))</span><br><span class="line">        __tlbi(vaale1is, addr);</span><br><span class="line">    dsb(ish);</span><br><span class="line">    isb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p><a href="https://www.cnblogs.com/linhaostudy/p/18226874">TLB一致性维护--代码解读</a></p>
</blockquote>
<h1 id="参考">参考</h1>
<blockquote>
<p>[1] <a href="https://codehub-y.huawei.com/w00606512/dev_notes/wiki?categoryId=247351&amp;sn=WIKI202507242387049">对TLBI的一个初步认识-by
wangzhou</a></p>
<p>[2] 《ARM64体系结构编程与实践》第17章TLB管理</p>
<p>[3] <a href="https://www.cnblogs.com/tianrenbushuai/p/18501643">ARM内部共享CPU与外部共享域CPU：四、缓存一致性相关</a></p>
<p>[4] <a href="https://zhuanlan.zhihu.com/p/76643300">SMMU和IOMMU技术-SMMU两阶段页表</a></p>
<p>[5] <a href="https://blog.csdn.net/flyingnosky/article/details/122629731">虚拟化下存在的两阶段映射的页表项</a></p>
<p>[6] <a href="https://www.cnblogs.com/ppddcsz/p/16879813.html">KVM-QEMU</a></p>
<p>[7] <a href="https://www.openeuler.org/zh/blog/wxggg/2020-11-21-iommu-smmu-intro.html">IOMMU和Arm
SMMU介绍</a></p>
<p>[8] <a href="https://www.cnblogs.com/binlovetech/p/17571929.html">一步一图带你构建
Linux 页表体系 —— 详解虚拟内存如何与物理内存进行映射</a></p>
<p>[9] <a href="https://www.cnblogs.com/sky-heaven/p/5133747.html">TLB源码学习_kernel
3.10内核源码分析--TLB相关--TLB概念、flush、TLB lazy模式 【转】</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>git常用技巧</title>
    <url>/2025/09/03/git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="状态类指令">1. 状态类指令</h1>
<ul>
<li><code>git branch</code>: 查看当前本地所处的
branch、本地中拉的所有的branch</li>
<li><code>git branch -r</code>: 查看远程所有的分支</li>
<li><code>git status</code> or <code>git st</code>: 当前所处
branch、是否有需要 commit 的</li>
<li><code>git log</code>: 查看当前 branch 的所有提交记录</li>
<li><code>git log --oneline</code>: 查看当前 branch
的所有提交记录，每行只显示 commit id 和 commit message
<ul>
<li>先 cd
到某一个子目录下查看该目录的提交记录，如<code>cd kernel/drivers/</code>再执行<code>git log --oneline</code></li>
<li>也可以 cd
到某个目录下查看某个具体文件的提交记录，如<code>cd kernel/drivers/</code>再执行<code>git log -p -- ./pci/pci-acpi.c</code></li>
</ul></li>
<li><code>git show -1</code>: 查看当前 branch 的最新一次提交记录</li>
</ul>
<p>git mm 特有的指令：</p>
<ul>
<li><code>git mm sync -j64</code>: 64线程同步远程代码</li>
</ul>
<h1 id="代码提交合并push到远程仓库">2.
代码提交、合并、push到远程仓库</h1>
<h2 id="代码提交暂时不推到远程仓中">1）代码提交：暂时不推到远程仓中</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add . # 添加所有文件</span><br><span class="line">git commit -m &quot;xxx&quot; # 本地提交</span><br></pre></td></tr></table></figure>
<h2 id="拉取代码">2）拉取代码</h2>
<h1 id="切换分支">3. 切换分支</h1>
<p>切换前最好先暂存一下当前的代码修改内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 暂存当前修改，需要切到修改的子仓库下</span></span><br><span class="line">git stash -m &quot;message&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时会显示clean</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看缓存的东西</span></span><br><span class="line">git stash list</span><br></pre></td></tr></table></figure>
<p>然后再切换到分支中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout old_branch # 切换到旧分支old_branch中</span><br><span class="line"><span class="meta">#</span><span class="bash">git checkout -b new_branch <span class="comment"># 创建并切换到新分支</span></span></span><br></pre></td></tr></table></figure>
<p>后面有需要的话还要恢复到暂存状态（恢复暂存代码）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 恢复特定的 stash （例如：stash@&#123;2&#125;）</span></span><br><span class="line">git stash apply stash@&#123;2&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> git stash pop <span class="comment"># 恢复并删除栈顶的 stash</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复所有 stash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git stash apply</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git stash drop <span class="comment"># 删除栈顶的 stash</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git stash drop stash@&#123;2&#125; <span class="comment"># 删除特定的 stash</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">git stash clear <span class="comment"># 清空所有 stash</span></span></span><br></pre></td></tr></table></figure>
<p>修改完代码也可以取消修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git restore ./* # 取消当前目录下所有修改</span><br><span class="line"><span class="meta">#</span><span class="bash">git restore ./&lt;path&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="diff-查看修改内容">4. diff 查看修改内容</h1>
<ul>
<li><code>git diff &lt;filrname.c&gt;</code></li>
<li><code>git status</code></li>
</ul>
<h1 id="撤销修改">5. 撤销修改</h1>
<ul>
<li><code>git stash -m "message"</code>:
会暂存修改并恢复到未修改状态</li>
<li><code>git restore .</code>: 取消当前目录下所有修改，且不会暂存</li>
</ul>
<h1 id="在一个已有内容的文件夹下将该内容同步到新的仓库中">6.
在一个已有内容的文件夹下将该内容同步到新的仓库中</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init # 初始化一个git仓库</span><br><span class="line">git remote -v # 验证当前仓库是否已经关联了远程仓库</span><br><span class="line"><span class="meta">#</span><span class="bash"> 逐个尝试下面的指令添加远程仓库</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git remote set-url origin &lt;url&gt; <span class="comment"># 在当前已经关联了一个其他仓库的情况下，更改远程仓库</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git remote add origin &lt;url&gt; <span class="comment"># 添加远程仓库</span></span></span><br><span class="line">add .</span><br><span class="line">commit -m &quot;xxx&quot;</span><br></pre></td></tr></table></figure>
<p>如果原先没有关联过其他仓库，那么还得进行一些分支的操作，如果之前已经有分支，那么可以直接<code>push</code>到新仓库中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/master  master # 设置当前分支的远程分支</span><br><span class="line">git pull origin master --allow-unrelated-histories # 拉取远程仓库的分支, 允许不相关的历史</span><br><span class="line">git push origin master # 推送到远程仓库</span><br><span class="line"><span class="meta">#</span><span class="bash"> git push -u origin master <span class="comment"># 推到远程仓库的同时，设置当前分支的远程分支</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git push -u origin my_lab <span class="comment"># 把本地 my_lab 直接推到远程（远程没有会自动创建）</span></span></span><br></pre></td></tr></table></figure>
<p>然后就可以观察远程仓库上是不是已经被 push 上去了</p>
]]></content>
  </entry>
  <entry>
    <title>linux常用技巧</title>
    <url>/2025/09/03/linux%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="vim">1. vim</h1>
<ul>
<li><code>.</code>:小数点，重复上一次的命令</li>
</ul>
<h2 id="vim-中进行查找">vim 中进行查找</h2>
<p>1）基本查找命令</p>
<p>查找下一个匹配项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/&lt;搜索内容&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>按下 / 键，输入要查找的内容，然后按下回车键 Enter。</li>
<li>例如：<code>/hello</code>表示查找 hello</li>
</ul>
<p>2）跳转到另一个查找结果</p>
<ul>
<li>跳转到下一个匹配项：按<code>n</code>键</li>
<li>跳转到上一个匹配项：按<code>N</code>键</li>
</ul>
<p>3）<a href="https://www.cnblogs.com/imzhi/p/vim-drawit.html">vim-drawit操作指南</a></p>
<h2 id="vim-中复制粘贴">vim 中复制粘贴</h2>
<p>复制：</p>
<ul>
<li><code>yy</code>: 复制当前行</li>
<li><code>nyy</code>: 复制从当前行开始的 n 行（例如：<code>3yy</code>
复制当前行及其下两行，共三行）</li>
</ul>
<p>粘贴：</p>
<ul>
<li><code>p</code>: 在光标后粘贴</li>
</ul>
<h2 id="光标移动">光标移动</h2>
<ul>
<li><code>NG</code>: 跳转到第 N 行</li>
<li><code>:n</code>: 跳转到第 N 行</li>
<li><code>gg</code>: 跳转到第一行, 相当于 <code>1G</code></li>
<li><code>G</code>: 跳转到最后一行</li>
<li><code>w</code>: 光标跳到下一个单词的开头</li>
<li><code>e</code>: 光标跳到当前单词的结尾</li>
<li><code>%</code>: 跳转到匹配的括号处（大括号、中括号）</li>
<li><code>*</code>:
高亮显示所有与当前光标所在单词<strong>相同的单词处</strong>
<ul>
<li>按 <code>n</code> 跳转到下一个匹配处</li>
<li>按 <code>N</code> 跳转到上一个匹配处</li>
</ul></li>
</ul>
<p>组合命令：</p>
<p><start position> <end position> <command></end></start></p>
<p>example:</p>
<ul>
<li><code>0y$</code>: 复制从行首到行尾的内容
<ul>
<li><code>0</code>: 行首</li>
<li><code>y</code>: 复制</li>
<li><code>$</code>: 行尾</li>
</ul></li>
</ul>
<p>其他高级组合用法符号说明：</p>
<ul>
<li><code>0</code>: 行首</li>
<li><code>^</code>: 到本行<strong>第一个</strong>非空字符</li>
<li><code>$</code>: 行尾</li>
<li><code>g</code>: 到本行<strong>最后一个</strong>非空字符</li>
<li><code>fa</code>: 到下一个匹配的字符 a 处（可以改变 a
为其他字符）</li>
<li><code>t,</code>: 到逗号前的第一个字符（逗号可以改变为其他字符）</li>
</ul>
<h1 id="terminal-操作">2. terminal 操作</h1>
<h2 id="内核相关路径查找">内核相关路径查找</h2>
<p><code>uname -a</code>: 显示当前内核信息</p>
<p><code>ls -l /usr/src</code>: 找到 uname -r 显示的版本的内核路径</p>
<h2 id="查看磁盘哪个占用最高">查看磁盘哪个占用最高</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">sudo du -sh /* 2&gt;/dev/null | sort -hr | head -n 10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2&gt;/dev/null: 忽略没有权限访问的目录产生的错误信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> du 指令按查询结果逐层筛查</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18G     /home</span><br><span class="line">7.5G    /usr</span><br><span class="line">348M    /root</span><br><span class="line">277M    /boot</span><br><span class="line">166M    /var</span><br><span class="line">35M     /etc</span><br><span class="line">12M     /run</span><br><span class="line">40K     /opt</span><br><span class="line">16K     /lost+found</span><br><span class="line">4.0K    /srv</span><br></pre></td></tr></table></figure>
<p>假设逐层检查发现是 <code>/var/crash</code>
占用最高，如果确认占用最高的目录删除后没有影响，那么就删除该目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /var/crash/*</span><br></pre></td></tr></table></figure>
<h2 id="设置环境变量">设置环境变量</h2>
<p>用 <code>export</code> 命令设置环境变量，例如：</p>
<p>配置路径：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/bin</span><br></pre></td></tr></table></figure>
<p>配置变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export $VAR=value</span><br><span class="line">echo $VAR # 验证环境变量是否正确设置到系统中</span><br></pre></td></tr></table></figure>
<h2 id="关闭内核打印">关闭内核打印</h2>
<p>有时候我们在应用层调试程序的时候想暂时屏蔽掉内核的无用打印，可以在
host 用以下方法暂时关闭，这样开启 guest
虚机的时候就不会将内核信息打印到主机中，影响性能：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/kernel/printk</span><br></pre></td></tr></table></figure>
<h2 id="修改-linux-密码">修改 linux 密码</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证sudo的密码后，输入新密码</span></span><br></pre></td></tr></table></figure>
<h1 id="gdb-调试">3. gdb 调试</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) target remote localhost:1234</span><br><span class="line">(gdb) b _start</span><br><span class="line">(gdb) c</span><br><span class="line">(gdb) layout regs # 查看寄存器</span><br><span class="line">(gdb) s # 运行下一条指令</span><br><span class="line"><span class="meta">#</span><span class="bash"> (gdb) n <span class="comment"># 跳过当前函数</span></span></span><br><span class="line">(gdb) x/x $pc # 查看当前pc地址的值</span><br><span class="line">(gdb) q # 退出</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>虚拟化：CPU虚拟化</title>
    <url>/2025/09/14/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%9ACPU%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
    <content><![CDATA[<h1 id="一虚拟化类型介绍">一、虚拟化类型介绍</h1>
<p>Hypervisor：虚拟机管理程序，也叫做 VMM（Virtual Machine
Manager），Hypervisor
位于计算机硬件和虚拟机之间，负责管理和分配计算机资源给各个虚拟机。</p>
<ul>
<li><p>Type1：第一类虚拟机管理程序就像<strong>小型操作系统</strong>，目的就是管理所有的虚拟机，常见的虚拟化软件有Xen、ACRN等</p>
<ul>
<li><p>运行级别：Hyprvisor 运行在 <strong>EL2</strong>，VM
的<strong>操作系统OS、内核</strong>运行在 <strong>EL1</strong></p>
<p><img src="/2025/09/14/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%9ACPU%E8%99%9A%E6%8B%9F%E5%8C%96/2025-09-14-15-32-54.png"></p></li>
</ul></li>
<li><p>Type2：第二类虚拟机管理程序依赖于Windows、Linux等主机操作系统来分配和管理调度资源，常见的虚拟化软件有VMware
Player、KVM以及Virtual
Box等。也就是说这一类必须有一个<strong>宿主操作系统</strong></p></li>
</ul>
<p><img src="/2025/09/14/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%9ACPU%E8%99%9A%E6%8B%9F%E5%8C%96/2025-09-14-15-40-09.png"></p>
<p>kvm 属于 type2 虚拟化，但是由于硬件问题，为了方便直接用 qemu
做实验，我们将在 benos 基础上设计一个 type1
的软件虚拟化。这部分在后面的实操会再进一步介绍。</p>
<h1 id="二vcpu">二、vCPU</h1>
<p>在虚拟化中，一个 VM 虚拟机由
vCPU、虚拟的内存、存储、网络等，组成的独立运行的计算机。其中一个 VM
可以有多个进程，每个进程可以运行在不同的 vCPU 上。</p>
<p><img src="/2025/09/14/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%9ACPU%E8%99%9A%E6%8B%9F%E5%8C%96/2025-09-14-14-55-33.png"></p>
<p>而对于 host 来说， vcpu 其实就是一个线程，他会被 hypervisor
调度到不同的 pCPU 上运行，但是同一时间内，一个 vcpu 只能被一个 pCPU
运行。vCPU 被调度 load 的过程如下：</p>
<p><img src="/2025/09/14/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%9ACPU%E8%99%9A%E6%8B%9F%E5%8C%96/2025-09-14-15-47-51.png"></p>
<p>从上述过程可以看出，CPU/vCPU 运行的本质行为其实就是从 PC
寄存器所指内存区域中不断取出指令解码执行，我们不难想到的是，实现一个虚拟机最简单粗暴的方法便是通过模拟每一条指令对应的行为，从而使得
VM 的行为对 VMM 而言是完全可控的。</p>
<blockquote>
<p><a href="https://www.techtarget.com/searchitoperations/tip/Whats-the-difference-between-Type-1-vs-Type-2-hypervisor">type
1 和 type 2 虚拟机的区别</a></p>
<p><a href="https://ctf-wiki.org/pwn/virtualization/basic-knowledge/cpu-virtualization/">CPU
虚拟化</a></p>
</blockquote>
<h1 id="三异常处理">三、异常处理</h1>
<p>vCPU 之间的调度、任务处理其实基本离不开多个 EL 级别的切换，而 EL
级别切换的实现，需要通过异常处理来实现。比如我们实现从 pCPU 切换到 vCPU
的过程是 EL2 切换到 EL1 的过程。</p>
<p>关于异常，我们划分为<strong>同步异常</strong>和<strong>异步异常</strong>两种：</p>
<ul>
<li>同步异常：
<ul>
<li>系统调用：svc，hvc，SMC等</li>
<li>MMU引发的异常：缺页</li>
<li>SP和PC对齐检查</li>
</ul></li>
<li>异步异常：其中通常将<strong>中断（IQR、FQR、SERROR）</strong>划分为异步异常，这种异常是跟指令无关的。</li>
</ul>
<p>当异常发生时，可能会 trap 到其他的 EL
中进行处理，也会进行一些上下文保存等操作，根据操作系统根据异常类型，跳转到合适的异常向量表中进行处理：</p>
<p><img src="/2025/09/14/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%9ACPU%E8%99%9A%E6%8B%9F%E5%8C%96/2025-09-14-16-07-22.png"></p>
<p>其中，针对异常向量表，在<code>VBAR_ELx</code>寄存器中保存了各类异常的<strong>处理程序跳转地址</strong>。具体来说，会跳转到<code>VBAR_ELx + 0x[xxx]</code>处，这个过程与非虚拟化场景一样，但是差别是在<code>hypervisor</code>中也要初始化一个对应的<code>VBAR_ELx</code>异常向量表</p>
<p>在内核中，有两个关于 RETURN 的寄存器：</p>
<ul>
<li><code>x30</code>：<strong>子函数</strong>返回地址，使用
<code>ret</code> 指令返回</li>
<li><code>ELR_ELx</code>：<strong>异常处理程序</strong>返回地址，使用
<code>eret</code> 指令返回
<ul>
<li>对于<strong>异步异常</strong>，它的返回地址是中断发生时的<strong>下一条指令</strong>，或者没有执行的第一条指令。</li>
<li>对于<strong>不是system call</strong>的同步异常，返回的是
<strong>触发同步异常的那一条指令</strong>。</li>
<li>对于<strong>system
call</strong>，它是返回<strong>svc/hvc指令的下一条指令</strong></li>
</ul></li>
</ul>
<p>异常处理过程中，需要路由到进行异常处理的 EL 中。异常处理最低也要在
EL1 中处理，EL0 不处理异常，而虚拟化场景下，很多需要路由到 EL2
（hypervisor）中进行。</p>
<p>由<code>HCR_EL2</code> 与 <code>SCR_EL3</code>
两个寄存器控制路由，HCR_EL2.RW 记录了 EL1
运行在32位模式还是64位模式。</p>
<p><img src="/2025/09/14/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%9ACPU%E8%99%9A%E6%8B%9F%E5%8C%96/2025-09-14-16-34-54.png"></p>
<h1 id="四实验">四、实验</h1>
<p>在非虚拟化场景下，<code>BenOS</code>运行在 EL1
中，在虚拟化场景下，我们将<code>BenOS</code>运行在 EL2 中，充当
hypervisor</p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
  </entry>
  <entry>
    <title>驱动原理学习1：字符设备驱动</title>
    <url>/2025/09/08/%E9%A9%B1%E5%8A%A8%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A01%EF%BC%9A%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="一字符设备驱动">一、字符设备驱动</h1>
<h2 id="ioctl">1.1 ioctl</h2>
<p><code>ioctl</code>是用于设备控制的公共接口，可以实现用户态<strong>系统调用</strong>、<strong>设备驱动程序</strong>进行通信。<code>ioctl</code>在<strong>字符设备、块设备、网络设备</strong>等设备驱动程序中广泛使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+---------------+          +---------------+       +---------------+       +---------------------------+</span><br><span class="line">|  用户态ioctl   +---------&gt;| 陷入内核传递   +------&gt;| 内核查找       +------&gt;| sys_ioctl()根据文件操作集 |</span><br><span class="line">|               |          | 系统调用号54   |       | 系统调用号54   |       | 找到驱动程序mydev_ioctl   |</span><br><span class="line">+---------------+          +---------------+       +---------------+       +------------+--------------+</span><br><span class="line">        ^                                                                               |</span><br><span class="line">        |                                                                               |</span><br><span class="line">        |                                                                               |</span><br><span class="line">        |                                                                               v</span><br><span class="line">        |                                                                  +---------------------------+</span><br><span class="line">        +------------------------------------------------------------------+                           |</span><br><span class="line">                                                                           | 执行驱动程序mydev_ioctl    |</span><br><span class="line">                                                                           +---------------------------+</span><br></pre></td></tr></table></figure>
<h2 id="用户态ioctl和驱动ioctl">1.2 用户态ioctl和驱动ioctl</h2>
<p>系统调用过程中，实际上就是<strong>处于用户空间的用户态ioctl</strong>对应上特定<strong>内核空间中ioctl</strong>的过程</p>
<p>但是用户态没有访问内核空间的权限，因此需要系统先通过<code>SWI(Software Interrupt)</code>的方式从用户态陷入内核态，并利用<code>sys_ioctl</code>通过<strong>文件操作集</strong>找到对应的驱动ioctl，三者共同构成了Linux
I/O控制的核心机制。</p>
<h3 id="用户态ioctl">1）用户态ioctl</h3>
<p>在Linux中，glibc/标准库中（<code>/usr/include/sys</code>）封装着为用户程序提供的统一<code>ioctl</code>接口，在&lt;sys/ioctl.h&gt;中定义了ioctl函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">ioctl</span> <span class="params">(<span class="keyword">int</span> __fd, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> __request, ...)</span> __THROW</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>fd</code>：设备文件描述符。表示要操作的设备对象。</li>
<li><code>request</code>：也常将该参数写作<code>cmd</code>，表示对设备进行控制的命令，设备驱动将根据cmd参数执行对应的操作
<ul>
<li>该参数定义了<strong>用户与驱动的“协议”</strong>，虽然可以是任意值，但是Linux中还是提供了统一格式，将32位的int型数据划分成4个位段，来保证参数的唯一性。</li>
</ul></li>
<li><code>...</code>：可选参数，表示对设备进行控制的命令参数，可以是整数、指针等类型，用于传递给驱动程序。</li>
</ul>
<p>下面讲解一下
<code>request</code>/<code>cmd</code>参数中的4个位段信息： -
<code>dir</code>-2bit：表示数据传输方向（四种） -
<code>_IOC_NONE</code>：无数据传输 -
<code>_IOC_READ</code>：数据从内核空间（设备）读取到用户空间 -
<code>_IOC_WRITE</code>：数据从用户空间写入到内核空间（设备） -
<code>_IOC_READ|_IOC_WRITE</code>：数据在用户空间和内核空间之间双向传输
-
<code>type</code>-8bit：设备类型标识符，用于区分不同设备。也成为<strong>幻数/魔数</strong>
-
<code>nr(number)</code>-8bit：命令序号，用于区分同一设备的不同命令，可以从0~255之间进行编号
-
<code>size</code>-14bit：表示用户传入的用户数据<code>...</code>部分参数的数据类型和长度，单位是字节
- 系统并不强制使用这个位字段，因此内核不会检查该字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 31             30           16 15            8 7             0</span><br><span class="line">+---------------+--------------+---------------+---------------+</span><br><span class="line">|     dir       |     size     |    type       |    nr         |</span><br><span class="line">+---------------+--------------+---------------+---------------+</span><br></pre></td></tr></table></figure>
<p>假设按照这4个字段来划分<code>cmd</code>参数，在宏定义时会定义<code>_IOC_DIRSHIFT</code>、<code>_IOC_TYPESHIFT</code>、<code>_IOC_NRSHIFT</code>、<code>_IOC_SIZESHIFT</code>这4个移位值，然后通过移位操作来获取这4个字段的值。</p>
<p>通常，我们不直接使用<code>ioctl</code>函数，而是使用一些宏定义，如<code>_IOC</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IOC(dir,type,nr,size) \</span></span><br><span class="line"><span class="meta">    (((dir)  &lt;&lt; _IOC_DIRSHIFT) | \</span></span><br><span class="line"><span class="meta">     ((type) &lt;&lt; _IOC_TYPESHIFT) | \</span></span><br><span class="line"><span class="meta">     ((nr)   &lt;&lt; _IOC_NRSHIFT) | \</span></span><br><span class="line"><span class="meta">     ((size) &lt;&lt; _IOC_SIZESHIFT))</span></span><br></pre></td></tr></table></figure>
<p>并利用<code>_IOC</code>衍生的接口<code>_IO</code> <code>_IOR</code>
<code>_IOW</code> <code>_IOWR</code> 等来生成指定的ioctl命令：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO(type,nr)        _IOC(_IOC_NONE,(type),(nr),0)	<span class="comment">//定义不带参数的 ioctl 命令</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IOR(type,nr,size)  _IOC(_IOC_READ,(type),(nr),(_IOC_TYPECHECK(size)))	<span class="comment">//定义											带写参数的 ioctl 命令（copy_from_user）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IOW(type,nr,size)  _IOC(_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))	<span class="comment">//定义											带读参数的ioctl命令（copy_to_user）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IOWR(type,nr,size) _IOC(_IOC_READ|_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))		<span class="comment">//定义带读写参数的 ioctl 命令</span></span></span><br></pre></td></tr></table></figure>
<h3 id="sys_ioctl">2）sys_ioctl</h3>
<p><code>ioctl</code>会让用户态触发中断陷入内核，所以<code>ioctl</code>本身也有一个<strong>系统调用号</strong><code>__NR_ioctl</code>，在&lt;arch/arm64/include/asm/unistd32.h&gt;中定义：</p>
<p>中断陷入内核态之后，会根据寄存器传递过来的系统调用号(54)，执行系统调用表中的(54)操作，就是调用sys_ioctl()函数。</p>
<p><img src="/2025/09/08/%E9%A9%B1%E5%8A%A8%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A01%EF%BC%9A%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/ioctl的系统调用号.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __NR_ioctl 54</span></span><br><span class="line">__SYSCALL(__NR_ioctl, compat_sys_ioctl)</span><br></pre></td></tr></table></figure>
<p>这里<code>sys_ioctl</code>函数的声明为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_ioctl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span>;</span><br></pre></td></tr></table></figure>
<p>实际上我们使用的时候用的是<code>SYSCALL_DEFINE3</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE3(ioctl, <span class="keyword">unsigned</span> <span class="keyword">int</span>, fd, <span class="keyword">unsigned</span> <span class="keyword">int</span>, cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span>, arg)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1. 根据fd找到对应的file结构体</span></span><br><span class="line">    <span class="comment">// 2. 检查权限和参数有效性</span></span><br><span class="line">    <span class="comment">// 3. 调用具体设备的ioctl操作方法</span></span><br><span class="line">    <span class="keyword">return</span> do_vfs_ioctl(file, fd, cmd, arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>SYSCALL_DEFINE3</code>中执行<code>do_vfs_ioctl</code>，深挖到该接口里面会发现它将<strong>对应的驱动程序的ioctl加入到了文件操作集</strong>中，由此路由到对应的<strong>驱动ioctl</strong>函数中执行对应的操作</p>
<h3 id="驱动ioctl">3）驱动ioctl</h3>
<p>假设我们某个中断的目标是路由到<code>led_ioctl</code>驱动程序中，定义该驱动函数为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">led_ioctl</span><span class="params">(struct file *file, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br></pre></td></tr></table></figure>
<p>在驱动程序中用switch对该设备的<code>cmd</code>号进行解析，并执行对应的操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符设备驱动示例</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">mydev_ioctl</span><span class="params">(struct file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> MYDEV_CMD_READ:</span><br><span class="line">        <span class="comment">// 处理读取请求</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MYDEV_CMD_WRITE:</span><br><span class="line">        <span class="comment">// 处理写入请求</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> -ENOTTY; <span class="comment">// 不支持的命令</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在file_operations中注册(注册到文件操作集中，供给sys_ioctl路由到这（通过`unlocked_ioctl`）)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">mydev_fops</span> =</span> &#123;</span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    .unlocked_ioctl = mydev_ioctl,</span><br><span class="line">    <span class="comment">// 其他操作方法...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>执行里面的驱动函数就能实现完整的系统调用，最后再将结果返回给用户态。</p>
<h1 id="二">二、</h1>
<h1 id="参考">参考</h1>
<blockquote>
<p>[1] <a href="https://blog.csdn.net/weixin_71478434/article/details/126551082">一文搞懂内核块设备操作之ioctl系统调用过程</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>虚拟化：内存虚拟化</title>
    <url>/2025/09/14/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%9A%E5%86%85%E5%AD%98%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
    <content><![CDATA[<h1 id="一内存虚拟化介绍">一、内存虚拟化介绍</h1>
<p>虚拟化有<strong>软件模拟方式和硬件模拟方式</strong></p>
<ul>
<li><p>软件模拟方式需要通过<strong>影子页表</strong>来实现内存映射，速度比较慢</p></li>
<li><p>硬件模拟方式丢弃了影子页表的方式，通过4种地址来实现转换：</p>
<ul>
<li><p>gva -&gt; vm转换为 -&gt; gpa</p></li>
<li><p>hva -&gt; kvm转换为 -&gt; hpa</p></li>
</ul></li>
</ul>
<p><img src="/2025/09/14/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%9A%E5%86%85%E5%AD%98%E8%99%9A%E6%8B%9F%E5%8C%96/2025-09-14-15-15-33.png"></p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟化：IO虚拟化</title>
    <url>/2025/09/14/%E8%99%9A%E6%8B%9F%E5%8C%96%EF%BC%9AIO%E8%99%9A%E6%8B%9F%E5%8C%96/</url>
    <content><![CDATA[<h1 id="一io虚拟化介绍">一、IO虚拟化介绍</h1>
<p>IO虚拟化通常有三种： -
软件模拟设备：以磁盘为例，虚拟机管理程序可以在实际的磁盘上创建一个文件一块区域来模拟虚拟磁盘，并把它传递给客户机。缺点是每次都要陷入
VMM，性能会下降 -
设备透传：虚拟机管理程序把物理设备直接分配给特定的虚拟机。但是这样一个设备只能被一个虚拟机使用，如果多个虚拟机需要使用同一个设备，就会产生冲突
- SR-IOV：解决设备透传带来的问题。他可以通过将一个 PF 创建为多个
VF，然后把 VF 分配给不同的虚拟机，从而实现多个虚拟机使用同一个设备</p>
<p>原先只有 CPU 会有一个 MMU内存管理单元，为了防止 IO
设备在虚拟机中做一些非法操作，衍生出一个 IOMMU 来进行管理。</p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
  </entry>
  <entry>
    <title>ARM64结构与编程:QEMU_BenOS环境搭建</title>
    <url>/2025/09/14/ARM64%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A8%8B-QEMU-BenOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>项目仓库：<a href="https://github.com/AkiraZheng/BenOS_ARM.git">https://github.com/AkiraZheng/BenOS_ARM.git</a></p>
</blockquote>
<h1 id="一安装qemu环境">一、安装QEMU环境</h1>
<p>在Ubuntu 20.04
LTS上安装定制的QEMU环境，需要两个文件<code>openocd-benos_1.0-3_amd64.deb</code>，<code>qemu-system-arm-pi4_4.1.50-3_without_GIC_amd64.deb</code></p>
<p>把两个 .deb 文件放在同一目录，然后 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo dpkg -i *.deb          <span class="comment"># 先装包</span></span><br><span class="line">sudo apt-get install -f     <span class="comment"># 自动补依赖</span></span><br><span class="line"></span><br><span class="line">sudo apt install gcc-aarch64-linux-gnu</span><br><span class="line">sudo apt install gdb-multiarch</span><br></pre></td></tr></table></figure></p>
<h1 id="二代码仓配置">二、代码仓配置</h1>
<p><code>armv8_trainning.git-20240318.tar.xz</code>代码解压到ubuntu中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir BenOS_code</span><br><span class="line">sudo mv ./armv8_trainning.git-20240318.tar.xz ./BenOS_code/</span><br><span class="line">sudo chmod 777 -R ./BenOS_code</span><br><span class="line"><span class="built_in">cd</span> ./BenOS_code</span><br><span class="line">tar -Jxf  armv8_trainning.git-20240318.tar.xz</span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure>
<p><img src="/2025/09/14/ARM64%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A8%8B-QEMU-BenOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2025-09-15-00-03-44.png"></p>
<p>在工作目录下载实验参考代码的git repo:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/akira/BenOS_Learn/BenOS_code/</span><br><span class="line">mkdir code</span><br><span class="line">git <span class="built_in">clone</span> ssh://akira@ubuntu/home/akira/BenOS_Learn/BenOS_code/armv8_trainning.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># git diff 3262911^ f280813 # 查看某一次提交所修改的代码，跟旧代码相比较</span></span><br></pre></td></tr></table></figure>
<p>此时就能生成一个名为<code>armv8_trainning</code>的目录，里面有代码</p>
<p><img src="/2025/09/14/ARM64%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A8%8B-QEMU-BenOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2025-09-14-18-06-06.png"></p>
<p>代码下有两个分支：</p>
<ul>
<li>main：是完整的代码，仅供参考</li>
<li>my_labs：是BenOS的空骨架，在这里完成实验</li>
</ul>
<p><img src="/2025/09/14/ARM64%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A8%8B-QEMU-BenOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2025-09-15-00-06-15.png"></p>
<p>我们切换到<code>my_labs</code>分支进行实验：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch my_lab</span><br><span class="line">git checkout my_lab</span><br><span class="line">git reset 3262911 --hard</span><br></pre></td></tr></table></figure>
<p>当需要提交代码时，可以提交到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh://akira@ubuntu/home/akira/BenOS_Learn/BenOS_code/armv8_trainning.git</span><br></pre></td></tr></table></figure>
<h1 id="三qemu运行benos">三、QEMU运行BenOS</h1>
<p>在<code>lab01</code>的实验中打印一个<code>hello world</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make run</span><br></pre></td></tr></table></figure>
<p><img src="/2025/09/14/ARM64%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A8%8B-QEMU-BenOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2025-09-14-18-24-43.png"></p>
<p>代码运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">akira@ubuntu:~/BenOS_Learn/BenOS_code/code/armv8_trainning/lab01$ make</span><br><span class="line">mkdir -p build</span><br><span class="line">aarch64-linux-gnu-gcc -DCONFIG_BOARD_PI4B -g -Wall -nostdlib -nostdinc -Iinclude -MMD -c src/pl_uart.c -o build/pl_uart_c.o</span><br><span class="line">mkdir -p build</span><br><span class="line">aarch64-linux-gnu-gcc -DCONFIG_BOARD_PI4B -g -Wall -nostdlib -nostdinc -Iinclude -MMD -c src/kernel.c -o build/kernel_c.o</span><br><span class="line">aarch64-linux-gnu-gcc -g -Iinclude  -MMD -c src/mm.S -o build/mm_s.o</span><br><span class="line">aarch64-linux-gnu-gcc -g -Iinclude  -MMD -c src/boot.S -o build/boot_s.o</span><br><span class="line">aarch64-linux-gnu-ld -T src/linker.ld -o build/benos.elf  build/pl_uart_c.o build/kernel_c.o build/mm_s.o build/boot_s.o</span><br><span class="line">aarch64-linux-gnu-objcopy build/benos.elf -O binary benos.bin</span><br><span class="line">akira@ubuntu:~/BenOS_Learn/BenOS_code/code/armv8_trainning/lab01$ make run</span><br><span class="line">qemu-system-aarch64 -machine raspi4 -nographic -kernel benos.bin</span><br><span class="line">Welcome BenOS!</span><br></pre></td></tr></table></figure>
<p>Ctrl-A 松手后再按 X 退出</p>
<p>然后尝试用QEMU+GDB进行调试。</p>
<p>在一个终端中输入以下命令，启动qemu的gdb调试环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make debug</span><br></pre></td></tr></table></figure>
<p>在另一个终端中输入</p>
<!-- gdb的使用方法后面挪到linux技巧中 -->
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">gdb-multiarch --tui ./build/benos.elf</span><br><span class="line">(gdb) target remote localhost:1234</span><br><span class="line">(gdb) b _start</span><br><span class="line">(gdb) c</span><br><span class="line">(gdb) layout regs <span class="comment"># 查看寄存器</span></span><br><span class="line">(gdb) s <span class="comment"># 运行下一条指令</span></span><br><span class="line"><span class="comment"># (gdb) n # 跳过当前函数</span></span><br><span class="line">(gdb) x/x <span class="variable">$pc</span> <span class="comment"># 查看当前pc地址的值</span></span><br></pre></td></tr></table></figure>
<p>退出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(gdb) q</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>ARM64结构与编程:加载和存储指令</title>
    <url>/2025/09/14/ARM64%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A8%8B-%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%AD%98%E5%82%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="一加载和存储指令">一、加载和存储指令</h1>
<p>ARM64指令集提供了很多加载和存储指令，比如： -
<code>ldr</code>：加载指令，从内存中加载数据到寄存器 -
<code>str</code>：存储指令，将寄存器中的数据存储到内存中 -
<code>ldrb</code>：加载指令，从内存中加载一个字节数据到寄存器 -
<code>strb</code>：存储指令，将寄存器中的字节数据存储到内存中</p>
<h1 id="二代码实践">二、代码实践</h1>
<p>在<code>kernel.c</code>中 extern
实现加载和存储指令的汇编代码函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">ldr_test</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_ldr_test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ldr_test(); <span class="comment">// Call the external assembly function</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>ldr_test</code>函数的实现在<code>arm_test.S</code>中：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.global</span> ldr_test</span><br><span class="line"><span class="symbol">ldr_test:</span></span><br><span class="line">    <span class="keyword">mov</span> x1, <span class="number">0x80000</span> <span class="comment">// address 0x80000 in x1</span></span><br><span class="line">    <span class="keyword">mov</span> x3, <span class="number">16</span> <span class="comment">// Load immediate decimal value 16 into x3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ldr</span> x0, [x1] <span class="comment">// Load the value from memory address in x1 (0x80000) into x0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ldr</span> x2, [x1, <span class="number">#8</span>] <span class="comment">// Load the value from memory address (x1 + 8) into x2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ldr</span> x4, [x1, x3] <span class="comment">// Load the value from memory address (x1 + x3) into x4, it&#x27;s 0x80010</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">ldr</span> x5, [x1, x3, <span class="keyword">LSL</span> <span class="number">#3</span>] <span class="comment">// Load the value from memory address (x1 + (x3 &lt;&lt; 2)) into x5, it&#x27;s 0x80040</span></span><br><span class="line"></span><br><span class="line">    ret</span><br></pre></td></tr></table></figure>
<p>然后就能编译运行。</p>
<p><img src="/2025/09/14/ARM64%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A8%8B-%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%AD%98%E5%82%A8%E6%8C%87%E4%BB%A4/2025-09-14-19-33-07.png"></p>
]]></content>
  </entry>
</search>
